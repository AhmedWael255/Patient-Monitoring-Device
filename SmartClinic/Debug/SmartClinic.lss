
SmartClinic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c6  00800060  00003b0e  00003b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002eb0  00000000  00000000  00003e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c4  00000000  00000000  00006cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00007dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00007f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000a558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000b8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000caa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000cc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000cf5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d929  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <main>
      7a:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e1       	ldi	r26, 0x18	; 24
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 32 1d 	jmp	0x3a64	; 0x3a64 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e1       	ldi	r24, 0x18	; 24
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 32 1d 	jmp	0x3a64	; 0x3a64 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e1       	ldi	r22, 0x18	; 24
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e0 5e       	subi	r30, 0xE0	; 224
     a84:	fd 4f       	sbci	r31, 0xFD	; 253
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <DIO_vidSetPinDir>:

// use port number A,B,C,D
// use pin number PIN0..7
//use direction INPUT , OUTPUT , INPULLUP

void DIO_vidSetPinDir(uint8 port_no , uint8 pin_no , uint8 dir) {
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <DIO_vidSetPinDir+0x6>
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <DIO_vidSetPinDir+0x8>
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	6a 83       	std	Y+2, r22	; 0x02
     dfa:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_no) {
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3d 83       	std	Y+5, r19	; 0x05
     e04:	2c 83       	std	Y+4, r18	; 0x04
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <DIO_vidSetPinDir+0x2a>
     e10:	72 c0       	rjmp	.+228    	; 0xef6 <DIO_vidSetPinDir+0x10e>
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	23 30       	cpi	r18, 0x03	; 3
     e18:	31 05       	cpc	r19, r1
     e1a:	34 f4       	brge	.+12     	; 0xe28 <DIO_vidSetPinDir+0x40>
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	71 f0       	breq	.+28     	; 0xe42 <DIO_vidSetPinDir+0x5a>
     e26:	73 c1       	rjmp	.+742    	; 0x110e <DIO_vidSetPinDir+0x326>
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	3d 81       	ldd	r19, Y+5	; 0x05
     e2c:	23 30       	cpi	r18, 0x03	; 3
     e2e:	31 05       	cpc	r19, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <DIO_vidSetPinDir+0x4c>
     e32:	bb c0       	rjmp	.+374    	; 0xfaa <DIO_vidSetPinDir+0x1c2>
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	91 05       	cpc	r25, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_vidSetPinDir+0x58>
     e3e:	0f c1       	rjmp	.+542    	; 0x105e <DIO_vidSetPinDir+0x276>
     e40:	66 c1       	rjmp	.+716    	; 0x110e <DIO_vidSetPinDir+0x326>
	case A:
		if (dir==0) ClrBit(DDRA,pin_no);
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	88 23       	and	r24, r24
     e46:	a9 f4       	brne	.+42     	; 0xe72 <DIO_vidSetPinDir+0x8a>
     e48:	aa e3       	ldi	r26, 0x3A	; 58
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e3       	ldi	r30, 0x3A	; 58
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_vidSetPinDir+0x7e>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_vidSetPinDir+0x7a>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	4e c1       	rjmp	.+668    	; 0x110e <DIO_vidSetPinDir+0x326>
		else if (dir==1) SetBit(DDRA,pin_no);
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	a1 f4       	brne	.+40     	; 0xea0 <DIO_vidSetPinDir+0xb8>
     e78:	aa e3       	ldi	r26, 0x3A	; 58
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ea e3       	ldi	r30, 0x3A	; 58
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_vidSetPinDir+0xae>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_vidSetPinDir+0xaa>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	37 c1       	rjmp	.+622    	; 0x110e <DIO_vidSetPinDir+0x326>
		else if (dir==2) {ClrBit(DDRA,pin_no); SetBit(PORTA,pin_no);}
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	09 f0       	breq	.+2      	; 0xea8 <DIO_vidSetPinDir+0xc0>
     ea6:	33 c1       	rjmp	.+614    	; 0x110e <DIO_vidSetPinDir+0x326>
     ea8:	aa e3       	ldi	r26, 0x3A	; 58
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ea e3       	ldi	r30, 0x3A	; 58
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_vidSetPinDir+0xdc>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	2a 95       	dec	r18
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_vidSetPinDir+0xd8>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	ab e3       	ldi	r26, 0x3B	; 59
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	eb e3       	ldi	r30, 0x3B	; 59
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_vidSetPinDir+0x104>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_vidSetPinDir+0x100>
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	0c c1       	rjmp	.+536    	; 0x110e <DIO_vidSetPinDir+0x326>
		break;
	case B:
			if (dir==0) ClrBit(DDRB,pin_no);
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 23       	and	r24, r24
     efa:	a9 f4       	brne	.+42     	; 0xf26 <DIO_vidSetPinDir+0x13e>
     efc:	a7 e3       	ldi	r26, 0x37	; 55
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e7 e3       	ldi	r30, 0x37	; 55
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_vidSetPinDir+0x132>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_vidSetPinDir+0x12e>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	f4 c0       	rjmp	.+488    	; 0x110e <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRB,pin_no);
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <DIO_vidSetPinDir+0x16c>
     f2c:	a7 e3       	ldi	r26, 0x37	; 55
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e7 e3       	ldi	r30, 0x37	; 55
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_vidSetPinDir+0x162>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_vidSetPinDir+0x15e>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	dd c0       	rjmp	.+442    	; 0x110e <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRB,pin_no); SetBit(PORTB,pin_no);}
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	82 30       	cpi	r24, 0x02	; 2
     f58:	09 f0       	breq	.+2      	; 0xf5c <DIO_vidSetPinDir+0x174>
     f5a:	d9 c0       	rjmp	.+434    	; 0x110e <DIO_vidSetPinDir+0x326>
     f5c:	a7 e3       	ldi	r26, 0x37	; 55
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e7 e3       	ldi	r30, 0x37	; 55
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_vidSetPinDir+0x190>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	2a 95       	dec	r18
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_vidSetPinDir+0x18c>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	a8 e3       	ldi	r26, 0x38	; 56
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e8 e3       	ldi	r30, 0x38	; 56
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_vidSetPinDir+0x1b8>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_vidSetPinDir+0x1b4>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	b2 c0       	rjmp	.+356    	; 0x110e <DIO_vidSetPinDir+0x326>
			break;
	case C:
			if (dir==0) ClrBit(DDRC,pin_no);
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 23       	and	r24, r24
     fae:	a9 f4       	brne	.+42     	; 0xfda <DIO_vidSetPinDir+0x1f2>
     fb0:	a4 e3       	ldi	r26, 0x34	; 52
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e4 e3       	ldi	r30, 0x34	; 52
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_vidSetPinDir+0x1e6>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_vidSetPinDir+0x1e2>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	9a c0       	rjmp	.+308    	; 0x110e <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRC,pin_no);
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	a1 f4       	brne	.+40     	; 0x1008 <DIO_vidSetPinDir+0x220>
     fe0:	a4 e3       	ldi	r26, 0x34	; 52
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_vidSetPinDir+0x216>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_vidSetPinDir+0x212>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	83 c0       	rjmp	.+262    	; 0x110e <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRC,pin_no); SetBit(PORTC,pin_no);}
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	09 f0       	breq	.+2      	; 0x1010 <DIO_vidSetPinDir+0x228>
    100e:	7f c0       	rjmp	.+254    	; 0x110e <DIO_vidSetPinDir+0x326>
    1010:	a4 e3       	ldi	r26, 0x34	; 52
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e4 e3       	ldi	r30, 0x34	; 52
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_vidSetPinDir+0x244>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	2a 95       	dec	r18
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_vidSetPinDir+0x240>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	a5 e3       	ldi	r26, 0x35	; 53
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e3       	ldi	r30, 0x35	; 53
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_vidSetPinDir+0x26c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_vidSetPinDir+0x268>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	58 c0       	rjmp	.+176    	; 0x110e <DIO_vidSetPinDir+0x326>
			break;
	case D:
			if (dir==0) ClrBit(DDRD,pin_no);
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 23       	and	r24, r24
    1062:	a9 f4       	brne	.+42     	; 0x108e <DIO_vidSetPinDir+0x2a6>
    1064:	a1 e3       	ldi	r26, 0x31	; 49
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e3       	ldi	r30, 0x31	; 49
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_vidSetPinDir+0x29a>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_vidSetPinDir+0x296>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	40 c0       	rjmp	.+128    	; 0x110e <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRD,pin_no);
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	a1 f4       	brne	.+40     	; 0x10bc <DIO_vidSetPinDir+0x2d4>
    1094:	a1 e3       	ldi	r26, 0x31	; 49
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_vidSetPinDir+0x2ca>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_vidSetPinDir+0x2c6>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	29 c0       	rjmp	.+82     	; 0x110e <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRD,pin_no); SetBit(PORTD,pin_no);}
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	31 f5       	brne	.+76     	; 0x110e <DIO_vidSetPinDir+0x326>
    10c2:	a1 e3       	ldi	r26, 0x31	; 49
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e1 e3       	ldi	r30, 0x31	; 49
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_vidSetPinDir+0x2f6>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_vidSetPinDir+0x2f2>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_vidSetPinDir+0x31e>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_vidSetPinDir+0x31a>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
			break;
	}
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <DIO_vidSetPortDirMask>:

void DIO_vidSetPortDirMask(uint8 port_no , uint8 DirMask) {
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_vidSetPortDirMask+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_vidSetPortDirMask+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3c 83       	std	Y+4, r19	; 0x04
    1136:	2b 83       	std	Y+3, r18	; 0x03
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	d9 f0       	breq	.+54     	; 0x1178 <DIO_vidSetPortDirMask+0x5a>
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	23 30       	cpi	r18, 0x03	; 3
    1148:	31 05       	cpc	r19, r1
    114a:	34 f4       	brge	.+12     	; 0x1158 <DIO_vidSetPortDirMask+0x3a>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	61 f0       	breq	.+24     	; 0x116e <DIO_vidSetPortDirMask+0x50>
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <DIO_vidSetPortDirMask+0x76>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	23 30       	cpi	r18, 0x03	; 3
    115e:	31 05       	cpc	r19, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <DIO_vidSetPortDirMask+0x64>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	91 05       	cpc	r25, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_vidSetPortDirMask+0x6e>
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <DIO_vidSetPortDirMask+0x76>
	case A:
			DDRA=DirMask;
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <DIO_vidSetPortDirMask+0x76>
			break;
	case B:
			DDRB=DirMask;
    1178:	e7 e3       	ldi	r30, 0x37	; 55
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <DIO_vidSetPortDirMask+0x76>
			break;
	case C:
			DDRC=DirMask;
    1182:	e4 e3       	ldi	r30, 0x34	; 52
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <DIO_vidSetPortDirMask+0x76>
			break;
	case D:
			DDRD=DirMask;
    118c:	e1 e3       	ldi	r30, 0x31	; 49
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
			break;
	}
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(uint8 port_no , uint8 dir) {
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <DIO_vidSetPortDir+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_vidSetPortDir+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3c 83       	std	Y+4, r19	; 0x04
    11ba:	2b 83       	std	Y+3, r18	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	91 05       	cpc	r25, r1
    11c4:	91 f1       	breq	.+100    	; 0x122a <DIO_vidSetPortDir+0x88>
    11c6:	2b 81       	ldd	r18, Y+3	; 0x03
    11c8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ca:	23 30       	cpi	r18, 0x03	; 3
    11cc:	31 05       	cpc	r19, r1
    11ce:	34 f4       	brge	.+12     	; 0x11dc <DIO_vidSetPortDir+0x3a>
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	69 f0       	breq	.+26     	; 0x11f4 <DIO_vidSetPortDir+0x52>
    11da:	74 c0       	rjmp	.+232    	; 0x12c4 <DIO_vidSetPortDir+0x122>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	23 30       	cpi	r18, 0x03	; 3
    11e2:	31 05       	cpc	r19, r1
    11e4:	e1 f1       	breq	.+120    	; 0x125e <DIO_vidSetPortDir+0xbc>
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <DIO_vidSetPortDir+0x50>
    11f0:	50 c0       	rjmp	.+160    	; 0x1292 <DIO_vidSetPortDir+0xf0>
    11f2:	68 c0       	rjmp	.+208    	; 0x12c4 <DIO_vidSetPortDir+0x122>
	case A:
		if (dir==0)      {DDRA=0;}
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 23       	and	r24, r24
    11f8:	21 f4       	brne	.+8      	; 0x1202 <DIO_vidSetPortDir+0x60>
    11fa:	ea e3       	ldi	r30, 0x3A	; 58
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	10 82       	st	Z, r1
    1200:	61 c0       	rjmp	.+194    	; 0x12c4 <DIO_vidSetPortDir+0x122>
		else if (dir==1) {DDRA=0xFF;}
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	29 f4       	brne	.+10     	; 0x1212 <DIO_vidSetPortDir+0x70>
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	80 83       	st	Z, r24
    1210:	59 c0       	rjmp	.+178    	; 0x12c4 <DIO_vidSetPortDir+0x122>
		else if (dir==2) {DDRA=0; PORTA=0xFF;}
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	09 f0       	breq	.+2      	; 0x121a <DIO_vidSetPortDir+0x78>
    1218:	55 c0       	rjmp	.+170    	; 0x12c4 <DIO_vidSetPortDir+0x122>
    121a:	ea e3       	ldi	r30, 0x3A	; 58
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	10 82       	st	Z, r1
    1220:	eb e3       	ldi	r30, 0x3B	; 59
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	80 83       	st	Z, r24
    1228:	4d c0       	rjmp	.+154    	; 0x12c4 <DIO_vidSetPortDir+0x122>
		break;
	case B:
		if (dir==0)      {DDRB=0;}
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 23       	and	r24, r24
    122e:	21 f4       	brne	.+8      	; 0x1238 <DIO_vidSetPortDir+0x96>
    1230:	e7 e3       	ldi	r30, 0x37	; 55
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	10 82       	st	Z, r1
    1236:	46 c0       	rjmp	.+140    	; 0x12c4 <DIO_vidSetPortDir+0x122>
		else if (dir==1) {DDRB=0xFF;}
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	29 f4       	brne	.+10     	; 0x1248 <DIO_vidSetPortDir+0xa6>
    123e:	e7 e3       	ldi	r30, 0x37	; 55
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	80 83       	st	Z, r24
    1246:	3e c0       	rjmp	.+124    	; 0x12c4 <DIO_vidSetPortDir+0x122>
		else if (dir==2) {DDRB=0; PORTB=0xFF;}
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	d9 f5       	brne	.+118    	; 0x12c4 <DIO_vidSetPortDir+0x122>
    124e:	e7 e3       	ldi	r30, 0x37	; 55
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	80 83       	st	Z, r24
    125c:	33 c0       	rjmp	.+102    	; 0x12c4 <DIO_vidSetPortDir+0x122>
		break;
	case C:
			if (dir==0)      {DDRC=0;}
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 23       	and	r24, r24
    1262:	21 f4       	brne	.+8      	; 0x126c <DIO_vidSetPortDir+0xca>
    1264:	e4 e3       	ldi	r30, 0x34	; 52
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	10 82       	st	Z, r1
    126a:	2c c0       	rjmp	.+88     	; 0x12c4 <DIO_vidSetPortDir+0x122>
			else if (dir==1) {DDRC=0xFF;}
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	29 f4       	brne	.+10     	; 0x127c <DIO_vidSetPortDir+0xda>
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 83       	st	Z, r24
    127a:	24 c0       	rjmp	.+72     	; 0x12c4 <DIO_vidSetPortDir+0x122>
			else if (dir==2) {DDRC=0; PORTC=0xFF;}
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	09 f5       	brne	.+66     	; 0x12c4 <DIO_vidSetPortDir+0x122>
    1282:	e4 e3       	ldi	r30, 0x34	; 52
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	10 82       	st	Z, r1
    1288:	e5 e3       	ldi	r30, 0x35	; 53
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	80 83       	st	Z, r24
    1290:	19 c0       	rjmp	.+50     	; 0x12c4 <DIO_vidSetPortDir+0x122>
			break;
	case D:
			if (dir==0)      {DDRD=0;}
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 23       	and	r24, r24
    1296:	21 f4       	brne	.+8      	; 0x12a0 <DIO_vidSetPortDir+0xfe>
    1298:	e1 e3       	ldi	r30, 0x31	; 49
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	10 82       	st	Z, r1
    129e:	12 c0       	rjmp	.+36     	; 0x12c4 <DIO_vidSetPortDir+0x122>
			else if (dir==1) {DDRD=0xFF;}
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <DIO_vidSetPortDir+0x10e>
    12a6:	e1 e3       	ldi	r30, 0x31	; 49
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	80 83       	st	Z, r24
    12ae:	0a c0       	rjmp	.+20     	; 0x12c4 <DIO_vidSetPortDir+0x122>
			else if (dir==2) {DDRD=0; PORTD=0xFF;}
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	39 f4       	brne	.+14     	; 0x12c4 <DIO_vidSetPortDir+0x122>
    12b6:	e1 e3       	ldi	r30, 0x31	; 49
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	10 82       	st	Z, r1
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	80 83       	st	Z, r24
			break;
	}
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <DIO_vidWriteOnPin>:

void DIO_vidWriteOnPin(uint8 port_no , uint8 pin_no , uint8 level) {
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <DIO_vidWriteOnPin+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <DIO_vidWriteOnPin+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	6a 83       	std	Y+2, r22	; 0x02
    12e4:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_no) {
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3d 83       	std	Y+5, r19	; 0x05
    12ee:	2c 83       	std	Y+4, r18	; 0x04
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <DIO_vidWriteOnPin+0x2a>
    12fa:	48 c0       	rjmp	.+144    	; 0x138c <DIO_vidWriteOnPin+0xba>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	23 30       	cpi	r18, 0x03	; 3
    1302:	31 05       	cpc	r19, r1
    1304:	34 f4       	brge	.+12     	; 0x1312 <DIO_vidWriteOnPin+0x40>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	71 f0       	breq	.+28     	; 0x132c <DIO_vidWriteOnPin+0x5a>
    1310:	cb c0       	rjmp	.+406    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	23 30       	cpi	r18, 0x03	; 3
    1318:	31 05       	cpc	r19, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <DIO_vidWriteOnPin+0x4c>
    131c:	67 c0       	rjmp	.+206    	; 0x13ec <DIO_vidWriteOnPin+0x11a>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <DIO_vidWriteOnPin+0x58>
    1328:	91 c0       	rjmp	.+290    	; 0x144c <DIO_vidWriteOnPin+0x17a>
    132a:	be c0       	rjmp	.+380    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
	case A:
		if (level==0) ClrBit(PORTA,pin_no);
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 23       	and	r24, r24
    1330:	a9 f4       	brne	.+42     	; 0x135c <DIO_vidWriteOnPin+0x8a>
    1332:	ab e3       	ldi	r26, 0x3B	; 59
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	eb e3       	ldi	r30, 0x3B	; 59
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_vidWriteOnPin+0x7e>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_vidWriteOnPin+0x7a>
    1354:	80 95       	com	r24
    1356:	84 23       	and	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	a6 c0       	rjmp	.+332    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
		else if (level==1) SetBit(PORTA,pin_no);
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	09 f0       	breq	.+2      	; 0x1364 <DIO_vidWriteOnPin+0x92>
    1362:	a2 c0       	rjmp	.+324    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
    1364:	ab e3       	ldi	r26, 0x3B	; 59
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e3       	ldi	r30, 0x3B	; 59
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_vidWriteOnPin+0xb0>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_vidWriteOnPin+0xac>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	8e c0       	rjmp	.+284    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
		break;
	case B:
			if (level==0) ClrBit(PORTB,pin_no);
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 23       	and	r24, r24
    1390:	a9 f4       	brne	.+42     	; 0x13bc <DIO_vidWriteOnPin+0xea>
    1392:	a8 e3       	ldi	r26, 0x38	; 56
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e8 e3       	ldi	r30, 0x38	; 56
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_vidWriteOnPin+0xde>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_vidWriteOnPin+0xda>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	76 c0       	rjmp	.+236    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTB,pin_no);
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <DIO_vidWriteOnPin+0xf2>
    13c2:	72 c0       	rjmp	.+228    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
    13c4:	a8 e3       	ldi	r26, 0x38	; 56
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e3       	ldi	r30, 0x38	; 56
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_vidWriteOnPin+0x110>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_vidWriteOnPin+0x10c>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	5e c0       	rjmp	.+188    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
			break;
	case C:
			if (level==0) ClrBit(PORTC,pin_no);
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 23       	and	r24, r24
    13f0:	a9 f4       	brne	.+42     	; 0x141c <DIO_vidWriteOnPin+0x14a>
    13f2:	a5 e3       	ldi	r26, 0x35	; 53
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_vidWriteOnPin+0x13e>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_vidWriteOnPin+0x13a>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	46 c0       	rjmp	.+140    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTC,pin_no);
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	09 f0       	breq	.+2      	; 0x1424 <DIO_vidWriteOnPin+0x152>
    1422:	42 c0       	rjmp	.+132    	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
    1424:	a5 e3       	ldi	r26, 0x35	; 53
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e5 e3       	ldi	r30, 0x35	; 53
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_vidWriteOnPin+0x170>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_vidWriteOnPin+0x16c>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	2e c0       	rjmp	.+92     	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
			break;
	case D:
			if (level==0) ClrBit(PORTD,pin_no);
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 23       	and	r24, r24
    1450:	a9 f4       	brne	.+42     	; 0x147c <DIO_vidWriteOnPin+0x1aa>
    1452:	a2 e3       	ldi	r26, 0x32	; 50
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e2 e3       	ldi	r30, 0x32	; 50
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_vidWriteOnPin+0x19e>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_vidWriteOnPin+0x19a>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	16 c0       	rjmp	.+44     	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTD,pin_no);
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	99 f4       	brne	.+38     	; 0x14a8 <DIO_vidWriteOnPin+0x1d6>
    1482:	a2 e3       	ldi	r26, 0x32	; 50
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_vidWriteOnPin+0x1ce>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_vidWriteOnPin+0x1ca>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
			break;
	}
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <DIO_vidWriteOnPort>:

void DIO_vidWriteOnPort(uint8 port_no , uint8 level) {
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_vidWriteOnPort+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_vidWriteOnPort+0x8>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3c 83       	std	Y+4, r19	; 0x04
    14d0:	2b 83       	std	Y+3, r18	; 0x03
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	91 05       	cpc	r25, r1
    14da:	d9 f0       	breq	.+54     	; 0x1512 <DIO_vidWriteOnPort+0x5a>
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	23 30       	cpi	r18, 0x03	; 3
    14e2:	31 05       	cpc	r19, r1
    14e4:	34 f4       	brge	.+12     	; 0x14f2 <DIO_vidWriteOnPort+0x3a>
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	91 05       	cpc	r25, r1
    14ee:	61 f0       	breq	.+24     	; 0x1508 <DIO_vidWriteOnPort+0x50>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <DIO_vidWriteOnPort+0x76>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	23 30       	cpi	r18, 0x03	; 3
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <DIO_vidWriteOnPort+0x64>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <DIO_vidWriteOnPort+0x6e>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <DIO_vidWriteOnPort+0x76>
			case A:
					PORTA=level;
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <DIO_vidWriteOnPort+0x76>
					break;
			case B:
					PORTB=level;
    1512:	e8 e3       	ldi	r30, 0x38	; 56
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <DIO_vidWriteOnPort+0x76>
					break;
			case C:
					PORTC=level;
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <DIO_vidWriteOnPort+0x76>
					break;
			case D:
					PORTD=level;
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
					break;
		}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <DIO_u8ReadFromPin>:
				else if (level==1) {PORTD=0xFF;}
				break;
	}
}*/

uint8 DIO_u8ReadFromPin(uint8 port_no , uint8 pin_no) {
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_u8ReadFromPin+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_u8ReadFromPin+0x8>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp;
	switch(port_no) {
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3d 83       	std	Y+5, r19	; 0x05
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	d9 f0       	breq	.+54     	; 0x1598 <DIO_u8ReadFromPin+0x5c>
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	23 30       	cpi	r18, 0x03	; 3
    1568:	31 05       	cpc	r19, r1
    156a:	34 f4       	brge	.+12     	; 0x1578 <DIO_u8ReadFromPin+0x3c>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	61 f0       	breq	.+24     	; 0x158e <DIO_u8ReadFromPin+0x52>
    1576:	1e c0       	rjmp	.+60     	; 0x15b4 <DIO_u8ReadFromPin+0x78>
    1578:	2c 81       	ldd	r18, Y+4	; 0x04
    157a:	3d 81       	ldd	r19, Y+5	; 0x05
    157c:	23 30       	cpi	r18, 0x03	; 3
    157e:	31 05       	cpc	r19, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <DIO_u8ReadFromPin+0x66>
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	84 30       	cpi	r24, 0x04	; 4
    1588:	91 05       	cpc	r25, r1
    158a:	81 f0       	breq	.+32     	; 0x15ac <DIO_u8ReadFromPin+0x70>
    158c:	13 c0       	rjmp	.+38     	; 0x15b4 <DIO_u8ReadFromPin+0x78>
		case A:
				temp=PINA;
    158e:	e9 e3       	ldi	r30, 0x39	; 57
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	0e c0       	rjmp	.+28     	; 0x15b4 <DIO_u8ReadFromPin+0x78>
				break;
		case B:
				temp=PINB;
    1598:	e6 e3       	ldi	r30, 0x36	; 54
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <DIO_u8ReadFromPin+0x78>
				break;
		case C:
				temp=PINC;
    15a2:	e3 e3       	ldi	r30, 0x33	; 51
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <DIO_u8ReadFromPin+0x78>
				break;
		case D:
				temp=PIND;
    15ac:	e0 e3       	ldi	r30, 0x30	; 48
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	89 83       	std	Y+1, r24	; 0x01
				break;
		default : //Do Nothing
				break;
		}
	return temp;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <DIO_u8ReadFromPort>:

uint8 DIO_u8ReadFromPort(uint8 port_no) {
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <DIO_u8ReadFromPort+0x6>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <DIO_u8ReadFromPort+0x8>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp;
	switch(port_no) {
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3c 83       	std	Y+4, r19	; 0x04
    15dc:	2b 83       	std	Y+3, r18	; 0x03
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	91 05       	cpc	r25, r1
    15e6:	d9 f0       	breq	.+54     	; 0x161e <DIO_u8ReadFromPort+0x58>
    15e8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ea:	3c 81       	ldd	r19, Y+4	; 0x04
    15ec:	23 30       	cpi	r18, 0x03	; 3
    15ee:	31 05       	cpc	r19, r1
    15f0:	34 f4       	brge	.+12     	; 0x15fe <DIO_u8ReadFromPort+0x38>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	61 f0       	breq	.+24     	; 0x1614 <DIO_u8ReadFromPort+0x4e>
    15fc:	1e c0       	rjmp	.+60     	; 0x163a <DIO_u8ReadFromPort+0x74>
    15fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1600:	3c 81       	ldd	r19, Y+4	; 0x04
    1602:	23 30       	cpi	r18, 0x03	; 3
    1604:	31 05       	cpc	r19, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <DIO_u8ReadFromPort+0x62>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	91 05       	cpc	r25, r1
    1610:	81 f0       	breq	.+32     	; 0x1632 <DIO_u8ReadFromPort+0x6c>
    1612:	13 c0       	rjmp	.+38     	; 0x163a <DIO_u8ReadFromPort+0x74>
		case A:
				temp=PINA;
    1614:	e9 e3       	ldi	r30, 0x39	; 57
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	0e c0       	rjmp	.+28     	; 0x163a <DIO_u8ReadFromPort+0x74>
				break;
		case B:
				temp=PINB;
    161e:	e6 e3       	ldi	r30, 0x36	; 54
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	09 c0       	rjmp	.+18     	; 0x163a <DIO_u8ReadFromPort+0x74>
				break;
		case C:
				temp=PINC;
    1628:	e3 e3       	ldi	r30, 0x33	; 51
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	04 c0       	rjmp	.+8      	; 0x163a <DIO_u8ReadFromPort+0x74>
				break;
		case D:
				temp=PIND;
    1632:	e0 e3       	ldi	r30, 0x30	; 48
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	89 83       	std	Y+1, r24	; 0x01
				break;

		default : //Do Nothing
				break;
		}
	return temp;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <LCD_vidInit>:


#if BIT_MODE_4 == DISABLE

	void LCD_vidInit(void)
	{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	2e 97       	sbiw	r28, 0x0e	; 14
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
		DIO_vidSetPortDir(PORT_DATA_NO , OUTPUT);
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_vidSetPortDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , EN , OUTPUT);
    1666:	84 e0       	ldi	r24, 0x04	; 4
    1668:	67 e0       	ldi	r22, 0x07	; 7
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_vidSetPinDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , RW , OUTPUT);
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	66 e0       	ldi	r22, 0x06	; 6
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_vidSetPinDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , RS , OUTPUT);
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	65 e0       	ldi	r22, 0x05	; 5
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_vidSetPinDir>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a8 e4       	ldi	r26, 0x48	; 72
    168a:	b2 e4       	ldi	r27, 0x42	; 66
    168c:	8b 87       	std	Y+11, r24	; 0x0b
    168e:	9c 87       	std	Y+12, r25	; 0x0c
    1690:	ad 87       	std	Y+13, r26	; 0x0d
    1692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	6b 85       	ldd	r22, Y+11	; 0x0b
    1696:	7c 85       	ldd	r23, Y+12	; 0x0c
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a ef       	ldi	r20, 0xFA	; 250
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8f 83       	std	Y+7, r24	; 0x07
    16ae:	98 87       	std	Y+8, r25	; 0x08
    16b0:	a9 87       	std	Y+9, r26	; 0x09
    16b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <LCD_vidInit+0x8c>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <LCD_vidInit+0xec>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <LCD_vidInit+0xda>
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <LCD_vidInit+0xce>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_vidInit+0x116>
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
		LCD_vidCmd(CMD_FUNCTION_8BIT);
    1768:	88 e3       	ldi	r24, 0x38	; 56
    176a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
		LCD_vidCmd(CMD_DISPLAY_ON);
    176e:	8c e0       	ldi	r24, 0x0C	; 12
    1770:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
		LCD_vidCmd(CMD_ENTRY_MODE);
    1774:	86 e0       	ldi	r24, 0x06	; 6
    1776:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
		LCD_vidCmd(CMD_CLEAR);
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
		LCD_vidCmd(CMD_HOME);
    1780:	80 e8       	ldi	r24, 0x80	; 128
    1782:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>


	}
    1786:	2e 96       	adiw	r28, 0x0e	; 14
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <LCD_vidCmd>:


	void LCD_vidCmd(uint8 cmd)
	{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	ab 97       	sbiw	r28, 0x2b	; 43
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	67 e0       	ldi	r22, 0x07	; 7
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RS,LOW);
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	65 e0       	ldi	r22, 0x05	; 5
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RW,LOW);
    17c2:	84 e0       	ldi	r24, 0x04	; 4
    17c4:	66 e0       	ldi	r22, 0x06	; 6
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>

		DIO_vidWriteOnPort(PORT_DATA_NO,cmd);
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	6b a5       	ldd	r22, Y+43	; 0x2b
    17d0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_vidWriteOnPort>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	8f a3       	std	Y+39, r24	; 0x27
    17de:	98 a7       	std	Y+40, r25	; 0x28
    17e0:	a9 a7       	std	Y+41, r26	; 0x29
    17e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6f a1       	ldd	r22, Y+39	; 0x27
    17e6:	78 a5       	ldd	r23, Y+40	; 0x28
    17e8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8b a3       	std	Y+35, r24	; 0x23
    17fe:	9c a3       	std	Y+36, r25	; 0x24
    1800:	ad a3       	std	Y+37, r26	; 0x25
    1802:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1804:	6b a1       	ldd	r22, Y+35	; 0x23
    1806:	7c a1       	ldd	r23, Y+36	; 0x24
    1808:	8d a1       	ldd	r24, Y+37	; 0x25
    180a:	9e a1       	ldd	r25, Y+38	; 0x26
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_vidCmd+0x8e>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9a a3       	std	Y+34, r25	; 0x22
    1822:	89 a3       	std	Y+33, r24	; 0x21
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_vidCmd+0x10c>
	else if (__tmp > 65535)
    1826:	6b a1       	ldd	r22, Y+35	; 0x23
    1828:	7c a1       	ldd	r23, Y+36	; 0x24
    182a:	8d a1       	ldd	r24, Y+37	; 0x25
    182c:	9e a1       	ldd	r25, Y+38	; 0x26
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_vidCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6f a1       	ldd	r22, Y+39	; 0x27
    1840:	78 a5       	ldd	r23, Y+40	; 0x28
    1842:	89 a5       	ldd	r24, Y+41	; 0x29
    1844:	9a a5       	ldd	r25, Y+42	; 0x2a
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9a a3       	std	Y+34, r25	; 0x22
    1864:	89 a3       	std	Y+33, r24	; 0x21
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_vidCmd+0xee>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	98 a3       	std	Y+32, r25	; 0x20
    186e:	8f 8f       	std	Y+31, r24	; 0x1f
    1870:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1872:	98 a1       	ldd	r25, Y+32	; 0x20
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_vidCmd+0xdc>
    1878:	98 a3       	std	Y+32, r25	; 0x20
    187a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9a a3       	std	Y+34, r25	; 0x22
    1884:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	89 a1       	ldd	r24, Y+33	; 0x21
    1888:	9a a1       	ldd	r25, Y+34	; 0x22
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_vidCmd+0xd0>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_vidCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6b a1       	ldd	r22, Y+35	; 0x23
    1892:	7c a1       	ldd	r23, Y+36	; 0x24
    1894:	8d a1       	ldd	r24, Y+37	; 0x25
    1896:	9e a1       	ldd	r25, Y+38	; 0x26
    1898:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9a a3       	std	Y+34, r25	; 0x22
    18a2:	89 a3       	std	Y+33, r24	; 0x21
    18a4:	89 a1       	ldd	r24, Y+33	; 0x21
    18a6:	9a a1       	ldd	r25, Y+34	; 0x22
    18a8:	9e 8f       	std	Y+30, r25	; 0x1e
    18aa:	8d 8f       	std	Y+29, r24	; 0x1d
    18ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_vidCmd+0x118>
    18b4:	9e 8f       	std	Y+30, r25	; 0x1e
    18b6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,LOW);
    18b8:	84 e0       	ldi	r24, 0x04	; 4
    18ba:	67 e0       	ldi	r22, 0x07	; 7
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 ea       	ldi	r26, 0xA0	; 160
    18c8:	b0 e4       	ldi	r27, 0x40	; 64
    18ca:	89 8f       	std	Y+25, r24	; 0x19
    18cc:	9a 8f       	std	Y+26, r25	; 0x1a
    18ce:	ab 8f       	std	Y+27, r26	; 0x1b
    18d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	69 8d       	ldd	r22, Y+25	; 0x19
    18d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8d 8b       	std	Y+21, r24	; 0x15
    18ec:	9e 8b       	std	Y+22, r25	; 0x16
    18ee:	af 8b       	std	Y+23, r26	; 0x17
    18f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18f2:	6d 89       	ldd	r22, Y+21	; 0x15
    18f4:	7e 89       	ldd	r23, Y+22	; 0x16
    18f6:	8f 89       	ldd	r24, Y+23	; 0x17
    18f8:	98 8d       	ldd	r25, Y+24	; 0x18
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_vidCmd+0x17c>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_vidCmd+0x1fa>
	else if (__tmp > 65535)
    1914:	6d 89       	ldd	r22, Y+21	; 0x15
    1916:	7e 89       	ldd	r23, Y+22	; 0x16
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_vidCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	69 8d       	ldd	r22, Y+25	; 0x19
    192e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_vidCmd+0x1dc>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9a 8b       	std	Y+18, r25	; 0x12
    195c:	89 8b       	std	Y+17, r24	; 0x11
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	9a 89       	ldd	r25, Y+18	; 0x12
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_vidCmd+0x1ca>
    1966:	9a 8b       	std	Y+18, r25	; 0x12
    1968:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_vidCmd+0x1be>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_vidCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6d 89       	ldd	r22, Y+21	; 0x15
    1980:	7e 89       	ldd	r23, Y+22	; 0x16
    1982:	8f 89       	ldd	r24, Y+23	; 0x17
    1984:	98 8d       	ldd	r25, Y+24	; 0x18
    1986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9c 8b       	std	Y+20, r25	; 0x14
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	8b 89       	ldd	r24, Y+19	; 0x13
    1994:	9c 89       	ldd	r25, Y+20	; 0x14
    1996:	98 8b       	std	Y+16, r25	; 0x10
    1998:	8f 87       	std	Y+15, r24	; 0x0f
    199a:	8f 85       	ldd	r24, Y+15	; 0x0f
    199c:	98 89       	ldd	r25, Y+16	; 0x10
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_vidCmd+0x206>
    19a2:	98 8b       	std	Y+16, r25	; 0x10
    19a4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    19a6:	84 e0       	ldi	r24, 0x04	; 4
    19a8:	67 e0       	ldi	r22, 0x07	; 7
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e4       	ldi	r27, 0x40	; 64
    19b8:	8b 87       	std	Y+11, r24	; 0x0b
    19ba:	9c 87       	std	Y+12, r25	; 0x0c
    19bc:	ad 87       	std	Y+13, r26	; 0x0d
    19be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8f 83       	std	Y+7, r24	; 0x07
    19da:	98 87       	std	Y+8, r25	; 0x08
    19dc:	a9 87       	std	Y+9, r26	; 0x09
    19de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_vidCmd+0x26a>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_vidCmd+0x2e8>
	else if (__tmp > 65535)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_vidCmd+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_vidCmd+0x2ca>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 83       	std	Y+4, r25	; 0x04
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_vidCmd+0x2b8>
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_vidCmd+0x2ac>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_vidCmd+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_vidCmd+0x2f4>
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
    1a94:	ab 96       	adiw	r28, 0x2b	; 43
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <LCD_vidDispChar>:

	void LCD_vidDispChar(uint8 data)
	{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	6d 97       	sbiw	r28, 0x1d	; 29
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	67 e0       	ldi	r22, 0x07	; 7
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RS,HIGH);
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RW,LOW);
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>

		DIO_vidWriteOnPort(PORT_DATA_NO,data);
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ade:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_vidWriteOnPort>
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,LOW);
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	67 e0       	ldi	r22, 0x07	; 7
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 ea       	ldi	r26, 0xA0	; 160
    1af2:	b0 e4       	ldi	r27, 0x40	; 64
    1af4:	89 8f       	std	Y+25, r24	; 0x19
    1af6:	9a 8f       	std	Y+26, r25	; 0x1a
    1af8:	ab 8f       	std	Y+27, r26	; 0x1b
    1afa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	69 8d       	ldd	r22, Y+25	; 0x19
    1afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a ef       	ldi	r20, 0xFA	; 250
    1b0a:	54 e4       	ldi	r21, 0x44	; 68
    1b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8d 8b       	std	Y+21, r24	; 0x15
    1b16:	9e 8b       	std	Y+22, r25	; 0x16
    1b18:	af 8b       	std	Y+23, r26	; 0x17
    1b1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <LCD_vidDispChar+0x98>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <LCD_vidDispChar+0x116>
	else if (__tmp > 65535)
    1b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b40:	7e 89       	ldd	r23, Y+22	; 0x16
    1b42:	8f 89       	ldd	r24, Y+23	; 0x17
    1b44:	98 8d       	ldd	r25, Y+24	; 0x18
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <LCD_vidDispChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	69 8d       	ldd	r22, Y+25	; 0x19
    1b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <LCD_vidDispChar+0xf8>
    1b80:	88 ec       	ldi	r24, 0xC8	; 200
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	89 8b       	std	Y+17, r24	; 0x11
    1b88:	89 89       	ldd	r24, Y+17	; 0x11
    1b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_vidDispChar+0xe6>
    1b90:	9a 8b       	std	Y+18, r25	; 0x12
    1b92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9c 8b       	std	Y+20, r25	; 0x14
    1b9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <LCD_vidDispChar+0xda>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <LCD_vidDispChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	98 8b       	std	Y+16, r25	; 0x10
    1bc2:	8f 87       	std	Y+15, r24	; 0x0f
    1bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc6:	98 89       	ldd	r25, Y+16	; 0x10
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_vidDispChar+0x122>
    1bcc:	98 8b       	std	Y+16, r25	; 0x10
    1bce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    1bd0:	84 e0       	ldi	r24, 0x04	; 4
    1bd2:	67 e0       	ldi	r22, 0x07	; 7
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 ea       	ldi	r26, 0xA0	; 160
    1be0:	b0 e4       	ldi	r27, 0x40	; 64
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a ef       	ldi	r20, 0xFA	; 250
    1bf8:	54 e4       	ldi	r21, 0x44	; 68
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_vidDispChar+0x186>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_vidDispChar+0x204>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_vidDispChar+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_vidDispChar+0x1e6>
    1c6e:	88 ec       	ldi	r24, 0xC8	; 200
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_vidDispChar+0x1d4>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_vidDispChar+0x1c8>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_vidDispChar+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_vidDispChar+0x210>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
	}
    1cbe:	6d 96       	adiw	r28, 0x1d	; 29
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_vidDispString>:
		_delay_ms(5);
	}

#endif
void LCD_vidDispString(uint8 *data)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	61 97       	sbiw	r28, 0x11	; 17
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	99 8b       	std	Y+17, r25	; 0x11
    1ce6:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0 ;
    1ce8:	1f 86       	std	Y+15, r1	; 0x0f
    1cea:	80 c0       	rjmp	.+256    	; 0x1dec <LCD_vidDispString+0x11c>
	while (data[i]!=0) {
		LCD_vidDispChar(data[i]);
    1cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	88 89       	ldd	r24, Y+16	; 0x10
    1cf4:	99 89       	ldd	r25, Y+17	; 0x11
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e2 0f       	add	r30, r18
    1cfa:	f3 1f       	adc	r31, r19
    1cfc:	80 81       	ld	r24, Z
    1cfe:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LCD_vidDispChar>
		i++;
    1d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d04:	8f 5f       	subi	r24, 0xFF	; 255
    1d06:	8f 87       	std	Y+15, r24	; 0x0f
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	a0 e8       	ldi	r26, 0x80	; 128
    1d0e:	bf e3       	ldi	r27, 0x3F	; 63
    1d10:	8b 87       	std	Y+11, r24	; 0x0b
    1d12:	9c 87       	std	Y+12, r25	; 0x0c
    1d14:	ad 87       	std	Y+13, r26	; 0x0d
    1d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	4a ef       	ldi	r20, 0xFA	; 250
    1d26:	54 e4       	ldi	r21, 0x44	; 68
    1d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	8f 83       	std	Y+7, r24	; 0x07
    1d32:	98 87       	std	Y+8, r25	; 0x08
    1d34:	a9 87       	std	Y+9, r26	; 0x09
    1d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f e3       	ldi	r21, 0x3F	; 63
    1d48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d4c:	88 23       	and	r24, r24
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <LCD_vidDispString+0x8a>
		__ticks = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	3f c0       	rjmp	.+126    	; 0x1dd8 <LCD_vidDispString+0x108>
	else if (__tmp > 65535)
    1d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5c:	78 85       	ldd	r23, Y+8	; 0x08
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d6e:	18 16       	cp	r1, r24
    1d70:	4c f5       	brge	.+82     	; 0x1dc4 <LCD_vidDispString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	0f c0       	rjmp	.+30     	; 0x1dba <LCD_vidDispString+0xea>
    1d9c:	88 ec       	ldi	r24, 0xC8	; 200
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_vidDispString+0xd8>
    1dac:	9c 83       	std	Y+4, r25	; 0x04
    1dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	69 f7       	brne	.-38     	; 0x1d9c <LCD_vidDispString+0xcc>
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <LCD_vidDispString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_vidDispString+0x114>
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01

#endif
void LCD_vidDispString(uint8 *data)
{
	uint8 i=0 ;
	while (data[i]!=0) {
    1dec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	88 89       	ldd	r24, Y+16	; 0x10
    1df4:	99 89       	ldd	r25, Y+17	; 0x11
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <LCD_vidDispString+0x134>
    1e02:	74 cf       	rjmp	.-280    	; 0x1cec <LCD_vidDispString+0x1c>
		LCD_vidDispChar(data[i]);
		i++;
		_delay_ms(1);
	}
}
    1e04:	61 96       	adiw	r28, 0x11	; 17
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <main>:
#include "LCD.h"
#include "sensors.h"
#include "wifi.h"

int main ()
{
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	ca 55       	subi	r28, 0x5A	; 90
    1e24:	d0 40       	sbci	r29, 0x00	; 0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
	unsigned int temp , bpm , thresh=350 , time_limit=10 ,HrtVal;
    1e30:	fe 01       	movw	r30, r28
    1e32:	eb 5b       	subi	r30, 0xBB	; 187
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	8e e5       	ldi	r24, 0x5E	; 94
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ed 5b       	subi	r30, 0xBD	; 189
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	8a e0       	ldi	r24, 0x0A	; 10
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
	float sampling_rate=100; // frequency
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a8 ec       	ldi	r26, 0xC8	; 200
    1e52:	b2 e4       	ldi	r27, 0x42	; 66
    1e54:	fe 01       	movw	r30, r28
    1e56:	fd 96       	adiw	r30, 0x3d	; 61
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
	unsigned int avg;


	ADC_Init(Temp_Channel);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <ADC_Init>
	ADC_Init(Heart_Channel);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <ADC_Init>
	LCD_vidInit();
    1e70:	0e 94 25 0b 	call	0x164a	; 0x164a <LCD_vidInit>


	//Initialization
		DIO_vidSetPinDir( PORTD,  PIN0,  INPUT); //Rx
    1e74:	e2 e3       	ldi	r30, 0x32	; 50
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_vidSetPinDir>
		DIO_vidSetPinDir( PORTD,  PIN1,  OUTPUT); //Tx
    1e82:	e2 e3       	ldi	r30, 0x32	; 50
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_vidSetPinDir>
		DIO_vidSetPinDir( RESET_PORT,  RESET_PIN,  OUTPUT); //Reset pin
    1e90:	eb e3       	ldi	r30, 0x3B	; 59
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_vidSetPinDir>
	  USART_inti();
    1e9e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <USART_inti>
	  DIO_vidWriteOnPin(RESET_PORT,RESET_PIN,LOW);
    1ea2:	eb e3       	ldi	r30, 0x3B	; 59
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a8 ec       	ldi	r26, 0xC8	; 200
    1eb6:	b2 e4       	ldi	r27, 0x42	; 66
    1eb8:	8d ab       	std	Y+53, r24	; 0x35
    1eba:	9e ab       	std	Y+54, r25	; 0x36
    1ebc:	af ab       	std	Y+55, r26	; 0x37
    1ebe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	89 ab       	std	Y+49, r24	; 0x31
    1eda:	9a ab       	std	Y+50, r25	; 0x32
    1edc:	ab ab       	std	Y+51, r26	; 0x33
    1ede:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <main+0xec>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	98 ab       	std	Y+48, r25	; 0x30
    1efe:	8f a7       	std	Y+47, r24	; 0x2f
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <main+0x16a>
	else if (__tmp > 65535)
    1f02:	69 a9       	ldd	r22, Y+49	; 0x31
    1f04:	7a a9       	ldd	r23, Y+50	; 0x32
    1f06:	8b a9       	ldd	r24, Y+51	; 0x33
    1f08:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f20:	98 ad       	ldd	r25, Y+56	; 0x38
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	98 ab       	std	Y+48, r25	; 0x30
    1f40:	8f a7       	std	Y+47, r24	; 0x2f
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <main+0x14c>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9e a7       	std	Y+46, r25	; 0x2e
    1f4a:	8d a7       	std	Y+45, r24	; 0x2d
    1f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <main+0x13a>
    1f54:	9e a7       	std	Y+46, r25	; 0x2e
    1f56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <main+0x12e>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f70:	8b a9       	ldd	r24, Y+51	; 0x33
    1f72:	9c a9       	ldd	r25, Y+52	; 0x34
    1f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f82:	98 a9       	ldd	r25, Y+48	; 0x30
    1f84:	9c a7       	std	Y+44, r25	; 0x2c
    1f86:	8b a7       	std	Y+43, r24	; 0x2b
    1f88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <main+0x176>
    1f90:	9c a7       	std	Y+44, r25	; 0x2c
    1f92:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms( 100 );
	  DIO_vidWriteOnPin(RESET_PORT,RESET_PIN,HIGH);
    1f94:	eb e3       	ldi	r30, 0x3B	; 59
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <DIO_vidWriteOnPin>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	aa e7       	ldi	r26, 0x7A	; 122
    1fa8:	b4 e4       	ldi	r27, 0x44	; 68
    1faa:	8f a3       	std	Y+39, r24	; 0x27
    1fac:	98 a7       	std	Y+40, r25	; 0x28
    1fae:	a9 a7       	std	Y+41, r26	; 0x29
    1fb0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a ef       	ldi	r20, 0xFA	; 250
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8b a3       	std	Y+35, r24	; 0x23
    1fcc:	9c a3       	std	Y+36, r25	; 0x24
    1fce:	ad a3       	std	Y+37, r26	; 0x25
    1fd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <main+0x1de>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <main+0x25c>
	else if (__tmp > 65535)
    1ff4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff8:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffa:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <main+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6f a1       	ldd	r22, Y+39	; 0x27
    200e:	78 a5       	ldd	r23, Y+40	; 0x28
    2010:	89 a5       	ldd	r24, Y+41	; 0x29
    2012:	9a a5       	ldd	r25, Y+42	; 0x2a
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9a a3       	std	Y+34, r25	; 0x22
    2032:	89 a3       	std	Y+33, r24	; 0x21
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <main+0x23e>
    2036:	88 ec       	ldi	r24, 0xC8	; 200
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	98 a3       	std	Y+32, r25	; 0x20
    203c:	8f 8f       	std	Y+31, r24	; 0x1f
    203e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2040:	98 a1       	ldd	r25, Y+32	; 0x20
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <main+0x22c>
    2046:	98 a3       	std	Y+32, r25	; 0x20
    2048:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9a a3       	std	Y+34, r25	; 0x22
    2052:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	89 a1       	ldd	r24, Y+33	; 0x21
    2056:	9a a1       	ldd	r25, Y+34	; 0x22
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <main+0x220>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6b a1       	ldd	r22, Y+35	; 0x23
    2060:	7c a1       	ldd	r23, Y+36	; 0x24
    2062:	8d a1       	ldd	r24, Y+37	; 0x25
    2064:	9e a1       	ldd	r25, Y+38	; 0x26
    2066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
    2072:	89 a1       	ldd	r24, Y+33	; 0x21
    2074:	9a a1       	ldd	r25, Y+34	; 0x22
    2076:	9e 8f       	std	Y+30, r25	; 0x1e
    2078:	8d 8f       	std	Y+29, r24	; 0x1d
    207a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    207c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <main+0x268>
    2082:	9e 8f       	std	Y+30, r25	; 0x1e
    2084:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_ms( 1000 );

	  ESP8266_VidInit();
    2086:	0e 94 12 15 	call	0x2a24	; 0x2a24 <ESP8266_VidInit>


	  //connect
	  ESP8266_VidConnectToWiFi("OPPO Reno2","11112222");
    208a:	80 e6       	ldi	r24, 0x60	; 96
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	2b e6       	ldi	r18, 0x6B	; 107
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <ESP8266_VidConnectToWiFi>


	while (1)
	{
		/*Heart Beat Sensor Part*/
		bpm=0;
    2098:	fe 01       	movw	r30, r28
    209a:	e9 5b       	subi	r30, 0xB9	; 185
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	11 82       	std	Z+1, r1	; 0x01
    20a0:	10 82       	st	Z, r1
		avg=0;
    20a2:	1c ae       	std	Y+60, r1	; 0x3c
    20a4:	1b ae       	std	Y+59, r1	; 0x3b

		char test1[3]={0,0,0};
    20a6:	ce 01       	movw	r24, r28
    20a8:	85 5b       	subi	r24, 0xB5	; 181
    20aa:	9f 4f       	sbci	r25, 0xFF	; 255
    20ac:	63 96       	adiw	r28, 0x13	; 19
    20ae:	9f af       	std	Y+63, r25	; 0x3f
    20b0:	8e af       	std	Y+62, r24	; 0x3e
    20b2:	63 97       	sbiw	r28, 0x13	; 19
    20b4:	83 e2       	ldi	r24, 0x23	; 35
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	65 96       	adiw	r28, 0x15	; 21
    20ba:	9f af       	std	Y+63, r25	; 0x3f
    20bc:	8e af       	std	Y+62, r24	; 0x3e
    20be:	65 97       	sbiw	r28, 0x15	; 21
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	66 96       	adiw	r28, 0x16	; 22
    20c4:	9f af       	std	Y+63, r25	; 0x3f
    20c6:	66 97       	sbiw	r28, 0x16	; 22
    20c8:	65 96       	adiw	r28, 0x15	; 21
    20ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    20cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    20ce:	65 97       	sbiw	r28, 0x15	; 21
    20d0:	00 80       	ld	r0, Z
    20d2:	65 96       	adiw	r28, 0x15	; 21
    20d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20d8:	65 97       	sbiw	r28, 0x15	; 21
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	65 96       	adiw	r28, 0x15	; 21
    20de:	9f af       	std	Y+63, r25	; 0x3f
    20e0:	8e af       	std	Y+62, r24	; 0x3e
    20e2:	65 97       	sbiw	r28, 0x15	; 21
    20e4:	63 96       	adiw	r28, 0x13	; 19
    20e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    20e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    20ea:	63 97       	sbiw	r28, 0x13	; 19
    20ec:	00 82       	st	Z, r0
    20ee:	63 96       	adiw	r28, 0x13	; 19
    20f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    20f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    20f4:	63 97       	sbiw	r28, 0x13	; 19
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	63 96       	adiw	r28, 0x13	; 19
    20fa:	9f af       	std	Y+63, r25	; 0x3f
    20fc:	8e af       	std	Y+62, r24	; 0x3e
    20fe:	63 97       	sbiw	r28, 0x13	; 19
    2100:	66 96       	adiw	r28, 0x16	; 22
    2102:	9f ad       	ldd	r25, Y+63	; 0x3f
    2104:	66 97       	sbiw	r28, 0x16	; 22
    2106:	91 50       	subi	r25, 0x01	; 1
    2108:	66 96       	adiw	r28, 0x16	; 22
    210a:	9f af       	std	Y+63, r25	; 0x3f
    210c:	66 97       	sbiw	r28, 0x16	; 22
    210e:	66 96       	adiw	r28, 0x16	; 22
    2110:	ef ad       	ldd	r30, Y+63	; 0x3f
    2112:	66 97       	sbiw	r28, 0x16	; 22
    2114:	ee 23       	and	r30, r30
    2116:	c1 f6       	brne	.-80     	; 0x20c8 <main+0x2b2>
		char test2[3]={0,0,0};
    2118:	ce 01       	movw	r24, r28
    211a:	82 5b       	subi	r24, 0xB2	; 178
    211c:	9f 4f       	sbci	r25, 0xFF	; 255
    211e:	68 96       	adiw	r28, 0x18	; 24
    2120:	9f af       	std	Y+63, r25	; 0x3f
    2122:	8e af       	std	Y+62, r24	; 0x3e
    2124:	68 97       	sbiw	r28, 0x18	; 24
    2126:	80 e2       	ldi	r24, 0x20	; 32
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	6a 96       	adiw	r28, 0x1a	; 26
    212c:	9f af       	std	Y+63, r25	; 0x3f
    212e:	8e af       	std	Y+62, r24	; 0x3e
    2130:	6a 97       	sbiw	r28, 0x1a	; 26
    2132:	93 e0       	ldi	r25, 0x03	; 3
    2134:	6b 96       	adiw	r28, 0x1b	; 27
    2136:	9f af       	std	Y+63, r25	; 0x3f
    2138:	6b 97       	sbiw	r28, 0x1b	; 27
    213a:	6a 96       	adiw	r28, 0x1a	; 26
    213c:	ee ad       	ldd	r30, Y+62	; 0x3e
    213e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2140:	6a 97       	sbiw	r28, 0x1a	; 26
    2142:	00 80       	ld	r0, Z
    2144:	6a 96       	adiw	r28, 0x1a	; 26
    2146:	8e ad       	ldd	r24, Y+62	; 0x3e
    2148:	9f ad       	ldd	r25, Y+63	; 0x3f
    214a:	6a 97       	sbiw	r28, 0x1a	; 26
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	6a 96       	adiw	r28, 0x1a	; 26
    2150:	9f af       	std	Y+63, r25	; 0x3f
    2152:	8e af       	std	Y+62, r24	; 0x3e
    2154:	6a 97       	sbiw	r28, 0x1a	; 26
    2156:	68 96       	adiw	r28, 0x18	; 24
    2158:	ee ad       	ldd	r30, Y+62	; 0x3e
    215a:	ff ad       	ldd	r31, Y+63	; 0x3f
    215c:	68 97       	sbiw	r28, 0x18	; 24
    215e:	00 82       	st	Z, r0
    2160:	68 96       	adiw	r28, 0x18	; 24
    2162:	8e ad       	ldd	r24, Y+62	; 0x3e
    2164:	9f ad       	ldd	r25, Y+63	; 0x3f
    2166:	68 97       	sbiw	r28, 0x18	; 24
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	68 96       	adiw	r28, 0x18	; 24
    216c:	9f af       	std	Y+63, r25	; 0x3f
    216e:	8e af       	std	Y+62, r24	; 0x3e
    2170:	68 97       	sbiw	r28, 0x18	; 24
    2172:	6b 96       	adiw	r28, 0x1b	; 27
    2174:	9f ad       	ldd	r25, Y+63	; 0x3f
    2176:	6b 97       	sbiw	r28, 0x1b	; 27
    2178:	91 50       	subi	r25, 0x01	; 1
    217a:	6b 96       	adiw	r28, 0x1b	; 27
    217c:	9f af       	std	Y+63, r25	; 0x3f
    217e:	6b 97       	sbiw	r28, 0x1b	; 27
    2180:	6b 96       	adiw	r28, 0x1b	; 27
    2182:	ef ad       	ldd	r30, Y+63	; 0x3f
    2184:	6b 97       	sbiw	r28, 0x1b	; 27
    2186:	ee 23       	and	r30, r30
    2188:	c1 f6       	brne	.-80     	; 0x213a <main+0x324>

		LCD_vidDispString((uint8 *)"Please Wait");
    218a:	84 e7       	ldi	r24, 0x74	; 116
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_vidDispString>

		for(int i=0 ; i<10000; i++)
    2192:	1a ae       	std	Y+58, r1	; 0x3a
    2194:	19 ae       	std	Y+57, r1	; 0x39
    2196:	9d c0       	rjmp	.+314    	; 0x22d2 <main+0x4bc>
		{
			HrtVal = ADC_Read(Heart_Channel);  //read from channel zero
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	0e 94 00 14 	call	0x2800	; 0x2800 <ADC_Read>
    219e:	fe 01       	movw	r30, r28
    21a0:	ef 5b       	subi	r30, 0xBF	; 191
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
			avg+=HrtVal;
    21a8:	fe 01       	movw	r30, r28
    21aa:	ef 5b       	subi	r30, 0xBF	; 191
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	2b ad       	ldd	r18, Y+59	; 0x3b
    21b0:	3c ad       	ldd	r19, Y+60	; 0x3c
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	82 0f       	add	r24, r18
    21b8:	93 1f       	adc	r25, r19
    21ba:	9c af       	std	Y+60, r25	; 0x3c
    21bc:	8b af       	std	Y+59, r24	; 0x3b
			if(HrtVal>29)
    21be:	fe 01       	movw	r30, r28
    21c0:	ef 5b       	subi	r30, 0xBF	; 191
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	91 81       	ldd	r25, Z+1	; 0x01
    21c8:	8e 31       	cpi	r24, 0x1E	; 30
    21ca:	91 05       	cpc	r25, r1
    21cc:	58 f0       	brcs	.+22     	; 0x21e4 <main+0x3ce>
			{
				bpm+=1; //peak counting , it counts every time it reaches to peak
    21ce:	de 01       	movw	r26, r28
    21d0:	a9 5b       	subi	r26, 0xB9	; 185
    21d2:	bf 4f       	sbci	r27, 0xFF	; 255
    21d4:	fe 01       	movw	r30, r28
    21d6:	e9 5b       	subi	r30, 0xB9	; 185
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	8d 93       	st	X+, r24
    21e2:	9c 93       	st	X, r25
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	a0 e8       	ldi	r26, 0x80	; 128
    21ea:	bf e3       	ldi	r27, 0x3F	; 63
    21ec:	89 8f       	std	Y+25, r24	; 0x19
    21ee:	9a 8f       	std	Y+26, r25	; 0x1a
    21f0:	ab 8f       	std	Y+27, r26	; 0x1b
    21f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f4:	69 8d       	ldd	r22, Y+25	; 0x19
    21f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a ef       	ldi	r20, 0xFA	; 250
    2202:	54 e4       	ldi	r21, 0x44	; 68
    2204:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	8d 8b       	std	Y+21, r24	; 0x15
    220e:	9e 8b       	std	Y+22, r25	; 0x16
    2210:	af 8b       	std	Y+23, r26	; 0x17
    2212:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e8       	ldi	r20, 0x80	; 128
    2222:	5f e3       	ldi	r21, 0x3F	; 63
    2224:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2228:	88 23       	and	r24, r24
    222a:	2c f4       	brge	.+10     	; 0x2236 <main+0x420>
		__ticks = 1;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	3f c0       	rjmp	.+126    	; 0x22b4 <main+0x49e>
	else if (__tmp > 65535)
    2236:	6d 89       	ldd	r22, Y+21	; 0x15
    2238:	7e 89       	ldd	r23, Y+22	; 0x16
    223a:	8f 89       	ldd	r24, Y+23	; 0x17
    223c:	98 8d       	ldd	r25, Y+24	; 0x18
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	3f ef       	ldi	r19, 0xFF	; 255
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	57 e4       	ldi	r21, 0x47	; 71
    2246:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    224a:	18 16       	cp	r1, r24
    224c:	4c f5       	brge	.+82     	; 0x22a0 <main+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	69 8d       	ldd	r22, Y+25	; 0x19
    2250:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9c 8b       	std	Y+20, r25	; 0x14
    2274:	8b 8b       	std	Y+19, r24	; 0x13
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <main+0x480>
    2278:	88 ec       	ldi	r24, 0xC8	; 200
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9a 8b       	std	Y+18, r25	; 0x12
    227e:	89 8b       	std	Y+17, r24	; 0x11
    2280:	89 89       	ldd	r24, Y+17	; 0x11
    2282:	9a 89       	ldd	r25, Y+18	; 0x12
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <main+0x46e>
    2288:	9a 8b       	std	Y+18, r25	; 0x12
    228a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	8b 89       	ldd	r24, Y+19	; 0x13
    228e:	9c 89       	ldd	r25, Y+20	; 0x14
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	9c 8b       	std	Y+20, r25	; 0x14
    2294:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	69 f7       	brne	.-38     	; 0x2278 <main+0x462>
    229e:	14 c0       	rjmp	.+40     	; 0x22c8 <main+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	8b 89       	ldd	r24, Y+19	; 0x13
    22b6:	9c 89       	ldd	r25, Y+20	; 0x14
    22b8:	98 8b       	std	Y+16, r25	; 0x10
    22ba:	8f 87       	std	Y+15, r24	; 0x0f
    22bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22be:	98 89       	ldd	r25, Y+16	; 0x10
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <main+0x4aa>
    22c4:	98 8b       	std	Y+16, r25	; 0x10
    22c6:	8f 87       	std	Y+15, r24	; 0x0f
		char test1[3]={0,0,0};
		char test2[3]={0,0,0};

		LCD_vidDispString((uint8 *)"Please Wait");

		for(int i=0 ; i<10000; i++)
    22c8:	89 ad       	ldd	r24, Y+57	; 0x39
    22ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	9a af       	std	Y+58, r25	; 0x3a
    22d0:	89 af       	std	Y+57, r24	; 0x39
    22d2:	89 ad       	ldd	r24, Y+57	; 0x39
    22d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d6:	f7 e2       	ldi	r31, 0x27	; 39
    22d8:	80 31       	cpi	r24, 0x10	; 16
    22da:	9f 07       	cpc	r25, r31
    22dc:	0c f4       	brge	.+2      	; 0x22e0 <main+0x4ca>
    22de:	5c cf       	rjmp	.-328    	; 0x2198 <main+0x382>

			_delay_ms(1);

		}

		avg/=1000;
    22e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    22e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    22e4:	28 ee       	ldi	r18, 0xE8	; 232
    22e6:	33 e0       	ldi	r19, 0x03	; 3
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    22ee:	cb 01       	movw	r24, r22
    22f0:	9c af       	std	Y+60, r25	; 0x3c
    22f2:	8b af       	std	Y+59, r24	; 0x3b
		bpm*=6;
    22f4:	de 01       	movw	r26, r28
    22f6:	a9 5b       	subi	r26, 0xB9	; 185
    22f8:	bf 4f       	sbci	r27, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	e9 5b       	subi	r30, 0xB9	; 185
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	20 81       	ld	r18, Z
    2302:	31 81       	ldd	r19, Z+1	; 0x01
    2304:	c9 01       	movw	r24, r18
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	82 0f       	add	r24, r18
    230c:	93 1f       	adc	r25, r19
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	8d 93       	st	X+, r24
    2314:	9c 93       	st	X, r25
		LCD_vidCmd(CMD_CLEAR);
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
		LCD_vidCmd(CMD_HOME);
    231c:	80 e8       	ldi	r24, 0x80	; 128
    231e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>


		/*Send bpm value */
		ESP8266_VidSendPR(bpm);
    2322:	fe 01       	movw	r30, r28
    2324:	e9 5b       	subi	r30, 0xB9	; 185
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <ESP8266_VidSendPR>



		/*Temp Sensor part */

		temp=ADC_Read(Temp_Channel)*4.88; // 4.88 is the step size 4.88mV
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	0e 94 00 14 	call	0x2800	; 0x2800 <ADC_Read>
    2334:	aa 27       	eor	r26, r26
    2336:	97 fd       	sbrc	r25, 7
    2338:	a0 95       	com	r26
    233a:	ba 2f       	mov	r27, r26
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	26 ef       	ldi	r18, 0xF6	; 246
    234e:	38 e2       	ldi	r19, 0x28	; 40
    2350:	4c e9       	ldi	r20, 0x9C	; 156
    2352:	50 e4       	ldi	r21, 0x40	; 64
    2354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	8e 01       	movw	r16, r28
    235e:	07 5b       	subi	r16, 0xB7	; 183
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	f8 01       	movw	r30, r16
    2370:	91 83       	std	Z+1, r25	; 0x01
    2372:	80 83       	st	Z, r24
		temp/=10; // LM35 return 10mv / celsius
    2374:	8e 01       	movw	r16, r28
    2376:	07 5b       	subi	r16, 0xB7	; 183
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	fe 01       	movw	r30, r28
    237c:	e7 5b       	subi	r30, 0xB7	; 183
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	2a e0       	ldi	r18, 0x0A	; 10
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	b9 01       	movw	r22, r18
    238a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    238e:	cb 01       	movw	r24, r22
    2390:	f8 01       	movw	r30, r16
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24

		/* Send Temprature value*/
		ESP8266_VidSendHB(temp);
    2396:	fe 01       	movw	r30, r28
    2398:	e7 5b       	subi	r30, 0xB7	; 183
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <ESP8266_VidSendHB>


		/*test using lcd*/

		LCD_vidDispString((uint8 *)"bpm = ");
    23a2:	80 e8       	ldi	r24, 0x80	; 128
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_vidDispString>
		itoa(ADC_Read(Heart_Channel),test1,10);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	0e 94 00 14 	call	0x2800	; 0x2800 <ADC_Read>
    23b0:	9e 01       	movw	r18, r28
    23b2:	25 5b       	subi	r18, 0xB5	; 181
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	b9 01       	movw	r22, r18
    23b8:	4a e0       	ldi	r20, 0x0A	; 10
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <itoa>
		LCD_vidDispString((uint8*)test1);
    23c0:	ce 01       	movw	r24, r28
    23c2:	85 5b       	subi	r24, 0xB5	; 181
    23c4:	9f 4f       	sbci	r25, 0xFF	; 255
    23c6:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_vidDispString>

		LCD_vidCmd(0xC0);
    23ca:	80 ec       	ldi	r24, 0xC0	; 192
    23cc:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>

		LCD_vidDispString((uint8 *)"avg =");
    23d0:	87 e8       	ldi	r24, 0x87	; 135
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_vidDispString>
		itoa(avg,test2,10);
    23d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    23da:	9c ad       	ldd	r25, Y+60	; 0x3c
    23dc:	9e 01       	movw	r18, r28
    23de:	22 5b       	subi	r18, 0xB2	; 178
    23e0:	3f 4f       	sbci	r19, 0xFF	; 255
    23e2:	b9 01       	movw	r22, r18
    23e4:	4a e0       	ldi	r20, 0x0A	; 10
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <itoa>
		LCD_vidDispString((uint8*)test2);
    23ec:	ce 01       	movw	r24, r28
    23ee:	82 5b       	subi	r24, 0xB2	; 178
    23f0:	9f 4f       	sbci	r25, 0xFF	; 255
    23f2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_vidDispString>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	aa e7       	ldi	r26, 0x7A	; 122
    23fc:	b4 e4       	ldi	r27, 0x44	; 68
    23fe:	8b 87       	std	Y+11, r24	; 0x0b
    2400:	9c 87       	std	Y+12, r25	; 0x0c
    2402:	ad 87       	std	Y+13, r26	; 0x0d
    2404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a ef       	ldi	r20, 0xFA	; 250
    2414:	54 e4       	ldi	r21, 0x44	; 68
    2416:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8f 83       	std	Y+7, r24	; 0x07
    2420:	98 87       	std	Y+8, r25	; 0x08
    2422:	a9 87       	std	Y+9, r26	; 0x09
    2424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <main+0x632>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <main+0x6b0>
	else if (__tmp > 65535)
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <main+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	6b 85       	ldd	r22, Y+11	; 0x0b
    2462:	7c 85       	ldd	r23, Y+12	; 0x0c
    2464:	8d 85       	ldd	r24, Y+13	; 0x0d
    2466:	9e 85       	ldd	r25, Y+14	; 0x0e
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <main+0x692>
    248a:	88 ec       	ldi	r24, 0xC8	; 200
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <main+0x680>
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <main+0x674>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <main+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <main+0x6bc>
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);
		LCD_vidCmd(CMD_CLEAR);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
		LCD_vidCmd(CMD_HOME);
    24e0:	80 e8       	ldi	r24, 0x80	; 128
    24e2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_vidCmd>
    24e6:	d8 cd       	rjmp	.-1104   	; 0x2098 <main+0x282>

000024e8 <USART_inti>:
#include "USART_interface.h"
#include "USART_config.h"
#include "USART_priv.h"

void USART_inti() //initialization of USART com. protocol
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	uint8 UCSRC_val=0;
    24f2:	19 82       	std	Y+1, r1	; 0x01
		CLEAR_BIT(UCSRB,UCSZ2);
		SET_BIT(UCSRC_val,UCSZ1);
		CLEAR_BIT(UCSRC_val,UCSZ0);
		CLEAR_BIT(UCSRC_val,URSEL);
	#elif (DATA_BITS == 8)
		CLEAR_BIT(UCSRB,UCSZ2);
    24f4:	aa e2       	ldi	r26, 0x2A	; 42
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	ea e2       	ldi	r30, 0x2A	; 42
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8b 7f       	andi	r24, 0xFB	; 251
    2500:	8c 93       	st	X, r24
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	86 68       	ori	r24, 0x86	; 134
    2506:	89 83       	std	Y+1, r24	; 0x01
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	#endif

	//choosing stop bits
	#if (STOP_BITS == 1)
		CLEAR_BIT(UCSRC_val,USBS);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	87 7f       	andi	r24, 0xF7	; 247
    250c:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,USBS);
	#endif

	//choosing parity bit
	#if(PARITY_BITS == DISABLED)
		CLEAR_BIT(UCSRC_val,UPM1);
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	8f 7d       	andi	r24, 0xDF	; 223
    2512:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,UPM0);
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	8f 7e       	andi	r24, 0xEF	; 239
    2518:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//choosing asynchronous or synchronous
	#if SYNC_MODE
		SET_BIT(UCSRC_val,UMSEL);
	#else
		CLEAR_BIT(UCSRC_val,UMSEL);
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	8f 7b       	andi	r24, 0xBF	; 191
    251e:	89 83       	std	Y+1, r24	; 0x01

	//choosing interrupts
	#if (RX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,RXCIE);
	#else
		CLEAR_BIT(UCSRB,RXCIE);
    2520:	aa e2       	ldi	r26, 0x2A	; 42
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	ea e2       	ldi	r30, 0x2A	; 42
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8f 77       	andi	r24, 0x7F	; 127
    252c:	8c 93       	st	X, r24
	#endif

	#if(TX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,TXCIE);
	#else
		CLEAR_BIT(UCSRB,TXCIE);
    252e:	aa e2       	ldi	r26, 0x2A	; 42
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ea e2       	ldi	r30, 0x2A	; 42
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8f 7b       	andi	r24, 0xBF	; 191
    253a:	8c 93       	st	X, r24
	#endif

	#if(UDR_EMPTY_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,UDRIE);
	#else
		CLEAR_BIT(UCSRB,UDRIE);
    253c:	aa e2       	ldi	r26, 0x2A	; 42
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ea e2       	ldi	r30, 0x2A	; 42
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	8f 7d       	andi	r24, 0xDF	; 223
    2548:	8c 93       	st	X, r24
	#endif

	//enabling Tx and Rx
	#if(RX_ENABLE)
		SET_BIT(UCSRB,RXEN);
    254a:	aa e2       	ldi	r26, 0x2A	; 42
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ea e2       	ldi	r30, 0x2A	; 42
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	80 61       	ori	r24, 0x10	; 16
    2556:	8c 93       	st	X, r24
	#else
		CLEAR_BIT(UCSRB,RXEN);
	#endif

	#if(TX_ENABLE)
		SET_BIT(UCSRB,TXEN);
    2558:	aa e2       	ldi	r26, 0x2A	; 42
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ea e2       	ldi	r30, 0x2A	; 42
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	88 60       	ori	r24, 0x08	; 8
    2564:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,TXEN);
	#endif

	//choosing baud rate

	UBRRL=((Fosc/16/BAUD_RATE)-1);
    2566:	e9 e2       	ldi	r30, 0x29	; 41
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	83 e3       	ldi	r24, 0x33	; 51
    256c:	80 83       	st	Z, r24
	UBRRH=(((Fosc/16/BAUD_RATE)-1)>>8);
    256e:	e0 e4       	ldi	r30, 0x40	; 64
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	10 82       	st	Z, r1

	//assigning UCSRC value into UCSRC register
	UCSRC=UCSRC_val;
    2574:	e0 e4       	ldi	r30, 0x40	; 64
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	80 83       	st	Z, r24
}
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <USART_ReceiveDataPolling>:


uint8 USART_ReceiveDataPolling() // receive data polling on RXC flag
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	//waiting for data to be sent and UDR Rx buffer to be filled
	while((GET_BIT(UCSRA,RXC))==0);
    258c:	eb e2       	ldi	r30, 0x2B	; 43
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	88 23       	and	r24, r24
    2594:	dc f7       	brge	.-10     	; 0x258c <USART_ReceiveDataPolling+0x8>

	//returning data
	return UDR;
    2596:	ec e2       	ldi	r30, 0x2C	; 44
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
}
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <USART_ReceiveDataINT>:

uint8 USART_ReceiveDataINT() // receive data with RXC interrupt, WARNING ENABLE RXC INT
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
	//returning data
	return UDR;
    25aa:	ec e2       	ldi	r30, 0x2C	; 44
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <USART_SendDataPolling>:


void USART_SendDataPolling(uint8 data) // send data polling on UDRE flag
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	89 83       	std	Y+1, r24	; 0x01
	//waiting to UDR Tx buffer to be empty
	while((GET_BIT(UCSRA,UDRE))==0);
    25c2:	eb e2       	ldi	r30, 0x2B	; 43
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	82 95       	swap	r24
    25ca:	86 95       	lsr	r24
    25cc:	87 70       	andi	r24, 0x07	; 7
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	81 70       	andi	r24, 0x01	; 1
    25d4:	90 70       	andi	r25, 0x00	; 0
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	a1 f3       	breq	.-24     	; 0x25c2 <USART_SendDataPolling+0xc>

	//sending data
	UDR=data;
    25da:	ec e2       	ldi	r30, 0x2C	; 44
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	80 83       	st	Z, r24
}
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <USART_ReceieveStr>:

void USART_ReceieveStr(uint8* str_data, uint8 number) // receive number of elements
{
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <USART_ReceieveStr+0xa>
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <USART_ReceieveStr+0xc>
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	9b 83       	std	Y+3, r25	; 0x03
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	6c 83       	std	Y+4, r22	; 0x04
	uint8 counter;
	for(counter=0;counter<number;counter++)
    2600:	19 82       	std	Y+1, r1	; 0x01
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <USART_ReceieveStr+0x38>
	{
		str_data[counter]=USART_ReceiveDataPolling();
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	8c 01       	movw	r16, r24
    2610:	02 0f       	add	r16, r18
    2612:	13 1f       	adc	r17, r19
    2614:	0e 94 c2 12 	call	0x2584	; 0x2584 <USART_ReceiveDataPolling>
    2618:	f8 01       	movw	r30, r16
    261a:	80 83       	st	Z, r24
}

void USART_ReceieveStr(uint8* str_data, uint8 number) // receive number of elements
{
	uint8 counter;
	for(counter=0;counter<number;counter++)
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	99 81       	ldd	r25, Y+1	; 0x01
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	98 17       	cp	r25, r24
    2628:	68 f3       	brcs	.-38     	; 0x2604 <USART_ReceieveStr+0x1a>
	{
		str_data[counter]=USART_ReceiveDataPolling();
	}
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	08 95       	ret

0000263c <USART_SendDataINT>:

void USART_SendDataINT(uint8 data) // send data with UDRE interrupt, WARNING ENABLE UDRE INT
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	0f 92       	push	r0
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	89 83       	std	Y+1, r24	; 0x01
	//sending data
	UDR=data;
    2648:	ec e2       	ldi	r30, 0x2C	; 44
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	80 83       	st	Z, r24
}
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <USART_SendStr>:

void USART_SendStr(uint8* str_data)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <USART_SendStr+0x6>
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9b 83       	std	Y+3, r25	; 0x03
    2666:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	0e c0       	rjmp	.+28     	; 0x2688 <USART_SendStr+0x30>
	while(str_data[counter]!='\0')
	{
		USART_SendDataPolling(str_data[counter]);
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	fc 01       	movw	r30, r24
    2678:	e2 0f       	add	r30, r18
    267a:	f3 1f       	adc	r31, r19
    267c:	80 81       	ld	r24, Z
    267e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART_SendDataPolling>
		counter++;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	8f 5f       	subi	r24, 0xFF	; 255
    2686:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendStr(uint8* str_data)
{
	uint8 counter=0;
	while(str_data[counter]!='\0')
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	39 f7       	brne	.-50     	; 0x266c <USART_SendStr+0x14>
	{
		USART_SendDataPolling(str_data[counter]);
		counter++;
	}
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <USART_SendInteger>:

void USART_SendInteger(volatile uint16 Copy_u16Number) //this function to print direct integer number
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <USART_SendInteger+0x6>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <USART_SendInteger+0x8>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <USART_SendInteger+0xa>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8 Local_u8arrStrNumber[3]={0};
    26bc:	ce 01       	movw	r24, r28
    26be:	02 96       	adiw	r24, 0x02	; 2
    26c0:	23 e0       	ldi	r18, 0x03	; 3
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <memset>
	s8 Local_u8Counter=2;
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	1f c0       	rjmp	.+62     	; 0x2712 <USART_SendInteger+0x68>
	while(Local_u8Counter>=0)
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	e8 2f       	mov	r30, r24
    26d8:	ff 27       	eor	r31, r31
    26da:	e7 fd       	sbrc	r30, 7
    26dc:	f0 95       	com	r31
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	2a e0       	ldi	r18, 0x0A	; 10
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    26ec:	28 2f       	mov	r18, r24
    26ee:	ce 01       	movw	r24, r28
    26f0:	02 96       	adiw	r24, 0x02	; 2
    26f2:	e8 0f       	add	r30, r24
    26f4:	f9 1f       	adc	r31, r25
    26f6:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	2a e0       	ldi	r18, 0x0A	; 10
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	b9 01       	movw	r22, r18
    2702:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    2706:	cb 01       	movw	r24, r22
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
		Local_u8Counter--;
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	81 50       	subi	r24, 0x01	; 1
    2710:	89 83       	std	Y+1, r24	; 0x01

void USART_SendInteger(volatile uint16 Copy_u16Number) //this function to print direct integer number
{
	volatile uint8 Local_u8arrStrNumber[3]={0};
	s8 Local_u8Counter=2;
	while(Local_u8Counter>=0)
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	88 23       	and	r24, r24
    2716:	f4 f6       	brge	.-68     	; 0x26d4 <USART_SendInteger+0x2a>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2718:	19 82       	std	Y+1, r1	; 0x01
    271a:	11 c0       	rjmp	.+34     	; 0x273e <USART_SendInteger+0x94>
	{
		USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	28 2f       	mov	r18, r24
    2720:	33 27       	eor	r19, r19
    2722:	27 fd       	sbrc	r18, 7
    2724:	30 95       	com	r19
    2726:	ce 01       	movw	r24, r28
    2728:	02 96       	adiw	r24, 0x02	; 2
    272a:	fc 01       	movw	r30, r24
    272c:	e2 0f       	add	r30, r18
    272e:	f3 1f       	adc	r31, r19
    2730:	80 81       	ld	r24, Z
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART_SendDataPolling>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	83 30       	cpi	r24, 0x03	; 3
    2742:	64 f3       	brlt	.-40     	; 0x271c <USART_SendInteger+0x72>
	{
		USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
	}
}
    2744:	26 96       	adiw	r28, 0x06	; 6
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <USART_EnableRx>:

void USART_EnableRx() // enable rx during runtime
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    275e:	aa e2       	ldi	r26, 0x2A	; 42
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ea e2       	ldi	r30, 0x2A	; 42
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	80 61       	ori	r24, 0x10	; 16
    276a:	8c 93       	st	X, r24

}
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <USART_DisableRx>:

void USART_DisableRx() // disable rx during runtime
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXEN);
    277a:	aa e2       	ldi	r26, 0x2A	; 42
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	ea e2       	ldi	r30, 0x2A	; 42
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	8f 7e       	andi	r24, 0xEF	; 239
    2786:	8c 93       	st	X, r24

}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <USART_EnableTx>:

void USART_EnableTx() // enable tx during runtime
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXEN);
    2796:	aa e2       	ldi	r26, 0x2A	; 42
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	ea e2       	ldi	r30, 0x2A	; 42
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	88 60       	ori	r24, 0x08	; 8
    27a2:	8c 93       	st	X, r24

}
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <USART_DisableTx>:

void USART_DisableTx() // disable tx during runtime
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXEN);
    27b2:	aa e2       	ldi	r26, 0x2A	; 42
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ea e2       	ldi	r30, 0x2A	; 42
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	87 7f       	andi	r24, 0xF7	; 247
    27be:	8c 93       	st	X, r24

}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <ADC_Init>:
#include <util/delay.h>
#include "sensors.h"


void ADC_Init()
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	ClrBit(DDRA,Temp_Channel);  // make ADC channel pin input for heat
    27ce:	aa e3       	ldi	r26, 0x3A	; 58
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ea e3       	ldi	r30, 0x3A	; 58
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	8d 7f       	andi	r24, 0xFD	; 253
    27da:	8c 93       	st	X, r24
	ClrBit(DDRA,Heart_Channel);  // make ADC channel pin input for heart
    27dc:	aa e3       	ldi	r26, 0x3A	; 58
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	ea e3       	ldi	r30, 0x3A	; 58
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	8e 7f       	andi	r24, 0xFE	; 254
    27e8:	8c 93       	st	X, r24
	ADCSRA=0x87;  // enable ADC with frequency 8M/128
    27ea:	e6 e2       	ldi	r30, 0x26	; 38
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	87 e8       	ldi	r24, 0x87	; 135
    27f0:	80 83       	st	Z, r24
	ADMUX=0x40; //set reference VCC
    27f2:	e7 e2       	ldi	r30, 0x27	; 39
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 e4       	ldi	r24, 0x40	; 64
    27f8:	80 83       	st	Z, r24
}
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <ADC_Read>:

int ADC_Read(char channel){
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	6d 97       	sbiw	r28, 0x1d	; 29
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
	int Ain,AinLow;

	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
    2816:	a7 e2       	ldi	r26, 0x27	; 39
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e7 e2       	ldi	r30, 0x27	; 39
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	98 2f       	mov	r25, r24
    2822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2824:	8f 70       	andi	r24, 0x0F	; 15
    2826:	89 2b       	or	r24, r25
    2828:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADSC);		/* Start conversion */
    282a:	a6 e2       	ldi	r26, 0x26	; 38
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e6 e2       	ldi	r30, 0x26	; 38
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 64       	ori	r24, 0x40	; 64
    2836:	8c 93       	st	X, r24
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
    2838:	e6 e2       	ldi	r30, 0x26	; 38
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	80 71       	andi	r24, 0x10	; 16
    2844:	90 70       	andi	r25, 0x00	; 0
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	b9 f3       	breq	.-18     	; 0x2838 <ADC_Read+0x38>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 e2       	ldi	r26, 0x20	; 32
    2850:	b1 e4       	ldi	r27, 0x41	; 65
    2852:	8d 8b       	std	Y+21, r24	; 0x15
    2854:	9e 8b       	std	Y+22, r25	; 0x16
    2856:	af 8b       	std	Y+23, r26	; 0x17
    2858:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    285a:	6d 89       	ldd	r22, Y+21	; 0x15
    285c:	7e 89       	ldd	r23, Y+22	; 0x16
    285e:	8f 89       	ldd	r24, Y+23	; 0x17
    2860:	98 8d       	ldd	r25, Y+24	; 0x18
    2862:	2b ea       	ldi	r18, 0xAB	; 171
    2864:	3a ea       	ldi	r19, 0xAA	; 170
    2866:	4a e2       	ldi	r20, 0x2A	; 42
    2868:	50 e4       	ldi	r21, 0x40	; 64
    286a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	89 8b       	std	Y+17, r24	; 0x11
    2874:	9a 8b       	std	Y+18, r25	; 0x12
    2876:	ab 8b       	std	Y+19, r26	; 0x13
    2878:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    287a:	69 89       	ldd	r22, Y+17	; 0x11
    287c:	7a 89       	ldd	r23, Y+18	; 0x12
    287e:	8b 89       	ldd	r24, Y+19	; 0x13
    2880:	9c 89       	ldd	r25, Y+20	; 0x14
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	1c f4       	brge	.+6      	; 0x2898 <ADC_Read+0x98>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	88 8b       	std	Y+16, r24	; 0x10
    2896:	91 c0       	rjmp	.+290    	; 0x29ba <ADC_Read+0x1ba>
	else if (__tmp > 255)
    2898:	69 89       	ldd	r22, Y+17	; 0x11
    289a:	7a 89       	ldd	r23, Y+18	; 0x12
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	9c 89       	ldd	r25, Y+20	; 0x14
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	53 e4       	ldi	r21, 0x43	; 67
    28a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	0c f0       	brlt	.+2      	; 0x28b2 <ADC_Read+0xb2>
    28b0:	7b c0       	rjmp	.+246    	; 0x29a8 <ADC_Read+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    28b2:	6d 89       	ldd	r22, Y+21	; 0x15
    28b4:	7e 89       	ldd	r23, Y+22	; 0x16
    28b6:	8f 89       	ldd	r24, Y+23	; 0x17
    28b8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	4a e7       	ldi	r20, 0x7A	; 122
    28c0:	54 e4       	ldi	r21, 0x44	; 68
    28c2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8c 87       	std	Y+12, r24	; 0x0c
    28cc:	9d 87       	std	Y+13, r25	; 0x0d
    28ce:	ae 87       	std	Y+14, r26	; 0x0e
    28d0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    28d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    28d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    28d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	4a ef       	ldi	r20, 0xFA	; 250
    28e0:	54 e4       	ldi	r21, 0x44	; 68
    28e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	88 87       	std	Y+8, r24	; 0x08
    28ec:	99 87       	std	Y+9, r25	; 0x09
    28ee:	aa 87       	std	Y+10, r26	; 0x0a
    28f0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28f2:	68 85       	ldd	r22, Y+8	; 0x08
    28f4:	79 85       	ldd	r23, Y+9	; 0x09
    28f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	5f e3       	ldi	r21, 0x3F	; 63
    2902:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2906:	88 23       	and	r24, r24
    2908:	2c f4       	brge	.+10     	; 0x2914 <ADC_Read+0x114>
		__ticks = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9f 83       	std	Y+7, r25	; 0x07
    2910:	8e 83       	std	Y+6, r24	; 0x06
    2912:	3f c0       	rjmp	.+126    	; 0x2992 <ADC_Read+0x192>
	else if (__tmp > 65535)
    2914:	68 85       	ldd	r22, Y+8	; 0x08
    2916:	79 85       	ldd	r23, Y+9	; 0x09
    2918:	8a 85       	ldd	r24, Y+10	; 0x0a
    291a:	9b 85       	ldd	r25, Y+11	; 0x0b
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	3f ef       	ldi	r19, 0xFF	; 255
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	57 e4       	ldi	r21, 0x47	; 71
    2924:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	4c f5       	brge	.+82     	; 0x297e <ADC_Read+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292c:	6c 85       	ldd	r22, Y+12	; 0x0c
    292e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2930:	8e 85       	ldd	r24, Y+14	; 0x0e
    2932:	9f 85       	ldd	r25, Y+15	; 0x0f
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e2       	ldi	r20, 0x20	; 32
    293a:	51 e4       	ldi	r21, 0x41	; 65
    293c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9f 83       	std	Y+7, r25	; 0x07
    2952:	8e 83       	std	Y+6, r24	; 0x06
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <ADC_Read+0x174>
    2956:	88 ec       	ldi	r24, 0xC8	; 200
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9d 83       	std	Y+5, r25	; 0x05
    295c:	8c 83       	std	Y+4, r24	; 0x04
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	9d 81       	ldd	r25, Y+5	; 0x05
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <ADC_Read+0x162>
    2966:	9d 83       	std	Y+5, r25	; 0x05
    2968:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296a:	8e 81       	ldd	r24, Y+6	; 0x06
    296c:	9f 81       	ldd	r25, Y+7	; 0x07
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	9f 83       	std	Y+7, r25	; 0x07
    2972:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2974:	8e 81       	ldd	r24, Y+6	; 0x06
    2976:	9f 81       	ldd	r25, Y+7	; 0x07
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	69 f7       	brne	.-38     	; 0x2956 <ADC_Read+0x156>
    297c:	24 c0       	rjmp	.+72     	; 0x29c6 <ADC_Read+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297e:	68 85       	ldd	r22, Y+8	; 0x08
    2980:	79 85       	ldd	r23, Y+9	; 0x09
    2982:	8a 85       	ldd	r24, Y+10	; 0x0a
    2984:	9b 85       	ldd	r25, Y+11	; 0x0b
    2986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	9f 83       	std	Y+7, r25	; 0x07
    2990:	8e 83       	std	Y+6, r24	; 0x06
    2992:	8e 81       	ldd	r24, Y+6	; 0x06
    2994:	9f 81       	ldd	r25, Y+7	; 0x07
    2996:	9b 83       	std	Y+3, r25	; 0x03
    2998:	8a 83       	std	Y+2, r24	; 0x02
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	9b 81       	ldd	r25, Y+3	; 0x03
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <ADC_Read+0x19e>
    29a2:	9b 83       	std	Y+3, r25	; 0x03
    29a4:	8a 83       	std	Y+2, r24	; 0x02
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <ADC_Read+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29a8:	69 89       	ldd	r22, Y+17	; 0x11
    29aa:	7a 89       	ldd	r23, Y+18	; 0x12
    29ac:	8b 89       	ldd	r24, Y+19	; 0x13
    29ae:	9c 89       	ldd	r25, Y+20	; 0x14
    29b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	88 8b       	std	Y+16, r24	; 0x10
    29ba:	88 89       	ldd	r24, Y+16	; 0x10
    29bc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	8a 95       	dec	r24
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <ADC_Read+0x1c0>
    29c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
    29c6:	e4 e2       	ldi	r30, 0x24	; 36
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	88 2f       	mov	r24, r24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9a 8f       	std	Y+26, r25	; 0x1a
    29d2:	89 8f       	std	Y+25, r24	; 0x19
	ADCH&=(3);
    29d4:	a5 e2       	ldi	r26, 0x25	; 37
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e5 e2       	ldi	r30, 0x25	; 37
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	83 70       	andi	r24, 0x03	; 3
    29e0:	8c 93       	st	X, r24
	Ain = (int)(4<<ADCH);		/* Read higher 2 bits and Multiply with weight */
    29e2:	e5 e2       	ldi	r30, 0x25	; 37
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	84 e0       	ldi	r24, 0x04	; 4
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <ADC_Read+0x1f6>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	2a 95       	dec	r18
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <ADC_Read+0x1f2>
    29fa:	9c 8f       	std	Y+28, r25	; 0x1c
    29fc:	8b 8f       	std	Y+27, r24	; 0x1b
	Ain = Ain + AinLow;
    29fe:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2a00:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2a02:	89 8d       	ldd	r24, Y+25	; 0x19
    2a04:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a06:	82 0f       	add	r24, r18
    2a08:	93 1f       	adc	r25, r19
    2a0a:	9c 8f       	std	Y+28, r25	; 0x1c
    2a0c:	8b 8f       	std	Y+27, r24	; 0x1b
	return(Ain);			/* Return digital value*/
    2a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
    2a12:	6d 96       	adiw	r28, 0x1d	; 29
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <ESP8266_VidInit>:
#include"USART_interface.h"
#include<util/delay.h>
#include "wifi.h"

void ESP8266_VidInit()
{
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	c6 54       	subi	r28, 0x46	; 70
    2a32:	d0 40       	sbci	r29, 0x00	; 0
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
	//disable echo
	USART_SendStr( (uint8 *)"ATE0\r\n" );
    2a3e:	8d e8       	ldi	r24, 0x8D	; 141
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    2a46:	fe 01       	movw	r30, r28
    2a48:	ed 5b       	subi	r30, 0xBD	; 189
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	aa e7       	ldi	r26, 0x7A	; 122
    2a52:	b4 e4       	ldi	r27, 0x44	; 68
    2a54:	80 83       	st	Z, r24
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	a2 83       	std	Z+2, r26	; 0x02
    2a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	01 5c       	subi	r16, 0xC1	; 193
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	ed 5b       	subi	r30, 0xBD	; 189
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a ef       	ldi	r20, 0xFA	; 250
    2a76:	54 e4       	ldi	r21, 0x44	; 68
    2a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	f8 01       	movw	r30, r16
    2a82:	80 83       	st	Z, r24
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	a2 83       	std	Z+2, r26	; 0x02
    2a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	ff 96       	adiw	r30, 0x3f	; 63
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <ESP8266_VidInit+0x8c>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9e af       	std	Y+62, r25	; 0x3e
    2aac:	8d af       	std	Y+61, r24	; 0x3d
    2aae:	46 c0       	rjmp	.+140    	; 0x2b3c <ESP8266_VidInit+0x118>
	else if (__tmp > 65535)
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ff 96       	adiw	r30, 0x3f	; 63
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	64 f5       	brge	.+88     	; 0x2b24 <ESP8266_VidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 5b       	subi	r30, 0xBD	; 189
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	82 81       	ldd	r24, Z+2	; 0x02
    2ad8:	93 81       	ldd	r25, Z+3	; 0x03
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9e af       	std	Y+62, r25	; 0x3e
    2af8:	8d af       	std	Y+61, r24	; 0x3d
    2afa:	0f c0       	rjmp	.+30     	; 0x2b1a <ESP8266_VidInit+0xf6>
    2afc:	88 ec       	ldi	r24, 0xC8	; 200
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9c af       	std	Y+60, r25	; 0x3c
    2b02:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b04:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b06:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <ESP8266_VidInit+0xe4>
    2b0c:	9c af       	std	Y+60, r25	; 0x3c
    2b0e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	9e af       	std	Y+62, r25	; 0x3e
    2b18:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	69 f7       	brne	.-38     	; 0x2afc <ESP8266_VidInit+0xd8>
    2b22:	16 c0       	rjmp	.+44     	; 0x2b50 <ESP8266_VidInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b24:	fe 01       	movw	r30, r28
    2b26:	ff 96       	adiw	r30, 0x3f	; 63
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9e af       	std	Y+62, r25	; 0x3e
    2b3a:	8d af       	std	Y+61, r24	; 0x3d
    2b3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b40:	9a af       	std	Y+58, r25	; 0x3a
    2b42:	89 af       	std	Y+57, r24	; 0x39
    2b44:	89 ad       	ldd	r24, Y+57	; 0x39
    2b46:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <ESP8266_VidInit+0x124>
    2b4c:	9a af       	std	Y+58, r25	; 0x3a
    2b4e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms( 1000 );

	/* Sending AT Command To Check ESP8266 Is Working Or Not  */
	USART_SendStr( (uint8 *)"AT\r\n" );
    2b50:	84 e9       	ldi	r24, 0x94	; 148
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	aa e7       	ldi	r26, 0x7A	; 122
    2b5e:	b4 e4       	ldi	r27, 0x44	; 68
    2b60:	8d ab       	std	Y+53, r24	; 0x35
    2b62:	9e ab       	std	Y+54, r25	; 0x36
    2b64:	af ab       	std	Y+55, r26	; 0x37
    2b66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6d a9       	ldd	r22, Y+53	; 0x35
    2b6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a ef       	ldi	r20, 0xFA	; 250
    2b76:	54 e4       	ldi	r21, 0x44	; 68
    2b78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	89 ab       	std	Y+49, r24	; 0x31
    2b82:	9a ab       	std	Y+50, r25	; 0x32
    2b84:	ab ab       	std	Y+51, r26	; 0x33
    2b86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b88:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <ESP8266_VidInit+0x186>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	98 ab       	std	Y+48, r25	; 0x30
    2ba6:	8f a7       	std	Y+47, r24	; 0x2f
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <ESP8266_VidInit+0x204>
	else if (__tmp > 65535)
    2baa:	69 a9       	ldd	r22, Y+49	; 0x31
    2bac:	7a a9       	ldd	r23, Y+50	; 0x32
    2bae:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <ESP8266_VidInit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	98 ab       	std	Y+48, r25	; 0x30
    2be8:	8f a7       	std	Y+47, r24	; 0x2f
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <ESP8266_VidInit+0x1e6>
    2bec:	88 ec       	ldi	r24, 0xC8	; 200
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9e a7       	std	Y+46, r25	; 0x2e
    2bf2:	8d a7       	std	Y+45, r24	; 0x2d
    2bf4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <ESP8266_VidInit+0x1d4>
    2bfc:	9e a7       	std	Y+46, r25	; 0x2e
    2bfe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c02:	98 a9       	ldd	r25, Y+48	; 0x30
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	98 ab       	std	Y+48, r25	; 0x30
    2c08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <ESP8266_VidInit+0x1c8>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <ESP8266_VidInit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	69 a9       	ldd	r22, Y+49	; 0x31
    2c16:	7a a9       	ldd	r23, Y+50	; 0x32
    2c18:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	98 ab       	std	Y+48, r25	; 0x30
    2c26:	8f a7       	std	Y+47, r24	; 0x2f
    2c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2c:	9c a7       	std	Y+44, r25	; 0x2c
    2c2e:	8b a7       	std	Y+43, r24	; 0x2b
    2c30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <ESP8266_VidInit+0x210>
    2c38:	9c a7       	std	Y+44, r25	; 0x2c
    2c3a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms( 1000 );

	USART_SendStr( (uint8 *)"AT+CWMODE=1\r\n" );
    2c3c:	89 e9       	ldi	r24, 0x99	; 153
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	aa e7       	ldi	r26, 0x7A	; 122
    2c4a:	b4 e4       	ldi	r27, 0x44	; 68
    2c4c:	8f a3       	std	Y+39, r24	; 0x27
    2c4e:	98 a7       	std	Y+40, r25	; 0x28
    2c50:	a9 a7       	std	Y+41, r26	; 0x29
    2c52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6f a1       	ldd	r22, Y+39	; 0x27
    2c56:	78 a5       	ldd	r23, Y+40	; 0x28
    2c58:	89 a5       	ldd	r24, Y+41	; 0x29
    2c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a ef       	ldi	r20, 0xFA	; 250
    2c62:	54 e4       	ldi	r21, 0x44	; 68
    2c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8b a3       	std	Y+35, r24	; 0x23
    2c6e:	9c a3       	std	Y+36, r25	; 0x24
    2c70:	ad a3       	std	Y+37, r26	; 0x25
    2c72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c74:	6b a1       	ldd	r22, Y+35	; 0x23
    2c76:	7c a1       	ldd	r23, Y+36	; 0x24
    2c78:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <ESP8266_VidInit+0x272>
		__ticks = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9a a3       	std	Y+34, r25	; 0x22
    2c92:	89 a3       	std	Y+33, r24	; 0x21
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <ESP8266_VidInit+0x2f0>
	else if (__tmp > 65535)
    2c96:	6b a1       	ldd	r22, Y+35	; 0x23
    2c98:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	4c f5       	brge	.+82     	; 0x2d00 <ESP8266_VidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	6f a1       	ldd	r22, Y+39	; 0x27
    2cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9a a3       	std	Y+34, r25	; 0x22
    2cd4:	89 a3       	std	Y+33, r24	; 0x21
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <ESP8266_VidInit+0x2d2>
    2cd8:	88 ec       	ldi	r24, 0xC8	; 200
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	98 a3       	std	Y+32, r25	; 0x20
    2cde:	8f 8f       	std	Y+31, r24	; 0x1f
    2ce0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ce2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <ESP8266_VidInit+0x2c0>
    2ce8:	98 a3       	std	Y+32, r25	; 0x20
    2cea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	89 a1       	ldd	r24, Y+33	; 0x21
    2cee:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9a a3       	std	Y+34, r25	; 0x22
    2cf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <ESP8266_VidInit+0x2b4>
    2cfe:	14 c0       	rjmp	.+40     	; 0x2d28 <ESP8266_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	6b a1       	ldd	r22, Y+35	; 0x23
    2d02:	7c a1       	ldd	r23, Y+36	; 0x24
    2d04:	8d a1       	ldd	r24, Y+37	; 0x25
    2d06:	9e a1       	ldd	r25, Y+38	; 0x26
    2d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9a a3       	std	Y+34, r25	; 0x22
    2d12:	89 a3       	std	Y+33, r24	; 0x21
    2d14:	89 a1       	ldd	r24, Y+33	; 0x21
    2d16:	9a a1       	ldd	r25, Y+34	; 0x22
    2d18:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <ESP8266_VidInit+0x2fc>
    2d24:	9e 8f       	std	Y+30, r25	; 0x1e
    2d26:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms( 1000 );

	USART_SendStr( (uint8 *) "AT+CIPMODE=0\r\n" );
    2d28:	87 ea       	ldi	r24, 0xA7	; 167
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	aa e7       	ldi	r26, 0x7A	; 122
    2d36:	b4 e4       	ldi	r27, 0x44	; 68
    2d38:	89 8f       	std	Y+25, r24	; 0x19
    2d3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	69 8d       	ldd	r22, Y+25	; 0x19
    2d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a ef       	ldi	r20, 0xFA	; 250
    2d4e:	54 e4       	ldi	r21, 0x44	; 68
    2d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8d 8b       	std	Y+21, r24	; 0x15
    2d5a:	9e 8b       	std	Y+22, r25	; 0x16
    2d5c:	af 8b       	std	Y+23, r26	; 0x17
    2d5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d60:	6d 89       	ldd	r22, Y+21	; 0x15
    2d62:	7e 89       	ldd	r23, Y+22	; 0x16
    2d64:	8f 89       	ldd	r24, Y+23	; 0x17
    2d66:	98 8d       	ldd	r25, Y+24	; 0x18
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <ESP8266_VidInit+0x35e>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9c 8b       	std	Y+20, r25	; 0x14
    2d7e:	8b 8b       	std	Y+19, r24	; 0x13
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <ESP8266_VidInit+0x3dc>
	else if (__tmp > 65535)
    2d82:	6d 89       	ldd	r22, Y+21	; 0x15
    2d84:	7e 89       	ldd	r23, Y+22	; 0x16
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <ESP8266_VidInit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9c 8b       	std	Y+20, r25	; 0x14
    2dc0:	8b 8b       	std	Y+19, r24	; 0x13
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <ESP8266_VidInit+0x3be>
    2dc4:	88 ec       	ldi	r24, 0xC8	; 200
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	9a 8b       	std	Y+18, r25	; 0x12
    2dca:	89 8b       	std	Y+17, r24	; 0x11
    2dcc:	89 89       	ldd	r24, Y+17	; 0x11
    2dce:	9a 89       	ldd	r25, Y+18	; 0x12
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <ESP8266_VidInit+0x3ac>
    2dd4:	9a 8b       	std	Y+18, r25	; 0x12
    2dd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dda:	9c 89       	ldd	r25, Y+20	; 0x14
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9c 8b       	std	Y+20, r25	; 0x14
    2de0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8b 89       	ldd	r24, Y+19	; 0x13
    2de4:	9c 89       	ldd	r25, Y+20	; 0x14
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <ESP8266_VidInit+0x3a0>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <ESP8266_VidInit+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	6d 89       	ldd	r22, Y+21	; 0x15
    2dee:	7e 89       	ldd	r23, Y+22	; 0x16
    2df0:	8f 89       	ldd	r24, Y+23	; 0x17
    2df2:	98 8d       	ldd	r25, Y+24	; 0x18
    2df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9c 8b       	std	Y+20, r25	; 0x14
    2dfe:	8b 8b       	std	Y+19, r24	; 0x13
    2e00:	8b 89       	ldd	r24, Y+19	; 0x13
    2e02:	9c 89       	ldd	r25, Y+20	; 0x14
    2e04:	98 8b       	std	Y+16, r25	; 0x10
    2e06:	8f 87       	std	Y+15, r24	; 0x0f
    2e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0a:	98 89       	ldd	r25, Y+16	; 0x10
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <ESP8266_VidInit+0x3e8>
    2e10:	98 8b       	std	Y+16, r25	; 0x10
    2e12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms( 1000 );

	USART_SendStr( (uint8 *) "AT+CIPMUX=0\r\n" );
    2e14:	86 eb       	ldi	r24, 0xB6	; 182
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	aa e7       	ldi	r26, 0x7A	; 122
    2e22:	b4 e4       	ldi	r27, 0x44	; 68
    2e24:	8b 87       	std	Y+11, r24	; 0x0b
    2e26:	9c 87       	std	Y+12, r25	; 0x0c
    2e28:	ad 87       	std	Y+13, r26	; 0x0d
    2e2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a ef       	ldi	r20, 0xFA	; 250
    2e3a:	54 e4       	ldi	r21, 0x44	; 68
    2e3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	8f 83       	std	Y+7, r24	; 0x07
    2e46:	98 87       	std	Y+8, r25	; 0x08
    2e48:	a9 87       	std	Y+9, r26	; 0x09
    2e4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4e:	78 85       	ldd	r23, Y+8	; 0x08
    2e50:	89 85       	ldd	r24, Y+9	; 0x09
    2e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <ESP8266_VidInit+0x44a>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <ESP8266_VidInit+0x4c8>
	else if (__tmp > 65535)
    2e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e70:	78 85       	ldd	r23, Y+8	; 0x08
    2e72:	89 85       	ldd	r24, Y+9	; 0x09
    2e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <ESP8266_VidInit+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e 83       	std	Y+6, r25	; 0x06
    2eac:	8d 83       	std	Y+5, r24	; 0x05
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <ESP8266_VidInit+0x4aa>
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9c 83       	std	Y+4, r25	; 0x04
    2eb6:	8b 83       	std	Y+3, r24	; 0x03
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <ESP8266_VidInit+0x498>
    2ec0:	9c 83       	std	Y+4, r25	; 0x04
    2ec2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <ESP8266_VidInit+0x48c>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <ESP8266_VidInit+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <ESP8266_VidInit+0x4d4>
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    2f00:	ca 5b       	subi	r28, 0xBA	; 186
    2f02:	df 4f       	sbci	r29, 0xFF	; 255
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	08 95       	ret

00002f18 <ESP8266_VidConnectToWiFi>:

void ESP8266_VidConnectToWiFi(uint8* SSID, uint8* Password)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	62 97       	sbiw	r28, 0x12	; 18
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	98 8b       	std	Y+16, r25	; 0x10
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	7a 8b       	std	Y+18, r23	; 0x12
    2f32:	69 8b       	std	Y+17, r22	; 0x11
	USART_SendStr( (uint8 *) "AT+CWJAP_CUR=\"" );
    2f34:	84 ec       	ldi	r24, 0xC4	; 196
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) SSID );
    2f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3e:	98 89       	ldd	r25, Y+16	; 0x10
    2f40:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) "\",\"" );
    2f44:	83 ed       	ldi	r24, 0xD3	; 211
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) Password);
    2f4c:	89 89       	ldd	r24, Y+17	; 0x11
    2f4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f50:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) "\"\r\n");
    2f54:	87 ed       	ldi	r24, 0xD7	; 215
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 ee       	ldi	r25, 0xE0	; 224
    2f60:	ab e2       	ldi	r26, 0x2B	; 43
    2f62:	b6 e4       	ldi	r27, 0x46	; 70
    2f64:	8b 87       	std	Y+11, r24	; 0x0b
    2f66:	9c 87       	std	Y+12, r25	; 0x0c
    2f68:	ad 87       	std	Y+13, r26	; 0x0d
    2f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	4a ef       	ldi	r20, 0xFA	; 250
    2f7a:	54 e4       	ldi	r21, 0x44	; 68
    2f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	8f 83       	std	Y+7, r24	; 0x07
    2f86:	98 87       	std	Y+8, r25	; 0x08
    2f88:	a9 87       	std	Y+9, r26	; 0x09
    2f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e8       	ldi	r20, 0x80	; 128
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	2c f4       	brge	.+10     	; 0x2fae <ESP8266_VidConnectToWiFi+0x96>
		__ticks = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	3f c0       	rjmp	.+126    	; 0x302c <ESP8266_VidConnectToWiFi+0x114>
	else if (__tmp > 65535)
    2fae:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb0:	78 85       	ldd	r23, Y+8	; 0x08
    2fb2:	89 85       	ldd	r24, Y+9	; 0x09
    2fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	3f ef       	ldi	r19, 0xFF	; 255
    2fba:	4f e7       	ldi	r20, 0x7F	; 127
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fc2:	18 16       	cp	r1, r24
    2fc4:	4c f5       	brge	.+82     	; 0x3018 <ESP8266_VidConnectToWiFi+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e2       	ldi	r20, 0x20	; 32
    2fd4:	51 e4       	ldi	r21, 0x41	; 65
    2fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9e 83       	std	Y+6, r25	; 0x06
    2fec:	8d 83       	std	Y+5, r24	; 0x05
    2fee:	0f c0       	rjmp	.+30     	; 0x300e <ESP8266_VidConnectToWiFi+0xf6>
    2ff0:	88 ec       	ldi	r24, 0xC8	; 200
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	9c 83       	std	Y+4, r25	; 0x04
    2ff6:	8b 83       	std	Y+3, r24	; 0x03
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <ESP8266_VidConnectToWiFi+0xe4>
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	69 f7       	brne	.-38     	; 0x2ff0 <ESP8266_VidConnectToWiFi+0xd8>
    3016:	14 c0       	rjmp	.+40     	; 0x3040 <ESP8266_VidConnectToWiFi+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	8d 81       	ldd	r24, Y+5	; 0x05
    302e:	9e 81       	ldd	r25, Y+6	; 0x06
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <ESP8266_VidConnectToWiFi+0x120>
    303c:	9a 83       	std	Y+2, r25	; 0x02
    303e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 11000 );
}
    3040:	62 96       	adiw	r28, 0x12	; 18
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <ESP8266_VidConnectToSrvTcp>:

void ESP8266_VidConnectToSrvTcp(uint8* Copy_u8Domain, uint8* Copy_u8Port)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	62 97       	sbiw	r28, 0x12	; 18
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	98 8b       	std	Y+16, r25	; 0x10
    3068:	8f 87       	std	Y+15, r24	; 0x0f
    306a:	7a 8b       	std	Y+18, r23	; 0x12
    306c:	69 8b       	std	Y+17, r22	; 0x11
	USART_SendStr( (uint8 *) "AT+CIPSTART=\"TCP\",\"" );
    306e:	8b ed       	ldi	r24, 0xDB	; 219
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) Copy_u8Domain );
    3076:	8f 85       	ldd	r24, Y+15	; 0x0f
    3078:	98 89       	ldd	r25, Y+16	; 0x10
    307a:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) "\"," );
    307e:	8f ee       	ldi	r24, 0xEF	; 239
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) Copy_u8Port );
    3086:	89 89       	ldd	r24, Y+17	; 0x11
    3088:	9a 89       	ldd	r25, Y+18	; 0x12
    308a:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendStr( (uint8 *) "\r\n" );
    308e:	82 ef       	ldi	r24, 0xF2	; 242
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	aa e7       	ldi	r26, 0x7A	; 122
    309c:	b4 e4       	ldi	r27, 0x44	; 68
    309e:	8b 87       	std	Y+11, r24	; 0x0b
    30a0:	9c 87       	std	Y+12, r25	; 0x0c
    30a2:	ad 87       	std	Y+13, r26	; 0x0d
    30a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a ef       	ldi	r20, 0xFA	; 250
    30b4:	54 e4       	ldi	r21, 0x44	; 68
    30b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	8f 83       	std	Y+7, r24	; 0x07
    30c0:	98 87       	std	Y+8, r25	; 0x08
    30c2:	a9 87       	std	Y+9, r26	; 0x09
    30c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c6:	6f 81       	ldd	r22, Y+7	; 0x07
    30c8:	78 85       	ldd	r23, Y+8	; 0x08
    30ca:	89 85       	ldd	r24, Y+9	; 0x09
    30cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	5f e3       	ldi	r21, 0x3F	; 63
    30d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30da:	88 23       	and	r24, r24
    30dc:	2c f4       	brge	.+10     	; 0x30e8 <ESP8266_VidConnectToSrvTcp+0x96>
		__ticks = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	3f c0       	rjmp	.+126    	; 0x3166 <ESP8266_VidConnectToSrvTcp+0x114>
	else if (__tmp > 65535)
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	4c f5       	brge	.+82     	; 0x3152 <ESP8266_VidConnectToSrvTcp+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	6b 85       	ldd	r22, Y+11	; 0x0b
    3102:	7c 85       	ldd	r23, Y+12	; 0x0c
    3104:	8d 85       	ldd	r24, Y+13	; 0x0d
    3106:	9e 85       	ldd	r25, Y+14	; 0x0e
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	51 e4       	ldi	r21, 0x41	; 65
    3110:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <ESP8266_VidConnectToSrvTcp+0xf6>
    312a:	88 ec       	ldi	r24, 0xC8	; 200
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9c 83       	std	Y+4, r25	; 0x04
    3130:	8b 83       	std	Y+3, r24	; 0x03
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <ESP8266_VidConnectToSrvTcp+0xe4>
    313a:	9c 83       	std	Y+4, r25	; 0x04
    313c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	8d 81       	ldd	r24, Y+5	; 0x05
    3140:	9e 81       	ldd	r25, Y+6	; 0x06
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f7       	brne	.-38     	; 0x312a <ESP8266_VidConnectToSrvTcp+0xd8>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <ESP8266_VidConnectToSrvTcp+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3152:	6f 81       	ldd	r22, Y+7	; 0x07
    3154:	78 85       	ldd	r23, Y+8	; 0x08
    3156:	89 85       	ldd	r24, Y+9	; 0x09
    3158:	9a 85       	ldd	r25, Y+10	; 0x0a
    315a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <ESP8266_VidConnectToSrvTcp+0x120>
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    317a:	62 96       	adiw	r28, 0x12	; 18
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <ESP8266_u8GetHB>:

uint8 ESP8266_u8GetHB(uint8* arr)
{
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	62 97       	sbiw	r28, 0x12	; 18
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	9a 8b       	std	Y+18, r25	; 0x12
    31a6:	89 8b       	std	Y+17, r24	; 0x11
	uint8 result=0;
    31a8:	18 8a       	std	Y+16, r1	; 0x10
	uint8 i=0;
    31aa:	1f 86       	std	Y+15, r1	; 0x0f
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    31ac:	85 ef       	ldi	r24, 0xF5	; 245
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	25 e0       	ldi	r18, 0x05	; 5
    31b2:	31 e0       	ldi	r19, 0x01	; 1
    31b4:	b9 01       	movw	r22, r18
    31b6:	0e 94 29 18 	call	0x3052	; 0x3052 <ESP8266_VidConnectToSrvTcp>
	USART_SendStr( (uint8 *) "AT+CIPSEND=55\r\n" );
    31ba:	88 e0       	ldi	r24, 0x08	; 8
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 e2       	ldi	r26, 0x20	; 32
    31c8:	b1 e4       	ldi	r27, 0x41	; 65
    31ca:	8b 87       	std	Y+11, r24	; 0x0b
    31cc:	9c 87       	std	Y+12, r25	; 0x0c
    31ce:	ad 87       	std	Y+13, r26	; 0x0d
    31d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	4a ef       	ldi	r20, 0xFA	; 250
    31e0:	54 e4       	ldi	r21, 0x44	; 68
    31e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8f 83       	std	Y+7, r24	; 0x07
    31ec:	98 87       	std	Y+8, r25	; 0x08
    31ee:	a9 87       	std	Y+9, r26	; 0x09
    31f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f2:	6f 81       	ldd	r22, Y+7	; 0x07
    31f4:	78 85       	ldd	r23, Y+8	; 0x08
    31f6:	89 85       	ldd	r24, Y+9	; 0x09
    31f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <ESP8266_u8GetHB+0x88>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9e 83       	std	Y+6, r25	; 0x06
    3210:	8d 83       	std	Y+5, r24	; 0x05
    3212:	3f c0       	rjmp	.+126    	; 0x3292 <ESP8266_u8GetHB+0x106>
	else if (__tmp > 65535)
    3214:	6f 81       	ldd	r22, Y+7	; 0x07
    3216:	78 85       	ldd	r23, Y+8	; 0x08
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	9a 85       	ldd	r25, Y+10	; 0x0a
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	4c f5       	brge	.+82     	; 0x327e <ESP8266_u8GetHB+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <ESP8266_u8GetHB+0xe8>
    3256:	88 ec       	ldi	r24, 0xC8	; 200
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9c 83       	std	Y+4, r25	; 0x04
    325c:	8b 83       	std	Y+3, r24	; 0x03
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9c 81       	ldd	r25, Y+4	; 0x04
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <ESP8266_u8GetHB+0xd6>
    3266:	9c 83       	std	Y+4, r25	; 0x04
    3268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	9e 81       	ldd	r25, Y+6	; 0x06
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	9e 83       	std	Y+6, r25	; 0x06
    3272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f7       	brne	.-38     	; 0x3256 <ESP8266_u8GetHB+0xca>
    327c:	14 c0       	rjmp	.+40     	; 0x32a6 <ESP8266_u8GetHB+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327e:	6f 81       	ldd	r22, Y+7	; 0x07
    3280:	78 85       	ldd	r23, Y+8	; 0x08
    3282:	89 85       	ldd	r24, Y+9	; 0x09
    3284:	9a 85       	ldd	r25, Y+10	; 0x0a
    3286:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	89 83       	std	Y+1, r24	; 0x01
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <ESP8266_u8GetHB+0x112>
    32a2:	9a 83       	std	Y+2, r25	; 0x02
    32a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 10 );

	USART_SendStr( (uint8 *) "GET http://eece2022.freevar.com/RecieverHB.php?line=0\r\n");
    32a6:	88 e1       	ldi	r24, 0x18	; 24
    32a8:	91 e0       	ldi	r25, 0x01	; 1
    32aa:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>

	for(i=0;i<45;i++)
    32ae:	1f 86       	std	Y+15, r1	; 0x0f
    32b0:	0f c0       	rjmp	.+30     	; 0x32d0 <ESP8266_u8GetHB+0x144>
	{
		arr[i]=USART_ReceiveDataPolling();
    32b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	89 89       	ldd	r24, Y+17	; 0x11
    32ba:	9a 89       	ldd	r25, Y+18	; 0x12
    32bc:	8c 01       	movw	r16, r24
    32be:	02 0f       	add	r16, r18
    32c0:	13 1f       	adc	r17, r19
    32c2:	0e 94 c2 12 	call	0x2584	; 0x2584 <USART_ReceiveDataPolling>
    32c6:	f8 01       	movw	r30, r16
    32c8:	80 83       	st	Z, r24
	USART_SendStr( (uint8 *) "AT+CIPSEND=55\r\n" );
	_delay_ms( 10 );

	USART_SendStr( (uint8 *) "GET http://eece2022.freevar.com/RecieverHB.php?line=0\r\n");

	for(i=0;i<45;i++)
    32ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	8f 87       	std	Y+15, r24	; 0x0f
    32d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d2:	8d 32       	cpi	r24, 0x2D	; 45
    32d4:	70 f3       	brcs	.-36     	; 0x32b2 <ESP8266_u8GetHB+0x126>
	{
		arr[i]=USART_ReceiveDataPolling();
	}
	result = (arr[38]-48)*10+(arr[39]-48);
    32d6:	89 89       	ldd	r24, Y+17	; 0x11
    32d8:	9a 89       	ldd	r25, Y+18	; 0x12
    32da:	fc 01       	movw	r30, r24
    32dc:	b6 96       	adiw	r30, 0x26	; 38
    32de:	80 81       	ld	r24, Z
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9c 01       	movw	r18, r24
    32e6:	22 0f       	add	r18, r18
    32e8:	33 1f       	adc	r19, r19
    32ea:	c9 01       	movw	r24, r18
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	82 0f       	add	r24, r18
    32f6:	93 1f       	adc	r25, r19
    32f8:	28 2f       	mov	r18, r24
    32fa:	89 89       	ldd	r24, Y+17	; 0x11
    32fc:	9a 89       	ldd	r25, Y+18	; 0x12
    32fe:	fc 01       	movw	r30, r24
    3300:	b7 96       	adiw	r30, 0x27	; 39
    3302:	80 81       	ld	r24, Z
    3304:	82 0f       	add	r24, r18
    3306:	80 51       	subi	r24, 0x10	; 16
    3308:	88 8b       	std	Y+16, r24	; 0x10
	if(arr[40]>47 && arr[40]<58)
    330a:	89 89       	ldd	r24, Y+17	; 0x11
    330c:	9a 89       	ldd	r25, Y+18	; 0x12
    330e:	fc 01       	movw	r30, r24
    3310:	b8 96       	adiw	r30, 0x28	; 40
    3312:	80 81       	ld	r24, Z
    3314:	80 33       	cpi	r24, 0x30	; 48
    3316:	a0 f1       	brcs	.+104    	; 0x3380 <ESP8266_u8GetHB+0x1f4>
    3318:	89 89       	ldd	r24, Y+17	; 0x11
    331a:	9a 89       	ldd	r25, Y+18	; 0x12
    331c:	fc 01       	movw	r30, r24
    331e:	b8 96       	adiw	r30, 0x28	; 40
    3320:	80 81       	ld	r24, Z
    3322:	8a 33       	cpi	r24, 0x3A	; 58
    3324:	68 f5       	brcc	.+90     	; 0x3380 <ESP8266_u8GetHB+0x1f4>
	{
		result = (arr[38]-48)*100+(arr[39]-48)*10+(arr[40]-48);
    3326:	89 89       	ldd	r24, Y+17	; 0x11
    3328:	9a 89       	ldd	r25, Y+18	; 0x12
    332a:	fc 01       	movw	r30, r24
    332c:	b6 96       	adiw	r30, 0x26	; 38
    332e:	80 81       	ld	r24, Z
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	84 e6       	ldi	r24, 0x64	; 100
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	ac 01       	movw	r20, r24
    333a:	24 9f       	mul	r18, r20
    333c:	c0 01       	movw	r24, r0
    333e:	25 9f       	mul	r18, r21
    3340:	90 0d       	add	r25, r0
    3342:	34 9f       	mul	r19, r20
    3344:	90 0d       	add	r25, r0
    3346:	11 24       	eor	r1, r1
    3348:	48 2f       	mov	r20, r24
    334a:	89 89       	ldd	r24, Y+17	; 0x11
    334c:	9a 89       	ldd	r25, Y+18	; 0x12
    334e:	fc 01       	movw	r30, r24
    3350:	b7 96       	adiw	r30, 0x27	; 39
    3352:	80 81       	ld	r24, Z
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	9c 01       	movw	r18, r24
    335a:	22 0f       	add	r18, r18
    335c:	33 1f       	adc	r19, r19
    335e:	c9 01       	movw	r24, r18
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	82 0f       	add	r24, r18
    336a:	93 1f       	adc	r25, r19
    336c:	24 2f       	mov	r18, r20
    336e:	28 0f       	add	r18, r24
    3370:	89 89       	ldd	r24, Y+17	; 0x11
    3372:	9a 89       	ldd	r25, Y+18	; 0x12
    3374:	fc 01       	movw	r30, r24
    3376:	b8 96       	adiw	r30, 0x28	; 40
    3378:	80 81       	ld	r24, Z
    337a:	82 0f       	add	r24, r18
    337c:	80 5d       	subi	r24, 0xD0	; 208
    337e:	88 8b       	std	Y+16, r24	; 0x10
	}
	return result;
    3380:	88 89       	ldd	r24, Y+16	; 0x10
}
    3382:	62 96       	adiw	r28, 0x12	; 18
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	cd bf       	out	0x3d, r28	; 61
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	08 95       	ret

00003398 <ESP8266_u8GetPR>:
uint8 ESP8266_u8GetPR(uint8* arr)
{
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	62 97       	sbiw	r28, 0x12	; 18
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	9a 8b       	std	Y+18, r25	; 0x12
    33b2:	89 8b       	std	Y+17, r24	; 0x11
	uint8 result=0;
    33b4:	18 8a       	std	Y+16, r1	; 0x10
	uint8 i=0;
    33b6:	1f 86       	std	Y+15, r1	; 0x0f
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    33b8:	85 ef       	ldi	r24, 0xF5	; 245
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	25 e0       	ldi	r18, 0x05	; 5
    33be:	31 e0       	ldi	r19, 0x01	; 1
    33c0:	b9 01       	movw	r22, r18
    33c2:	0e 94 29 18 	call	0x3052	; 0x3052 <ESP8266_VidConnectToSrvTcp>
	USART_SendStr( (uint8 *) "AT+CIPSEND=55\r\n" );
    33c6:	88 e0       	ldi	r24, 0x08	; 8
    33c8:	91 e0       	ldi	r25, 0x01	; 1
    33ca:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	a0 e2       	ldi	r26, 0x20	; 32
    33d4:	b1 e4       	ldi	r27, 0x41	; 65
    33d6:	8b 87       	std	Y+11, r24	; 0x0b
    33d8:	9c 87       	std	Y+12, r25	; 0x0c
    33da:	ad 87       	std	Y+13, r26	; 0x0d
    33dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33de:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4a ef       	ldi	r20, 0xFA	; 250
    33ec:	54 e4       	ldi	r21, 0x44	; 68
    33ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8f 83       	std	Y+7, r24	; 0x07
    33f8:	98 87       	std	Y+8, r25	; 0x08
    33fa:	a9 87       	std	Y+9, r26	; 0x09
    33fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3400:	78 85       	ldd	r23, Y+8	; 0x08
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	9a 85       	ldd	r25, Y+10	; 0x0a
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	2c f4       	brge	.+10     	; 0x3420 <ESP8266_u8GetPR+0x88>
		__ticks = 1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	8d 83       	std	Y+5, r24	; 0x05
    341e:	3f c0       	rjmp	.+126    	; 0x349e <ESP8266_u8GetPR+0x106>
	else if (__tmp > 65535)
    3420:	6f 81       	ldd	r22, Y+7	; 0x07
    3422:	78 85       	ldd	r23, Y+8	; 0x08
    3424:	89 85       	ldd	r24, Y+9	; 0x09
    3426:	9a 85       	ldd	r25, Y+10	; 0x0a
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	4c f5       	brge	.+82     	; 0x348a <ESP8266_u8GetPR+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3438:	6b 85       	ldd	r22, Y+11	; 0x0b
    343a:	7c 85       	ldd	r23, Y+12	; 0x0c
    343c:	8d 85       	ldd	r24, Y+13	; 0x0d
    343e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <ESP8266_u8GetPR+0xe8>
    3462:	88 ec       	ldi	r24, 0xC8	; 200
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <ESP8266_u8GetPR+0xd6>
    3472:	9c 83       	std	Y+4, r25	; 0x04
    3474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	69 f7       	brne	.-38     	; 0x3462 <ESP8266_u8GetPR+0xca>
    3488:	14 c0       	rjmp	.+40     	; 0x34b2 <ESP8266_u8GetPR+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348a:	6f 81       	ldd	r22, Y+7	; 0x07
    348c:	78 85       	ldd	r23, Y+8	; 0x08
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <ESP8266_u8GetPR+0x112>
    34ae:	9a 83       	std	Y+2, r25	; 0x02
    34b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 10 );

	USART_SendStr( (uint8 *) "GET http://eece2022.freevar.com/RecieverPR.php?line=0\r\n");
    34b2:	80 e5       	ldi	r24, 0x50	; 80
    34b4:	91 e0       	ldi	r25, 0x01	; 1
    34b6:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>

	for(i=0;i<45;i++)
    34ba:	1f 86       	std	Y+15, r1	; 0x0f
    34bc:	0f c0       	rjmp	.+30     	; 0x34dc <ESP8266_u8GetPR+0x144>
	{
		arr[i]=USART_ReceiveDataPolling();
    34be:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	89 89       	ldd	r24, Y+17	; 0x11
    34c6:	9a 89       	ldd	r25, Y+18	; 0x12
    34c8:	8c 01       	movw	r16, r24
    34ca:	02 0f       	add	r16, r18
    34cc:	13 1f       	adc	r17, r19
    34ce:	0e 94 c2 12 	call	0x2584	; 0x2584 <USART_ReceiveDataPolling>
    34d2:	f8 01       	movw	r30, r16
    34d4:	80 83       	st	Z, r24
	USART_SendStr( (uint8 *) "AT+CIPSEND=55\r\n" );
	_delay_ms( 10 );

	USART_SendStr( (uint8 *) "GET http://eece2022.freevar.com/RecieverPR.php?line=0\r\n");

	for(i=0;i<45;i++)
    34d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d8:	8f 5f       	subi	r24, 0xFF	; 255
    34da:	8f 87       	std	Y+15, r24	; 0x0f
    34dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34de:	8d 32       	cpi	r24, 0x2D	; 45
    34e0:	70 f3       	brcs	.-36     	; 0x34be <ESP8266_u8GetPR+0x126>
	{
		arr[i]=USART_ReceiveDataPolling();
	}
	result = (arr[38]-48)*10+(arr[39]-48);
    34e2:	89 89       	ldd	r24, Y+17	; 0x11
    34e4:	9a 89       	ldd	r25, Y+18	; 0x12
    34e6:	fc 01       	movw	r30, r24
    34e8:	b6 96       	adiw	r30, 0x26	; 38
    34ea:	80 81       	ld	r24, Z
    34ec:	88 2f       	mov	r24, r24
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	9c 01       	movw	r18, r24
    34f2:	22 0f       	add	r18, r18
    34f4:	33 1f       	adc	r19, r19
    34f6:	c9 01       	movw	r24, r18
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	88 0f       	add	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	82 0f       	add	r24, r18
    3502:	93 1f       	adc	r25, r19
    3504:	28 2f       	mov	r18, r24
    3506:	89 89       	ldd	r24, Y+17	; 0x11
    3508:	9a 89       	ldd	r25, Y+18	; 0x12
    350a:	fc 01       	movw	r30, r24
    350c:	b7 96       	adiw	r30, 0x27	; 39
    350e:	80 81       	ld	r24, Z
    3510:	82 0f       	add	r24, r18
    3512:	80 51       	subi	r24, 0x10	; 16
    3514:	88 8b       	std	Y+16, r24	; 0x10
	if(arr[40]>47 && arr[40]<58)
    3516:	89 89       	ldd	r24, Y+17	; 0x11
    3518:	9a 89       	ldd	r25, Y+18	; 0x12
    351a:	fc 01       	movw	r30, r24
    351c:	b8 96       	adiw	r30, 0x28	; 40
    351e:	80 81       	ld	r24, Z
    3520:	80 33       	cpi	r24, 0x30	; 48
    3522:	a0 f1       	brcs	.+104    	; 0x358c <ESP8266_u8GetPR+0x1f4>
    3524:	89 89       	ldd	r24, Y+17	; 0x11
    3526:	9a 89       	ldd	r25, Y+18	; 0x12
    3528:	fc 01       	movw	r30, r24
    352a:	b8 96       	adiw	r30, 0x28	; 40
    352c:	80 81       	ld	r24, Z
    352e:	8a 33       	cpi	r24, 0x3A	; 58
    3530:	68 f5       	brcc	.+90     	; 0x358c <ESP8266_u8GetPR+0x1f4>
	{
		result = (arr[38]-48)*100+(arr[39]-48)*10+(arr[40]-48);
    3532:	89 89       	ldd	r24, Y+17	; 0x11
    3534:	9a 89       	ldd	r25, Y+18	; 0x12
    3536:	fc 01       	movw	r30, r24
    3538:	b6 96       	adiw	r30, 0x26	; 38
    353a:	80 81       	ld	r24, Z
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	84 e6       	ldi	r24, 0x64	; 100
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	ac 01       	movw	r20, r24
    3546:	24 9f       	mul	r18, r20
    3548:	c0 01       	movw	r24, r0
    354a:	25 9f       	mul	r18, r21
    354c:	90 0d       	add	r25, r0
    354e:	34 9f       	mul	r19, r20
    3550:	90 0d       	add	r25, r0
    3552:	11 24       	eor	r1, r1
    3554:	48 2f       	mov	r20, r24
    3556:	89 89       	ldd	r24, Y+17	; 0x11
    3558:	9a 89       	ldd	r25, Y+18	; 0x12
    355a:	fc 01       	movw	r30, r24
    355c:	b7 96       	adiw	r30, 0x27	; 39
    355e:	80 81       	ld	r24, Z
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9c 01       	movw	r18, r24
    3566:	22 0f       	add	r18, r18
    3568:	33 1f       	adc	r19, r19
    356a:	c9 01       	movw	r24, r18
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	82 0f       	add	r24, r18
    3576:	93 1f       	adc	r25, r19
    3578:	24 2f       	mov	r18, r20
    357a:	28 0f       	add	r18, r24
    357c:	89 89       	ldd	r24, Y+17	; 0x11
    357e:	9a 89       	ldd	r25, Y+18	; 0x12
    3580:	fc 01       	movw	r30, r24
    3582:	b8 96       	adiw	r30, 0x28	; 40
    3584:	80 81       	ld	r24, Z
    3586:	82 0f       	add	r24, r18
    3588:	80 5d       	subi	r24, 0xD0	; 208
    358a:	88 8b       	std	Y+16, r24	; 0x10
	}
	return result;
    358c:	88 89       	ldd	r24, Y+16	; 0x10
}
    358e:	62 96       	adiw	r28, 0x12	; 18
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	08 95       	ret

000035a4 <ESP8266_VidSendHB>:

void ESP8266_VidSendHB(uint8 Copy_u8HB)
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	6d 97       	sbiw	r28, 0x1d	; 29
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	8d 8f       	std	Y+29, r24	; 0x1d
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    35ba:	85 ef       	ldi	r24, 0xF5	; 245
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	25 e0       	ldi	r18, 0x05	; 5
    35c0:	31 e0       	ldi	r19, 0x01	; 1
    35c2:	b9 01       	movw	r22, r18
    35c4:	0e 94 29 18 	call	0x3052	; 0x3052 <ESP8266_VidConnectToSrvTcp>
	if(((Copy_u8HB/10)/10)==0)
    35c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ca:	84 36       	cpi	r24, 0x64	; 100
    35cc:	28 f4       	brcc	.+10     	; 0x35d8 <ESP8266_VidSendHB+0x34>
	{
		USART_SendStr( (uint8 *) "AT+CIPSEND=59\r\n" );
    35ce:	88 e8       	ldi	r24, 0x88	; 136
    35d0:	91 e0       	ldi	r25, 0x01	; 1
    35d2:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <ESP8266_VidSendHB+0x3c>
	}
	else
	{
		USART_SendStr( (uint8 *) "AT+CIPSEND=60\r\n" );
    35d8:	88 e9       	ldi	r24, 0x98	; 152
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 e2       	ldi	r26, 0x20	; 32
    35e6:	b1 e4       	ldi	r27, 0x41	; 65
    35e8:	89 8f       	std	Y+25, r24	; 0x19
    35ea:	9a 8f       	std	Y+26, r25	; 0x1a
    35ec:	ab 8f       	std	Y+27, r26	; 0x1b
    35ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	69 8d       	ldd	r22, Y+25	; 0x19
    35f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a ef       	ldi	r20, 0xFA	; 250
    35fe:	54 e4       	ldi	r21, 0x44	; 68
    3600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	8d 8b       	std	Y+21, r24	; 0x15
    360a:	9e 8b       	std	Y+22, r25	; 0x16
    360c:	af 8b       	std	Y+23, r26	; 0x17
    360e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3610:	6d 89       	ldd	r22, Y+21	; 0x15
    3612:	7e 89       	ldd	r23, Y+22	; 0x16
    3614:	8f 89       	ldd	r24, Y+23	; 0x17
    3616:	98 8d       	ldd	r25, Y+24	; 0x18
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	2c f4       	brge	.+10     	; 0x3632 <ESP8266_VidSendHB+0x8e>
		__ticks = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9c 8b       	std	Y+20, r25	; 0x14
    362e:	8b 8b       	std	Y+19, r24	; 0x13
    3630:	3f c0       	rjmp	.+126    	; 0x36b0 <ESP8266_VidSendHB+0x10c>
	else if (__tmp > 65535)
    3632:	6d 89       	ldd	r22, Y+21	; 0x15
    3634:	7e 89       	ldd	r23, Y+22	; 0x16
    3636:	8f 89       	ldd	r24, Y+23	; 0x17
    3638:	98 8d       	ldd	r25, Y+24	; 0x18
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	4c f5       	brge	.+82     	; 0x369c <ESP8266_VidSendHB+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364a:	69 8d       	ldd	r22, Y+25	; 0x19
    364c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9c 8b       	std	Y+20, r25	; 0x14
    3670:	8b 8b       	std	Y+19, r24	; 0x13
    3672:	0f c0       	rjmp	.+30     	; 0x3692 <ESP8266_VidSendHB+0xee>
    3674:	88 ec       	ldi	r24, 0xC8	; 200
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9a 8b       	std	Y+18, r25	; 0x12
    367a:	89 8b       	std	Y+17, r24	; 0x11
    367c:	89 89       	ldd	r24, Y+17	; 0x11
    367e:	9a 89       	ldd	r25, Y+18	; 0x12
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <ESP8266_VidSendHB+0xdc>
    3684:	9a 8b       	std	Y+18, r25	; 0x12
    3686:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	8b 89       	ldd	r24, Y+19	; 0x13
    368a:	9c 89       	ldd	r25, Y+20	; 0x14
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	9c 8b       	std	Y+20, r25	; 0x14
    3690:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3692:	8b 89       	ldd	r24, Y+19	; 0x13
    3694:	9c 89       	ldd	r25, Y+20	; 0x14
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	69 f7       	brne	.-38     	; 0x3674 <ESP8266_VidSendHB+0xd0>
    369a:	14 c0       	rjmp	.+40     	; 0x36c4 <ESP8266_VidSendHB+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369c:	6d 89       	ldd	r22, Y+21	; 0x15
    369e:	7e 89       	ldd	r23, Y+22	; 0x16
    36a0:	8f 89       	ldd	r24, Y+23	; 0x17
    36a2:	98 8d       	ldd	r25, Y+24	; 0x18
    36a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9c 8b       	std	Y+20, r25	; 0x14
    36ae:	8b 8b       	std	Y+19, r24	; 0x13
    36b0:	8b 89       	ldd	r24, Y+19	; 0x13
    36b2:	9c 89       	ldd	r25, Y+20	; 0x14
    36b4:	98 8b       	std	Y+16, r25	; 0x10
    36b6:	8f 87       	std	Y+15, r24	; 0x0f
    36b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ba:	98 89       	ldd	r25, Y+16	; 0x10
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <ESP8266_VidSendHB+0x118>
    36c0:	98 8b       	std	Y+16, r25	; 0x10
    36c2:	8f 87       	std	Y+15, r24	; 0x0f
	}
	_delay_ms( 10 );

	USART_SendStr( (uint8 *) "GET http://eece2022.freevar.com/TransmitterHB.php?data=");
    36c4:	88 ea       	ldi	r24, 0xA8	; 168
    36c6:	91 e0       	ldi	r25, 0x01	; 1
    36c8:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendInteger(Copy_u8HB);
    36cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36ce:	88 2f       	mov	r24, r24
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 55 13 	call	0x26aa	; 0x26aa <USART_SendInteger>
	USART_SendStr((uint8 *)"\r\n");
    36d6:	82 ef       	ldi	r24, 0xF2	; 242
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	aa e7       	ldi	r26, 0x7A	; 122
    36e4:	b4 e4       	ldi	r27, 0x44	; 68
    36e6:	8b 87       	std	Y+11, r24	; 0x0b
    36e8:	9c 87       	std	Y+12, r25	; 0x0c
    36ea:	ad 87       	std	Y+13, r26	; 0x0d
    36ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	4a ef       	ldi	r20, 0xFA	; 250
    36fc:	54 e4       	ldi	r21, 0x44	; 68
    36fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	8f 83       	std	Y+7, r24	; 0x07
    3708:	98 87       	std	Y+8, r25	; 0x08
    370a:	a9 87       	std	Y+9, r26	; 0x09
    370c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    370e:	6f 81       	ldd	r22, Y+7	; 0x07
    3710:	78 85       	ldd	r23, Y+8	; 0x08
    3712:	89 85       	ldd	r24, Y+9	; 0x09
    3714:	9a 85       	ldd	r25, Y+10	; 0x0a
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e8       	ldi	r20, 0x80	; 128
    371c:	5f e3       	ldi	r21, 0x3F	; 63
    371e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3722:	88 23       	and	r24, r24
    3724:	2c f4       	brge	.+10     	; 0x3730 <ESP8266_VidSendHB+0x18c>
		__ticks = 1;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	3f c0       	rjmp	.+126    	; 0x37ae <ESP8266_VidSendHB+0x20a>
	else if (__tmp > 65535)
    3730:	6f 81       	ldd	r22, Y+7	; 0x07
    3732:	78 85       	ldd	r23, Y+8	; 0x08
    3734:	89 85       	ldd	r24, Y+9	; 0x09
    3736:	9a 85       	ldd	r25, Y+10	; 0x0a
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	3f ef       	ldi	r19, 0xFF	; 255
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	57 e4       	ldi	r21, 0x47	; 71
    3740:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	4c f5       	brge	.+82     	; 0x379a <ESP8266_VidSendHB+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3748:	6b 85       	ldd	r22, Y+11	; 0x0b
    374a:	7c 85       	ldd	r23, Y+12	; 0x0c
    374c:	8d 85       	ldd	r24, Y+13	; 0x0d
    374e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e2       	ldi	r20, 0x20	; 32
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	0f c0       	rjmp	.+30     	; 0x3790 <ESP8266_VidSendHB+0x1ec>
    3772:	88 ec       	ldi	r24, 0xC8	; 200
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9c 83       	std	Y+4, r25	; 0x04
    3778:	8b 83       	std	Y+3, r24	; 0x03
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	9c 81       	ldd	r25, Y+4	; 0x04
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <ESP8266_VidSendHB+0x1da>
    3782:	9c 83       	std	Y+4, r25	; 0x04
    3784:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3786:	8d 81       	ldd	r24, Y+5	; 0x05
    3788:	9e 81       	ldd	r25, Y+6	; 0x06
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	9e 83       	std	Y+6, r25	; 0x06
    378e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	69 f7       	brne	.-38     	; 0x3772 <ESP8266_VidSendHB+0x1ce>
    3798:	14 c0       	rjmp	.+40     	; 0x37c2 <ESP8266_VidSendHB+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379a:	6f 81       	ldd	r22, Y+7	; 0x07
    379c:	78 85       	ldd	r23, Y+8	; 0x08
    379e:	89 85       	ldd	r24, Y+9	; 0x09
    37a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e 83       	std	Y+6, r25	; 0x06
    37ac:	8d 83       	std	Y+5, r24	; 0x05
    37ae:	8d 81       	ldd	r24, Y+5	; 0x05
    37b0:	9e 81       	ldd	r25, Y+6	; 0x06
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <ESP8266_VidSendHB+0x216>
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    37c2:	6d 96       	adiw	r28, 0x1d	; 29
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	08 95       	ret

000037d4 <ESP8266_VidSendPR>:
void ESP8266_VidSendPR(uint8 Copy_u8PR)
{
    37d4:	df 93       	push	r29
    37d6:	cf 93       	push	r28
    37d8:	cd b7       	in	r28, 0x3d	; 61
    37da:	de b7       	in	r29, 0x3e	; 62
    37dc:	6d 97       	sbiw	r28, 0x1d	; 29
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	8d 8f       	std	Y+29, r24	; 0x1d
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    37ea:	85 ef       	ldi	r24, 0xF5	; 245
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	25 e0       	ldi	r18, 0x05	; 5
    37f0:	31 e0       	ldi	r19, 0x01	; 1
    37f2:	b9 01       	movw	r22, r18
    37f4:	0e 94 29 18 	call	0x3052	; 0x3052 <ESP8266_VidConnectToSrvTcp>
	if(((Copy_u8PR/10)/10)==0)
    37f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37fa:	84 36       	cpi	r24, 0x64	; 100
    37fc:	28 f4       	brcc	.+10     	; 0x3808 <ESP8266_VidSendPR+0x34>
	{
		USART_SendStr( (uint8 *) "AT+CIPSEND=59\r\n" );
    37fe:	88 e8       	ldi	r24, 0x88	; 136
    3800:	91 e0       	ldi	r25, 0x01	; 1
    3802:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    3806:	04 c0       	rjmp	.+8      	; 0x3810 <ESP8266_VidSendPR+0x3c>
	}
	else
	{
		USART_SendStr( (uint8 *) "AT+CIPSEND=60\r\n" );
    3808:	88 e9       	ldi	r24, 0x98	; 152
    380a:	91 e0       	ldi	r25, 0x01	; 1
    380c:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	a0 e2       	ldi	r26, 0x20	; 32
    3816:	b1 e4       	ldi	r27, 0x41	; 65
    3818:	89 8f       	std	Y+25, r24	; 0x19
    381a:	9a 8f       	std	Y+26, r25	; 0x1a
    381c:	ab 8f       	std	Y+27, r26	; 0x1b
    381e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3820:	69 8d       	ldd	r22, Y+25	; 0x19
    3822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	4a ef       	ldi	r20, 0xFA	; 250
    382e:	54 e4       	ldi	r21, 0x44	; 68
    3830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	8d 8b       	std	Y+21, r24	; 0x15
    383a:	9e 8b       	std	Y+22, r25	; 0x16
    383c:	af 8b       	std	Y+23, r26	; 0x17
    383e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3840:	6d 89       	ldd	r22, Y+21	; 0x15
    3842:	7e 89       	ldd	r23, Y+22	; 0x16
    3844:	8f 89       	ldd	r24, Y+23	; 0x17
    3846:	98 8d       	ldd	r25, Y+24	; 0x18
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e8       	ldi	r20, 0x80	; 128
    384e:	5f e3       	ldi	r21, 0x3F	; 63
    3850:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3854:	88 23       	and	r24, r24
    3856:	2c f4       	brge	.+10     	; 0x3862 <ESP8266_VidSendPR+0x8e>
		__ticks = 1;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	9c 8b       	std	Y+20, r25	; 0x14
    385e:	8b 8b       	std	Y+19, r24	; 0x13
    3860:	3f c0       	rjmp	.+126    	; 0x38e0 <ESP8266_VidSendPR+0x10c>
	else if (__tmp > 65535)
    3862:	6d 89       	ldd	r22, Y+21	; 0x15
    3864:	7e 89       	ldd	r23, Y+22	; 0x16
    3866:	8f 89       	ldd	r24, Y+23	; 0x17
    3868:	98 8d       	ldd	r25, Y+24	; 0x18
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	3f ef       	ldi	r19, 0xFF	; 255
    386e:	4f e7       	ldi	r20, 0x7F	; 127
    3870:	57 e4       	ldi	r21, 0x47	; 71
    3872:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3876:	18 16       	cp	r1, r24
    3878:	4c f5       	brge	.+82     	; 0x38cc <ESP8266_VidSendPR+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387a:	69 8d       	ldd	r22, Y+25	; 0x19
    387c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    387e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e2       	ldi	r20, 0x20	; 32
    3888:	51 e4       	ldi	r21, 0x41	; 65
    388a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9c 8b       	std	Y+20, r25	; 0x14
    38a0:	8b 8b       	std	Y+19, r24	; 0x13
    38a2:	0f c0       	rjmp	.+30     	; 0x38c2 <ESP8266_VidSendPR+0xee>
    38a4:	88 ec       	ldi	r24, 0xC8	; 200
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9a 8b       	std	Y+18, r25	; 0x12
    38aa:	89 8b       	std	Y+17, r24	; 0x11
    38ac:	89 89       	ldd	r24, Y+17	; 0x11
    38ae:	9a 89       	ldd	r25, Y+18	; 0x12
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <ESP8266_VidSendPR+0xdc>
    38b4:	9a 8b       	std	Y+18, r25	; 0x12
    38b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ba:	9c 89       	ldd	r25, Y+20	; 0x14
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	9c 8b       	std	Y+20, r25	; 0x14
    38c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c2:	8b 89       	ldd	r24, Y+19	; 0x13
    38c4:	9c 89       	ldd	r25, Y+20	; 0x14
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	69 f7       	brne	.-38     	; 0x38a4 <ESP8266_VidSendPR+0xd0>
    38ca:	14 c0       	rjmp	.+40     	; 0x38f4 <ESP8266_VidSendPR+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38cc:	6d 89       	ldd	r22, Y+21	; 0x15
    38ce:	7e 89       	ldd	r23, Y+22	; 0x16
    38d0:	8f 89       	ldd	r24, Y+23	; 0x17
    38d2:	98 8d       	ldd	r25, Y+24	; 0x18
    38d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	9c 8b       	std	Y+20, r25	; 0x14
    38de:	8b 8b       	std	Y+19, r24	; 0x13
    38e0:	8b 89       	ldd	r24, Y+19	; 0x13
    38e2:	9c 89       	ldd	r25, Y+20	; 0x14
    38e4:	98 8b       	std	Y+16, r25	; 0x10
    38e6:	8f 87       	std	Y+15, r24	; 0x0f
    38e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ea:	98 89       	ldd	r25, Y+16	; 0x10
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	f1 f7       	brne	.-4      	; 0x38ec <ESP8266_VidSendPR+0x118>
    38f0:	98 8b       	std	Y+16, r25	; 0x10
    38f2:	8f 87       	std	Y+15, r24	; 0x0f
	}
	_delay_ms( 10 );

	USART_SendStr( (uint8 *) "GET http://eece2022.freevar.com/TransmitterPR.php?data=");
    38f4:	80 ee       	ldi	r24, 0xE0	; 224
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
	USART_SendInteger(Copy_u8PR);
    38fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38fe:	88 2f       	mov	r24, r24
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	0e 94 55 13 	call	0x26aa	; 0x26aa <USART_SendInteger>
	USART_SendStr((uint8 *)"\r\n");
    3906:	82 ef       	ldi	r24, 0xF2	; 242
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0e 94 2c 13 	call	0x2658	; 0x2658 <USART_SendStr>
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	aa e7       	ldi	r26, 0x7A	; 122
    3914:	b4 e4       	ldi	r27, 0x44	; 68
    3916:	8b 87       	std	Y+11, r24	; 0x0b
    3918:	9c 87       	std	Y+12, r25	; 0x0c
    391a:	ad 87       	std	Y+13, r26	; 0x0d
    391c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3920:	7c 85       	ldd	r23, Y+12	; 0x0c
    3922:	8d 85       	ldd	r24, Y+13	; 0x0d
    3924:	9e 85       	ldd	r25, Y+14	; 0x0e
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	4a ef       	ldi	r20, 0xFA	; 250
    392c:	54 e4       	ldi	r21, 0x44	; 68
    392e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	8f 83       	std	Y+7, r24	; 0x07
    3938:	98 87       	std	Y+8, r25	; 0x08
    393a:	a9 87       	std	Y+9, r26	; 0x09
    393c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    393e:	6f 81       	ldd	r22, Y+7	; 0x07
    3940:	78 85       	ldd	r23, Y+8	; 0x08
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e8       	ldi	r20, 0x80	; 128
    394c:	5f e3       	ldi	r21, 0x3F	; 63
    394e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3952:	88 23       	and	r24, r24
    3954:	2c f4       	brge	.+10     	; 0x3960 <ESP8266_VidSendPR+0x18c>
		__ticks = 1;
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	9e 83       	std	Y+6, r25	; 0x06
    395c:	8d 83       	std	Y+5, r24	; 0x05
    395e:	3f c0       	rjmp	.+126    	; 0x39de <ESP8266_VidSendPR+0x20a>
	else if (__tmp > 65535)
    3960:	6f 81       	ldd	r22, Y+7	; 0x07
    3962:	78 85       	ldd	r23, Y+8	; 0x08
    3964:	89 85       	ldd	r24, Y+9	; 0x09
    3966:	9a 85       	ldd	r25, Y+10	; 0x0a
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	3f ef       	ldi	r19, 0xFF	; 255
    396c:	4f e7       	ldi	r20, 0x7F	; 127
    396e:	57 e4       	ldi	r21, 0x47	; 71
    3970:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3974:	18 16       	cp	r1, r24
    3976:	4c f5       	brge	.+82     	; 0x39ca <ESP8266_VidSendPR+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3978:	6b 85       	ldd	r22, Y+11	; 0x0b
    397a:	7c 85       	ldd	r23, Y+12	; 0x0c
    397c:	8d 85       	ldd	r24, Y+13	; 0x0d
    397e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e2       	ldi	r20, 0x20	; 32
    3986:	51 e4       	ldi	r21, 0x41	; 65
    3988:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	bc 01       	movw	r22, r24
    3992:	cd 01       	movw	r24, r26
    3994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9e 83       	std	Y+6, r25	; 0x06
    399e:	8d 83       	std	Y+5, r24	; 0x05
    39a0:	0f c0       	rjmp	.+30     	; 0x39c0 <ESP8266_VidSendPR+0x1ec>
    39a2:	88 ec       	ldi	r24, 0xC8	; 200
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	9c 83       	std	Y+4, r25	; 0x04
    39a8:	8b 83       	std	Y+3, r24	; 0x03
    39aa:	8b 81       	ldd	r24, Y+3	; 0x03
    39ac:	9c 81       	ldd	r25, Y+4	; 0x04
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <ESP8266_VidSendPR+0x1da>
    39b2:	9c 83       	std	Y+4, r25	; 0x04
    39b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b6:	8d 81       	ldd	r24, Y+5	; 0x05
    39b8:	9e 81       	ldd	r25, Y+6	; 0x06
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	9e 83       	std	Y+6, r25	; 0x06
    39be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c0:	8d 81       	ldd	r24, Y+5	; 0x05
    39c2:	9e 81       	ldd	r25, Y+6	; 0x06
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	69 f7       	brne	.-38     	; 0x39a2 <ESP8266_VidSendPR+0x1ce>
    39c8:	14 c0       	rjmp	.+40     	; 0x39f2 <ESP8266_VidSendPR+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ca:	6f 81       	ldd	r22, Y+7	; 0x07
    39cc:	78 85       	ldd	r23, Y+8	; 0x08
    39ce:	89 85       	ldd	r24, Y+9	; 0x09
    39d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	9e 83       	std	Y+6, r25	; 0x06
    39dc:	8d 83       	std	Y+5, r24	; 0x05
    39de:	8d 81       	ldd	r24, Y+5	; 0x05
    39e0:	9e 81       	ldd	r25, Y+6	; 0x06
    39e2:	9a 83       	std	Y+2, r25	; 0x02
    39e4:	89 83       	std	Y+1, r24	; 0x01
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
    39e8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <ESP8266_VidSendPR+0x216>
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    39f2:	6d 96       	adiw	r28, 0x1d	; 29
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <__udivmodhi4>:
    3a04:	aa 1b       	sub	r26, r26
    3a06:	bb 1b       	sub	r27, r27
    3a08:	51 e1       	ldi	r21, 0x11	; 17
    3a0a:	07 c0       	rjmp	.+14     	; 0x3a1a <__udivmodhi4_ep>

00003a0c <__udivmodhi4_loop>:
    3a0c:	aa 1f       	adc	r26, r26
    3a0e:	bb 1f       	adc	r27, r27
    3a10:	a6 17       	cp	r26, r22
    3a12:	b7 07       	cpc	r27, r23
    3a14:	10 f0       	brcs	.+4      	; 0x3a1a <__udivmodhi4_ep>
    3a16:	a6 1b       	sub	r26, r22
    3a18:	b7 0b       	sbc	r27, r23

00003a1a <__udivmodhi4_ep>:
    3a1a:	88 1f       	adc	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	5a 95       	dec	r21
    3a20:	a9 f7       	brne	.-22     	; 0x3a0c <__udivmodhi4_loop>
    3a22:	80 95       	com	r24
    3a24:	90 95       	com	r25
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	08 95       	ret

00003a2c <__prologue_saves__>:
    3a2c:	2f 92       	push	r2
    3a2e:	3f 92       	push	r3
    3a30:	4f 92       	push	r4
    3a32:	5f 92       	push	r5
    3a34:	6f 92       	push	r6
    3a36:	7f 92       	push	r7
    3a38:	8f 92       	push	r8
    3a3a:	9f 92       	push	r9
    3a3c:	af 92       	push	r10
    3a3e:	bf 92       	push	r11
    3a40:	cf 92       	push	r12
    3a42:	df 92       	push	r13
    3a44:	ef 92       	push	r14
    3a46:	ff 92       	push	r15
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	ca 1b       	sub	r28, r26
    3a56:	db 0b       	sbc	r29, r27
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	de bf       	out	0x3e, r29	; 62
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	cd bf       	out	0x3d, r28	; 61
    3a62:	09 94       	ijmp

00003a64 <__epilogue_restores__>:
    3a64:	2a 88       	ldd	r2, Y+18	; 0x12
    3a66:	39 88       	ldd	r3, Y+17	; 0x11
    3a68:	48 88       	ldd	r4, Y+16	; 0x10
    3a6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a70:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a72:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a74:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a76:	b9 84       	ldd	r11, Y+9	; 0x09
    3a78:	c8 84       	ldd	r12, Y+8	; 0x08
    3a7a:	df 80       	ldd	r13, Y+7	; 0x07
    3a7c:	ee 80       	ldd	r14, Y+6	; 0x06
    3a7e:	fd 80       	ldd	r15, Y+5	; 0x05
    3a80:	0c 81       	ldd	r16, Y+4	; 0x04
    3a82:	1b 81       	ldd	r17, Y+3	; 0x03
    3a84:	aa 81       	ldd	r26, Y+2	; 0x02
    3a86:	b9 81       	ldd	r27, Y+1	; 0x01
    3a88:	ce 0f       	add	r28, r30
    3a8a:	d1 1d       	adc	r29, r1
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	ed 01       	movw	r28, r26
    3a98:	08 95       	ret

00003a9a <memset>:
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	01 c0       	rjmp	.+2      	; 0x3aa0 <memset+0x6>
    3a9e:	6d 93       	st	X+, r22
    3aa0:	41 50       	subi	r20, 0x01	; 1
    3aa2:	50 40       	sbci	r21, 0x00	; 0
    3aa4:	e0 f7       	brcc	.-8      	; 0x3a9e <memset+0x4>
    3aa6:	08 95       	ret

00003aa8 <itoa>:
    3aa8:	fb 01       	movw	r30, r22
    3aaa:	9f 01       	movw	r18, r30
    3aac:	e8 94       	clt
    3aae:	42 30       	cpi	r20, 0x02	; 2
    3ab0:	c4 f0       	brlt	.+48     	; 0x3ae2 <itoa+0x3a>
    3ab2:	45 32       	cpi	r20, 0x25	; 37
    3ab4:	b4 f4       	brge	.+44     	; 0x3ae2 <itoa+0x3a>
    3ab6:	4a 30       	cpi	r20, 0x0A	; 10
    3ab8:	29 f4       	brne	.+10     	; 0x3ac4 <itoa+0x1c>
    3aba:	97 fb       	bst	r25, 7
    3abc:	1e f4       	brtc	.+6      	; 0x3ac4 <itoa+0x1c>
    3abe:	90 95       	com	r25
    3ac0:	81 95       	neg	r24
    3ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac4:	64 2f       	mov	r22, r20
    3ac6:	77 27       	eor	r23, r23
    3ac8:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodhi4>
    3acc:	80 5d       	subi	r24, 0xD0	; 208
    3ace:	8a 33       	cpi	r24, 0x3A	; 58
    3ad0:	0c f0       	brlt	.+2      	; 0x3ad4 <itoa+0x2c>
    3ad2:	89 5d       	subi	r24, 0xD9	; 217
    3ad4:	81 93       	st	Z+, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	a1 f7       	brne	.-24     	; 0x3ac4 <itoa+0x1c>
    3adc:	16 f4       	brtc	.+4      	; 0x3ae2 <itoa+0x3a>
    3ade:	5d e2       	ldi	r21, 0x2D	; 45
    3ae0:	51 93       	st	Z+, r21
    3ae2:	10 82       	st	Z, r1
    3ae4:	c9 01       	movw	r24, r18
    3ae6:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <strrev>

00003aea <strrev>:
    3aea:	dc 01       	movw	r26, r24
    3aec:	fc 01       	movw	r30, r24
    3aee:	67 2f       	mov	r22, r23
    3af0:	71 91       	ld	r23, Z+
    3af2:	77 23       	and	r23, r23
    3af4:	e1 f7       	brne	.-8      	; 0x3aee <strrev+0x4>
    3af6:	32 97       	sbiw	r30, 0x02	; 2
    3af8:	04 c0       	rjmp	.+8      	; 0x3b02 <strrev+0x18>
    3afa:	7c 91       	ld	r23, X
    3afc:	6d 93       	st	X+, r22
    3afe:	70 83       	st	Z, r23
    3b00:	62 91       	ld	r22, -Z
    3b02:	ae 17       	cp	r26, r30
    3b04:	bf 07       	cpc	r27, r31
    3b06:	c8 f3       	brcs	.-14     	; 0x3afa <strrev+0x10>
    3b08:	08 95       	ret

00003b0a <_exit>:
    3b0a:	f8 94       	cli

00003b0c <__stop_program>:
    3b0c:	ff cf       	rjmp	.-2      	; 0x3b0c <__stop_program>
