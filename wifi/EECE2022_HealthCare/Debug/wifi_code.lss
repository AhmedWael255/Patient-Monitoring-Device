
wifi_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00004362  000043d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002d0c  00000000  00000000  00004580  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c8b  00000000  00000000  0000728c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00008057  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000081c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000acfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000baa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000bc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000be95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <main>
      7a:	0c 94 af 21 	jmp	0x435e	; 0x435e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa ef       	ldi	r26, 0xFA	; 250
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a ef       	ldi	r24, 0xFA	; 250
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8d 21 	jmp	0x431a	; 0x431a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 99 21 	jmp	0x4332	; 0x4332 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 81 21 	jmp	0x4302	; 0x4302 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 9d 21 	jmp	0x433a	; 0x433a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_SetPinDir>:
//***********************************************************
//*********************Driver functions**********************
//***********************************************************

void DIO_SetPinDir(u8 port_indx, u8 pin_indx, u8 dir) // set pin direction (input,output) for AVR
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if(dir==INPUT)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	88 23       	and	r24, r24
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_SetPinDir+0x22>
     b56:	74 c0       	rjmp	.+232    	; 0xc40 <DIO_SetPinDir+0x10a>
	{
		switch(port_indx)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	59 f1       	breq	.+86     	; 0xbc2 <DIO_SetPinDir+0x8c>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_SetPinDir+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	69 f0       	breq	.+26     	; 0xb98 <DIO_SetPinDir+0x62>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <DIO_SetPinDir+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	89 f1       	breq	.+98     	; 0xbec <DIO_SetPinDir+0xb6>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <DIO_SetPinDir+0x60>
     b94:	40 c0       	rjmp	.+128    	; 0xc16 <DIO_SetPinDir+0xe0>
     b96:	c6 c0       	rjmp	.+396    	; 0xd24 <DIO_SetPinDir+0x1ee>
		{
		case PORTA:
			CLEAR_BIT(DDRA_REG,pin_indx);
     b98:	aa e3       	ldi	r26, 0x3A	; 58
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	48 2f       	mov	r20, r24
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 2e       	mov	r0, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_SetPinDir+0x80>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	0a 94       	dec	r0
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_SetPinDir+0x7c>
     bba:	80 95       	com	r24
     bbc:	84 23       	and	r24, r20
     bbe:	8c 93       	st	X, r24
     bc0:	b1 c0       	rjmp	.+354    	; 0xd24 <DIO_SetPinDir+0x1ee>
			break;
		case PORTB:
			CLEAR_BIT(DDRB_REG,pin_indx);
     bc2:	a7 e3       	ldi	r26, 0x37	; 55
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e3       	ldi	r30, 0x37	; 55
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	48 2f       	mov	r20, r24
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 2e       	mov	r0, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_SetPinDir+0xaa>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	0a 94       	dec	r0
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_SetPinDir+0xa6>
     be4:	80 95       	com	r24
     be6:	84 23       	and	r24, r20
     be8:	8c 93       	st	X, r24
     bea:	9c c0       	rjmp	.+312    	; 0xd24 <DIO_SetPinDir+0x1ee>
			break;
		case PORTC:
			CLEAR_BIT(DDRC_REG,pin_indx);
     bec:	a4 e3       	ldi	r26, 0x34	; 52
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e4 e3       	ldi	r30, 0x34	; 52
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_SetPinDir+0xd4>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_SetPinDir+0xd0>
     c0e:	80 95       	com	r24
     c10:	84 23       	and	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	87 c0       	rjmp	.+270    	; 0xd24 <DIO_SetPinDir+0x1ee>
			break;
		case PORTD:
			CLEAR_BIT(DDRD_REG,pin_indx);
     c16:	a1 e3       	ldi	r26, 0x31	; 49
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e1 e3       	ldi	r30, 0x31	; 49
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_SetPinDir+0xfe>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_SetPinDir+0xfa>
     c38:	80 95       	com	r24
     c3a:	84 23       	and	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	72 c0       	rjmp	.+228    	; 0xd24 <DIO_SetPinDir+0x1ee>
			break;
		}
	}
	else if(dir==OUTPUT)
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	09 f0       	breq	.+2      	; 0xc48 <DIO_SetPinDir+0x112>
     c46:	6e c0       	rjmp	.+220    	; 0xd24 <DIO_SetPinDir+0x1ee>
		{
			switch(port_indx)
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3d 83       	std	Y+5, r19	; 0x05
     c50:	2c 83       	std	Y+4, r18	; 0x04
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	9d 81       	ldd	r25, Y+5	; 0x05
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	49 f1       	breq	.+82     	; 0xcae <DIO_SetPinDir+0x178>
     c5c:	2c 81       	ldd	r18, Y+4	; 0x04
     c5e:	3d 81       	ldd	r19, Y+5	; 0x05
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	2c f4       	brge	.+10     	; 0xc70 <DIO_SetPinDir+0x13a>
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	9d 81       	ldd	r25, Y+5	; 0x05
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	61 f0       	breq	.+24     	; 0xc86 <DIO_SetPinDir+0x150>
     c6e:	5a c0       	rjmp	.+180    	; 0xd24 <DIO_SetPinDir+0x1ee>
     c70:	2c 81       	ldd	r18, Y+4	; 0x04
     c72:	3d 81       	ldd	r19, Y+5	; 0x05
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	71 f1       	breq	.+92     	; 0xcd6 <DIO_SetPinDir+0x1a0>
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	91 05       	cpc	r25, r1
     c82:	e9 f1       	breq	.+122    	; 0xcfe <DIO_SetPinDir+0x1c8>
     c84:	4f c0       	rjmp	.+158    	; 0xd24 <DIO_SetPinDir+0x1ee>
			{
			case PORTA:
				SET_BIT(DDRA_REG,pin_indx);
     c86:	aa e3       	ldi	r26, 0x3A	; 58
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e3       	ldi	r30, 0x3A	; 58
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_SetPinDir+0x16e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_SetPinDir+0x16a>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	3b c0       	rjmp	.+118    	; 0xd24 <DIO_SetPinDir+0x1ee>
				break;
			case PORTB:
				SET_BIT(DDRB_REG,pin_indx);
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_SetPinDir+0x196>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_SetPinDir+0x192>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	27 c0       	rjmp	.+78     	; 0xd24 <DIO_SetPinDir+0x1ee>
				break;
			case PORTC:
				SET_BIT(DDRC_REG,pin_indx);
     cd6:	a4 e3       	ldi	r26, 0x34	; 52
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e4 e3       	ldi	r30, 0x34	; 52
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_SetPinDir+0x1be>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_SetPinDir+0x1ba>
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	13 c0       	rjmp	.+38     	; 0xd24 <DIO_SetPinDir+0x1ee>
				break;
			case PORTD:
				SET_BIT(DDRD_REG,pin_indx);
     cfe:	a1 e3       	ldi	r26, 0x31	; 49
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e1 e3       	ldi	r30, 0x31	; 49
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_SetPinDir+0x1e6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_SetPinDir+0x1e2>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
				break;
			}
		}

}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <DIO_SetPinVal>:
void DIO_SetPinVal(u8 port_indx, u8 pin_indx, u8 val) // set pin value (high,low) value for AVR
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
     d4e:	4b 83       	std	Y+3, r20	; 0x03
	if(val==LOW)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <DIO_SetPinVal+0x22>
     d56:	73 c0       	rjmp	.+230    	; 0xe3e <DIO_SetPinVal+0x108>
		{
			switch(port_indx)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3f 83       	std	Y+7, r19	; 0x07
     d60:	2e 83       	std	Y+6, r18	; 0x06
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	59 f1       	breq	.+86     	; 0xdc2 <DIO_SetPinVal+0x8c>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <DIO_SetPinVal+0x4a>
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f0       	breq	.+26     	; 0xd98 <DIO_SetPinVal+0x62>
     d7e:	5f c0       	rjmp	.+190    	; 0xe3e <DIO_SetPinVal+0x108>
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	89 f1       	breq	.+98     	; 0xdec <DIO_SetPinVal+0xb6>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <DIO_SetPinVal+0x60>
     d94:	40 c0       	rjmp	.+128    	; 0xe16 <DIO_SetPinVal+0xe0>
     d96:	53 c0       	rjmp	.+166    	; 0xe3e <DIO_SetPinVal+0x108>
			{
			case PORTA:
				CLEAR_BIT(PORTA_REG,pin_indx);
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_SetPinVal+0x80>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_SetPinVal+0x7c>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	3e c0       	rjmp	.+124    	; 0xe3e <DIO_SetPinVal+0x108>
				break;
			case PORTB:
				CLEAR_BIT(PORTB_REG,pin_indx);
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_SetPinVal+0xaa>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_SetPinVal+0xa6>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	29 c0       	rjmp	.+82     	; 0xe3e <DIO_SetPinVal+0x108>
				break;
			case PORTC:
				CLEAR_BIT(PORTC_REG,pin_indx);
     dec:	a5 e3       	ldi	r26, 0x35	; 53
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e5 e3       	ldi	r30, 0x35	; 53
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_SetPinVal+0xd4>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_SetPinVal+0xd0>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <DIO_SetPinVal+0x108>
				break;
			case PORTD:
				CLEAR_BIT(PORTD_REG,pin_indx);
     e16:	a2 e3       	ldi	r26, 0x32	; 50
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e2 e3       	ldi	r30, 0x32	; 50
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_SetPinVal+0xfe>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_SetPinVal+0xfa>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
				break;
			}
		}
		if(val==HIGH)
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	09 f0       	breq	.+2      	; 0xe46 <DIO_SetPinVal+0x110>
     e44:	6e c0       	rjmp	.+220    	; 0xf22 <DIO_SetPinVal+0x1ec>
			{
			switch(port_indx)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3d 83       	std	Y+5, r19	; 0x05
     e4e:	2c 83       	std	Y+4, r18	; 0x04
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	91 05       	cpc	r25, r1
     e58:	49 f1       	breq	.+82     	; 0xeac <DIO_SetPinVal+0x176>
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	2c f4       	brge	.+10     	; 0xe6e <DIO_SetPinVal+0x138>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	61 f0       	breq	.+24     	; 0xe84 <DIO_SetPinVal+0x14e>
     e6c:	5a c0       	rjmp	.+180    	; 0xf22 <DIO_SetPinVal+0x1ec>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	71 f1       	breq	.+92     	; 0xed4 <DIO_SetPinVal+0x19e>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	e9 f1       	breq	.+122    	; 0xefc <DIO_SetPinVal+0x1c6>
     e82:	4f c0       	rjmp	.+158    	; 0xf22 <DIO_SetPinVal+0x1ec>
			{
			case PORTA:
				SET_BIT(PORTA_REG,pin_indx);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_SetPinVal+0x16c>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_SetPinVal+0x168>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	3b c0       	rjmp	.+118    	; 0xf22 <DIO_SetPinVal+0x1ec>
				break;
			case PORTB:
				SET_BIT(PORTB_REG,pin_indx);
     eac:	a8 e3       	ldi	r26, 0x38	; 56
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e8 e3       	ldi	r30, 0x38	; 56
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_SetPinVal+0x194>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_SetPinVal+0x190>
     ece:	84 2b       	or	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	27 c0       	rjmp	.+78     	; 0xf22 <DIO_SetPinVal+0x1ec>
				break;
			case PORTC:
				SET_BIT(PORTC_REG,pin_indx);
     ed4:	a5 e3       	ldi	r26, 0x35	; 53
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e3       	ldi	r30, 0x35	; 53
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_SetPinVal+0x1bc>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_SetPinVal+0x1b8>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	13 c0       	rjmp	.+38     	; 0xf22 <DIO_SetPinVal+0x1ec>
				break;
			case PORTD:
				SET_BIT(PORTD_REG,pin_indx);
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_SetPinVal+0x1e4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_SetPinVal+0x1e0>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
				break;
			}
		}

}
     f22:	27 96       	adiw	r28, 0x07	; 7
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <DIO_SetPortDir>:
void DIO_SetPortDir(u8 port_indx, u8 dir) // set port direction (input,output) for AVR
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <DIO_SetPortDir+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DIO_SetPortDir+0x8>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_SetPortDir+0xa>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	6a 83       	std	Y+2, r22	; 0x02
	if(dir==INPUT)
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 23       	and	r24, r24
     f4a:	71 f5       	brne	.+92     	; 0xfa8 <DIO_SetPortDir+0x74>
	{
		switch (port_indx)
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3e 83       	std	Y+6, r19	; 0x06
     f54:	2d 83       	std	Y+5, r18	; 0x05
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	91 05       	cpc	r25, r1
     f5e:	c9 f0       	breq	.+50     	; 0xf92 <DIO_SetPortDir+0x5e>
     f60:	2d 81       	ldd	r18, Y+5	; 0x05
     f62:	3e 81       	ldd	r19, Y+6	; 0x06
     f64:	22 30       	cpi	r18, 0x02	; 2
     f66:	31 05       	cpc	r19, r1
     f68:	2c f4       	brge	.+10     	; 0xf74 <DIO_SetPortDir+0x40>
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	61 f0       	breq	.+24     	; 0xf8a <DIO_SetPortDir+0x56>
     f72:	1a c0       	rjmp	.+52     	; 0xfa8 <DIO_SetPortDir+0x74>
     f74:	2d 81       	ldd	r18, Y+5	; 0x05
     f76:	3e 81       	ldd	r19, Y+6	; 0x06
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	71 f0       	breq	.+28     	; 0xf9a <DIO_SetPortDir+0x66>
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	91 05       	cpc	r25, r1
     f86:	69 f0       	breq	.+26     	; 0xfa2 <DIO_SetPortDir+0x6e>
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <DIO_SetPortDir+0x74>
		{
		case PORTA:
			CLEAR_BYTE(DDRA_REG);
     f8a:	ea e3       	ldi	r30, 0x3A	; 58
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	10 82       	st	Z, r1
     f90:	0b c0       	rjmp	.+22     	; 0xfa8 <DIO_SetPortDir+0x74>
			break;
		case PORTB:
			CLEAR_BYTE(DDRB_REG);
     f92:	e7 e3       	ldi	r30, 0x37	; 55
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	10 82       	st	Z, r1
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <DIO_SetPortDir+0x74>
			break;
		case PORTC:
			CLEAR_BYTE(DDRC_REG);
     f9a:	e4 e3       	ldi	r30, 0x34	; 52
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	10 82       	st	Z, r1
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <DIO_SetPortDir+0x74>
			break;
		case PORTD:
			CLEAR_BYTE(DDRD_REG);
     fa2:	e1 e3       	ldi	r30, 0x31	; 49
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	10 82       	st	Z, r1
			break;
		}
	}
	if(dir==OUTPUT)
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 f5       	brne	.+100    	; 0x1012 <DIO_SetPortDir+0xde>
	{
		switch (port_indx)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3c 83       	std	Y+4, r19	; 0x04
     fb6:	2b 83       	std	Y+3, r18	; 0x03
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	d1 f0       	breq	.+52     	; 0xff6 <DIO_SetPortDir+0xc2>
     fc2:	2b 81       	ldd	r18, Y+3	; 0x03
     fc4:	3c 81       	ldd	r19, Y+4	; 0x04
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <DIO_SetPortDir+0xa2>
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	61 f0       	breq	.+24     	; 0xfec <DIO_SetPortDir+0xb8>
     fd4:	1e c0       	rjmp	.+60     	; 0x1012 <DIO_SetPortDir+0xde>
     fd6:	2b 81       	ldd	r18, Y+3	; 0x03
     fd8:	3c 81       	ldd	r19, Y+4	; 0x04
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	81 f0       	breq	.+32     	; 0x1000 <DIO_SetPortDir+0xcc>
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	81 f0       	breq	.+32     	; 0x100a <DIO_SetPortDir+0xd6>
     fea:	13 c0       	rjmp	.+38     	; 0x1012 <DIO_SetPortDir+0xde>
		{
			case PORTA:
				SET_BYTE(DDRA_REG);
     fec:	ea e3       	ldi	r30, 0x3A	; 58
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	80 83       	st	Z, r24
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <DIO_SetPortDir+0xde>
				break;
			case PORTB:
				SET_BYTE(DDRB_REG);
     ff6:	e7 e3       	ldi	r30, 0x37	; 55
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <DIO_SetPortDir+0xde>
				break;
			case PORTC:
				SET_BYTE(DDRC_REG);
    1000:	e4 e3       	ldi	r30, 0x34	; 52
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	80 83       	st	Z, r24
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <DIO_SetPortDir+0xde>
				break;
			case PORTD:
				SET_BYTE(DDRD_REG);
    100a:	e1 e3       	ldi	r30, 0x31	; 49
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	80 83       	st	Z, r24
				break;
				}
	}
}
    1012:	26 96       	adiw	r28, 0x06	; 6
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <DIO_SetPortVal>:
void DIO_SetPortVal(u8 port_indx, u8 val) // set port value (high,low) for AVR
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <DIO_SetPortVal+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <DIO_SetPortVal+0x8>
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_SetPortVal+0xa>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	6a 83       	std	Y+2, r22	; 0x02
	if(val==LOW)
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	88 23       	and	r24, r24
    103a:	71 f5       	brne	.+92     	; 0x1098 <DIO_SetPortVal+0x74>
		{
			switch (port_indx)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3e 83       	std	Y+6, r19	; 0x06
    1044:	2d 83       	std	Y+5, r18	; 0x05
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	c9 f0       	breq	.+50     	; 0x1082 <DIO_SetPortVal+0x5e>
    1050:	2d 81       	ldd	r18, Y+5	; 0x05
    1052:	3e 81       	ldd	r19, Y+6	; 0x06
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <DIO_SetPortVal+0x40>
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	61 f0       	breq	.+24     	; 0x107a <DIO_SetPortVal+0x56>
    1062:	1a c0       	rjmp	.+52     	; 0x1098 <DIO_SetPortVal+0x74>
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	71 f0       	breq	.+28     	; 0x108a <DIO_SetPortVal+0x66>
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	69 f0       	breq	.+26     	; 0x1092 <DIO_SetPortVal+0x6e>
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <DIO_SetPortVal+0x74>
			{
			case PORTA:
				CLEAR_BYTE(PORTA_REG);
    107a:	eb e3       	ldi	r30, 0x3B	; 59
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	10 82       	st	Z, r1
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <DIO_SetPortVal+0x74>
				break;
			case PORTB:
				CLEAR_BYTE(PORTB_REG);
    1082:	e8 e3       	ldi	r30, 0x38	; 56
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	10 82       	st	Z, r1
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <DIO_SetPortVal+0x74>
				break;
			case PORTC:
				CLEAR_BYTE(PORTC_REG);
    108a:	e5 e3       	ldi	r30, 0x35	; 53
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	10 82       	st	Z, r1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <DIO_SetPortVal+0x74>
				break;
			case PORTD:
				CLEAR_BYTE(PORTD_REG);
    1092:	e2 e3       	ldi	r30, 0x32	; 50
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	10 82       	st	Z, r1
				break;
			}
		}
		if(val==HIGH)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 f5       	brne	.+100    	; 0x1102 <DIO_SetPortVal+0xde>
		{
			switch (port_indx)
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3c 83       	std	Y+4, r19	; 0x04
    10a6:	2b 83       	std	Y+3, r18	; 0x03
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	91 05       	cpc	r25, r1
    10b0:	d1 f0       	breq	.+52     	; 0x10e6 <DIO_SetPortVal+0xc2>
    10b2:	2b 81       	ldd	r18, Y+3	; 0x03
    10b4:	3c 81       	ldd	r19, Y+4	; 0x04
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <DIO_SetPortVal+0xa2>
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	61 f0       	breq	.+24     	; 0x10dc <DIO_SetPortVal+0xb8>
    10c4:	1e c0       	rjmp	.+60     	; 0x1102 <DIO_SetPortVal+0xde>
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	81 f0       	breq	.+32     	; 0x10f0 <DIO_SetPortVal+0xcc>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <DIO_SetPortVal+0xd6>
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <DIO_SetPortVal+0xde>
			{
				case PORTA:
					SET_BYTE(PORTA_REG);
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	80 83       	st	Z, r24
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <DIO_SetPortVal+0xde>
					break;
				case PORTB:
					SET_BYTE(PORTB_REG);
    10e6:	e8 e3       	ldi	r30, 0x38	; 56
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	80 83       	st	Z, r24
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <DIO_SetPortVal+0xde>
					break;
				case PORTC:
					SET_BYTE(PORTC_REG);
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	80 83       	st	Z, r24
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <DIO_SetPortVal+0xde>
					break;
				case PORTD:
					SET_BYTE(PORTD_REG);
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	80 83       	st	Z, r24
					break;
			}
		}
}
    1102:	26 96       	adiw	r28, 0x06	; 6
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <DIO_TogglePinVal>:

void DIO_TogglePinVal(u8 port_indx, u8 pin_indx) // toggles the pin value from high to low or vice versa
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_TogglePinVal+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_TogglePinVal+0x8>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_indx)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3c 83       	std	Y+4, r19	; 0x04
    112c:	2b 83       	std	Y+3, r18	; 0x03
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	49 f1       	breq	.+82     	; 0x118a <DIO_TogglePinVal+0x76>
    1138:	2b 81       	ldd	r18, Y+3	; 0x03
    113a:	3c 81       	ldd	r19, Y+4	; 0x04
    113c:	22 30       	cpi	r18, 0x02	; 2
    113e:	31 05       	cpc	r19, r1
    1140:	2c f4       	brge	.+10     	; 0x114c <DIO_TogglePinVal+0x38>
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	61 f0       	breq	.+24     	; 0x1162 <DIO_TogglePinVal+0x4e>
    114a:	5a c0       	rjmp	.+180    	; 0x1200 <DIO_TogglePinVal+0xec>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	71 f1       	breq	.+92     	; 0x11b2 <DIO_TogglePinVal+0x9e>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	91 05       	cpc	r25, r1
    115e:	e9 f1       	breq	.+122    	; 0x11da <DIO_TogglePinVal+0xc6>
    1160:	4f c0       	rjmp	.+158    	; 0x1200 <DIO_TogglePinVal+0xec>
	{
	case PORTA:
		TOGGLE_BIT(PORTA_REG,pin_indx);
    1162:	ab e3       	ldi	r26, 0x3B	; 59
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	eb e3       	ldi	r30, 0x3B	; 59
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_TogglePinVal+0x6c>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_TogglePinVal+0x68>
    1184:	84 27       	eor	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	3b c0       	rjmp	.+118    	; 0x1200 <DIO_TogglePinVal+0xec>
		break;
	case PORTB:
		TOGGLE_BIT(PORTB_REG,pin_indx);
    118a:	a8 e3       	ldi	r26, 0x38	; 56
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e8 e3       	ldi	r30, 0x38	; 56
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_TogglePinVal+0x94>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_TogglePinVal+0x90>
    11ac:	84 27       	eor	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	27 c0       	rjmp	.+78     	; 0x1200 <DIO_TogglePinVal+0xec>
		break;
	case PORTC:
		TOGGLE_BIT(PORTC_REG,pin_indx);
    11b2:	a5 e3       	ldi	r26, 0x35	; 53
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e3       	ldi	r30, 0x35	; 53
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_TogglePinVal+0xbc>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_TogglePinVal+0xb8>
    11d4:	84 27       	eor	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	13 c0       	rjmp	.+38     	; 0x1200 <DIO_TogglePinVal+0xec>
		break;
	case PORTD:
		TOGGLE_BIT(PORTD_REG,pin_indx);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_TogglePinVal+0xe4>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_TogglePinVal+0xe0>
    11fc:	84 27       	eor	r24, r20
    11fe:	8c 93       	st	X, r24
		break;
	}
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <DIO_SetNippleDir>:


void DIO_SetNippleDir(u8 port_indx, u8 nipple, u8 dir) // sets 4 pins direction
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	2b 97       	sbiw	r28, 0x0b	; 11
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	6a 83       	std	Y+2, r22	; 0x02
    1226:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==HIGH)
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	09 f0       	breq	.+2      	; 0x1230 <DIO_SetNippleDir+0x22>
    122e:	85 c0       	rjmp	.+266    	; 0x133a <DIO_SetNippleDir+0x12c>
	{
		if(dir==OUTPUT)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	09 f0       	breq	.+2      	; 0x1238 <DIO_SetNippleDir+0x2a>
    1236:	3e c0       	rjmp	.+124    	; 0x12b4 <DIO_SetNippleDir+0xa6>
		{
			switch(port_indx)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3b 87       	std	Y+11, r19	; 0x0b
    1240:	2a 87       	std	Y+10, r18	; 0x0a
    1242:	8a 85       	ldd	r24, Y+10	; 0x0a
    1244:	9b 85       	ldd	r25, Y+11	; 0x0b
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	e9 f0       	breq	.+58     	; 0x1286 <DIO_SetNippleDir+0x78>
    124c:	2a 85       	ldd	r18, Y+10	; 0x0a
    124e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <DIO_SetNippleDir+0x52>
    1256:	8a 85       	ldd	r24, Y+10	; 0x0a
    1258:	9b 85       	ldd	r25, Y+11	; 0x0b
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <DIO_SetNippleDir+0x68>
    125e:	2a c0       	rjmp	.+84     	; 0x12b4 <DIO_SetNippleDir+0xa6>
    1260:	2a 85       	ldd	r18, Y+10	; 0x0a
    1262:	3b 85       	ldd	r19, Y+11	; 0x0b
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	b1 f0       	breq	.+44     	; 0x1296 <DIO_SetNippleDir+0x88>
    126a:	8a 85       	ldd	r24, Y+10	; 0x0a
    126c:	9b 85       	ldd	r25, Y+11	; 0x0b
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	c9 f0       	breq	.+50     	; 0x12a6 <DIO_SetNippleDir+0x98>
    1274:	1f c0       	rjmp	.+62     	; 0x12b4 <DIO_SetNippleDir+0xa6>
			{
			case PORTA:
				DDRA_REG|=0b11110000;
    1276:	aa e3       	ldi	r26, 0x3A	; 58
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	ea e3       	ldi	r30, 0x3A	; 58
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 6f       	ori	r24, 0xF0	; 240
    1282:	8c 93       	st	X, r24
    1284:	17 c0       	rjmp	.+46     	; 0x12b4 <DIO_SetNippleDir+0xa6>
				break;
			case PORTB:
				DDRB_REG|=0b11110000;
    1286:	a7 e3       	ldi	r26, 0x37	; 55
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 6f       	ori	r24, 0xF0	; 240
    1292:	8c 93       	st	X, r24
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <DIO_SetNippleDir+0xa6>
				break;
			case PORTC:
				DDRC_REG|=0b11110000;
    1296:	a4 e3       	ldi	r26, 0x34	; 52
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e4 e3       	ldi	r30, 0x34	; 52
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 6f       	ori	r24, 0xF0	; 240
    12a2:	8c 93       	st	X, r24
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <DIO_SetNippleDir+0xa6>
				break;
			case PORTD:
				DDRD_REG|=0b11110000;
    12a6:	a1 e3       	ldi	r26, 0x31	; 49
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e1 e3       	ldi	r30, 0x31	; 49
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 6f       	ori	r24, 0xF0	; 240
    12b2:	8c 93       	st	X, r24
				break;
			}
		}
		if(dir==INPUT)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 23       	and	r24, r24
    12b8:	09 f0       	breq	.+2      	; 0x12bc <DIO_SetNippleDir+0xae>
    12ba:	c7 c0       	rjmp	.+398    	; 0x144a <DIO_SetNippleDir+0x23c>
		{
			switch(port_indx)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	39 87       	std	Y+9, r19	; 0x09
    12c4:	28 87       	std	Y+8, r18	; 0x08
    12c6:	88 85       	ldd	r24, Y+8	; 0x08
    12c8:	99 85       	ldd	r25, Y+9	; 0x09
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	e9 f0       	breq	.+58     	; 0x130a <DIO_SetNippleDir+0xfc>
    12d0:	28 85       	ldd	r18, Y+8	; 0x08
    12d2:	39 85       	ldd	r19, Y+9	; 0x09
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_SetNippleDir+0xd6>
    12da:	88 85       	ldd	r24, Y+8	; 0x08
    12dc:	99 85       	ldd	r25, Y+9	; 0x09
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <DIO_SetNippleDir+0xec>
    12e2:	b3 c0       	rjmp	.+358    	; 0x144a <DIO_SetNippleDir+0x23c>
    12e4:	28 85       	ldd	r18, Y+8	; 0x08
    12e6:	39 85       	ldd	r19, Y+9	; 0x09
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	b1 f0       	breq	.+44     	; 0x131a <DIO_SetNippleDir+0x10c>
    12ee:	88 85       	ldd	r24, Y+8	; 0x08
    12f0:	99 85       	ldd	r25, Y+9	; 0x09
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	c9 f0       	breq	.+50     	; 0x132a <DIO_SetNippleDir+0x11c>
    12f8:	a8 c0       	rjmp	.+336    	; 0x144a <DIO_SetNippleDir+0x23c>
			{
			case PORTA:
				DDRA_REG&=0b00001111;
    12fa:	aa e3       	ldi	r26, 0x3A	; 58
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ea e3       	ldi	r30, 0x3A	; 58
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 70       	andi	r24, 0x0F	; 15
    1306:	8c 93       	st	X, r24
    1308:	a0 c0       	rjmp	.+320    	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			case PORTB:
				DDRB_REG&=0b00001111;
    130a:	a7 e3       	ldi	r26, 0x37	; 55
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e7 e3       	ldi	r30, 0x37	; 55
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8f 70       	andi	r24, 0x0F	; 15
    1316:	8c 93       	st	X, r24
    1318:	98 c0       	rjmp	.+304    	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			case PORTC:
				DDRC_REG&=0b00001111;
    131a:	a4 e3       	ldi	r26, 0x34	; 52
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e4 e3       	ldi	r30, 0x34	; 52
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 70       	andi	r24, 0x0F	; 15
    1326:	8c 93       	st	X, r24
    1328:	90 c0       	rjmp	.+288    	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			case PORTD:
				DDRD_REG&=0b00001111;
    132a:	a1 e3       	ldi	r26, 0x31	; 49
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e1 e3       	ldi	r30, 0x31	; 49
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8f 70       	andi	r24, 0x0F	; 15
    1336:	8c 93       	st	X, r24
    1338:	88 c0       	rjmp	.+272    	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			}
		}
	}
	else if(nipple==LOW)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	88 23       	and	r24, r24
    133e:	09 f0       	breq	.+2      	; 0x1342 <DIO_SetNippleDir+0x134>
    1340:	84 c0       	rjmp	.+264    	; 0x144a <DIO_SetNippleDir+0x23c>
	{
		if(dir==OUTPUT)
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	09 f0       	breq	.+2      	; 0x134a <DIO_SetNippleDir+0x13c>
    1348:	3e c0       	rjmp	.+124    	; 0x13c6 <DIO_SetNippleDir+0x1b8>
		{
			switch(port_indx)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3f 83       	std	Y+7, r19	; 0x07
    1352:	2e 83       	std	Y+6, r18	; 0x06
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	e9 f0       	breq	.+58     	; 0x1398 <DIO_SetNippleDir+0x18a>
    135e:	2e 81       	ldd	r18, Y+6	; 0x06
    1360:	3f 81       	ldd	r19, Y+7	; 0x07
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <DIO_SetNippleDir+0x164>
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	61 f0       	breq	.+24     	; 0x1388 <DIO_SetNippleDir+0x17a>
    1370:	2a c0       	rjmp	.+84     	; 0x13c6 <DIO_SetNippleDir+0x1b8>
    1372:	2e 81       	ldd	r18, Y+6	; 0x06
    1374:	3f 81       	ldd	r19, Y+7	; 0x07
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	b1 f0       	breq	.+44     	; 0x13a8 <DIO_SetNippleDir+0x19a>
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	9f 81       	ldd	r25, Y+7	; 0x07
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	c9 f0       	breq	.+50     	; 0x13b8 <DIO_SetNippleDir+0x1aa>
    1386:	1f c0       	rjmp	.+62     	; 0x13c6 <DIO_SetNippleDir+0x1b8>
			{
			case PORTA:
				DDRA_REG|=0b00001111;
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 60       	ori	r24, 0x0F	; 15
    1394:	8c 93       	st	X, r24
    1396:	17 c0       	rjmp	.+46     	; 0x13c6 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTB:
				DDRB_REG|=0b00001111;
    1398:	a7 e3       	ldi	r26, 0x37	; 55
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e7 e3       	ldi	r30, 0x37	; 55
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 60       	ori	r24, 0x0F	; 15
    13a4:	8c 93       	st	X, r24
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTC:
				DDRC_REG|=0b00001111;
    13a8:	a4 e3       	ldi	r26, 0x34	; 52
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e4 e3       	ldi	r30, 0x34	; 52
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 60       	ori	r24, 0x0F	; 15
    13b4:	8c 93       	st	X, r24
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTD:
				DDRD_REG|=0b00001111;
    13b8:	a1 e3       	ldi	r26, 0x31	; 49
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8f 60       	ori	r24, 0x0F	; 15
    13c4:	8c 93       	st	X, r24
				break;
			}
		}
		if(dir==INPUT)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 23       	and	r24, r24
    13ca:	09 f0       	breq	.+2      	; 0x13ce <DIO_SetNippleDir+0x1c0>
    13cc:	3e c0       	rjmp	.+124    	; 0x144a <DIO_SetNippleDir+0x23c>
		{
			switch(port_indx)
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3d 83       	std	Y+5, r19	; 0x05
    13d6:	2c 83       	std	Y+4, r18	; 0x04
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	e9 f0       	breq	.+58     	; 0x141c <DIO_SetNippleDir+0x20e>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_SetNippleDir+0x1e8>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 f0       	breq	.+24     	; 0x140c <DIO_SetNippleDir+0x1fe>
    13f4:	2a c0       	rjmp	.+84     	; 0x144a <DIO_SetNippleDir+0x23c>
    13f6:	2c 81       	ldd	r18, Y+4	; 0x04
    13f8:	3d 81       	ldd	r19, Y+5	; 0x05
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	b1 f0       	breq	.+44     	; 0x142c <DIO_SetNippleDir+0x21e>
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	c9 f0       	breq	.+50     	; 0x143c <DIO_SetNippleDir+0x22e>
    140a:	1f c0       	rjmp	.+62     	; 0x144a <DIO_SetNippleDir+0x23c>
			{
			case PORTA:
				DDRA_REG&=0b11110000;
    140c:	aa e3       	ldi	r26, 0x3A	; 58
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 7f       	andi	r24, 0xF0	; 240
    1418:	8c 93       	st	X, r24
    141a:	17 c0       	rjmp	.+46     	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			case PORTB:
				DDRB_REG&=0b11110000;
    141c:	a7 e3       	ldi	r26, 0x37	; 55
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e7 e3       	ldi	r30, 0x37	; 55
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 7f       	andi	r24, 0xF0	; 240
    1428:	8c 93       	st	X, r24
    142a:	0f c0       	rjmp	.+30     	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			case PORTC:
				DDRC_REG&=0b11110000;
    142c:	a4 e3       	ldi	r26, 0x34	; 52
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e4 e3       	ldi	r30, 0x34	; 52
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	80 7f       	andi	r24, 0xF0	; 240
    1438:	8c 93       	st	X, r24
    143a:	07 c0       	rjmp	.+14     	; 0x144a <DIO_SetNippleDir+0x23c>
				break;
			case PORTD:
				DDRD_REG&=0b11110000;
    143c:	a1 e3       	ldi	r26, 0x31	; 49
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e1 e3       	ldi	r30, 0x31	; 49
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 7f       	andi	r24, 0xF0	; 240
    1448:	8c 93       	st	X, r24
				break;
			}

		}
	}
}
    144a:	2b 96       	adiw	r28, 0x0b	; 11
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_SetNippleVal>:

void DIO_SetNippleVal(u8 port_indx, u8 nipple, u8 val) // to set 4 pins value
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	2b 97       	sbiw	r28, 0x0b	; 11
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
    1474:	4b 83       	std	Y+3, r20	; 0x03
if(nipple==HIGH)
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	09 f0       	breq	.+2      	; 0x147e <DIO_SetNippleVal+0x22>
    147c:	85 c0       	rjmp	.+266    	; 0x1588 <DIO_SetNippleVal+0x12c>
{
	if(val==HIGH)
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	09 f0       	breq	.+2      	; 0x1486 <DIO_SetNippleVal+0x2a>
    1484:	3e c0       	rjmp	.+124    	; 0x1502 <DIO_SetNippleVal+0xa6>
	{
		switch(port_indx)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3b 87       	std	Y+11, r19	; 0x0b
    148e:	2a 87       	std	Y+10, r18	; 0x0a
    1490:	8a 85       	ldd	r24, Y+10	; 0x0a
    1492:	9b 85       	ldd	r25, Y+11	; 0x0b
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	e9 f0       	breq	.+58     	; 0x14d4 <DIO_SetNippleVal+0x78>
    149a:	2a 85       	ldd	r18, Y+10	; 0x0a
    149c:	3b 85       	ldd	r19, Y+11	; 0x0b
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DIO_SetNippleVal+0x52>
    14a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <DIO_SetNippleVal+0x68>
    14ac:	2a c0       	rjmp	.+84     	; 0x1502 <DIO_SetNippleVal+0xa6>
    14ae:	2a 85       	ldd	r18, Y+10	; 0x0a
    14b0:	3b 85       	ldd	r19, Y+11	; 0x0b
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	b1 f0       	breq	.+44     	; 0x14e4 <DIO_SetNippleVal+0x88>
    14b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	c9 f0       	breq	.+50     	; 0x14f4 <DIO_SetNippleVal+0x98>
    14c2:	1f c0       	rjmp	.+62     	; 0x1502 <DIO_SetNippleVal+0xa6>
		{
		case PORTA:
			PORTA_REG|=0b11110000;
    14c4:	ab e3       	ldi	r26, 0x3B	; 59
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 6f       	ori	r24, 0xF0	; 240
    14d0:	8c 93       	st	X, r24
    14d2:	17 c0       	rjmp	.+46     	; 0x1502 <DIO_SetNippleVal+0xa6>
			break;
		case PORTB:
			PORTB_REG|=0b11110000;
    14d4:	a8 e3       	ldi	r26, 0x38	; 56
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 6f       	ori	r24, 0xF0	; 240
    14e0:	8c 93       	st	X, r24
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <DIO_SetNippleVal+0xa6>
			break;
		case PORTC:
			PORTC_REG|=0b11110000;
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 6f       	ori	r24, 0xF0	; 240
    14f0:	8c 93       	st	X, r24
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <DIO_SetNippleVal+0xa6>
			break;
		case PORTD:
			PORTD_REG|=0b11110000;
    14f4:	a2 e3       	ldi	r26, 0x32	; 50
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e2 e3       	ldi	r30, 0x32	; 50
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 6f       	ori	r24, 0xF0	; 240
    1500:	8c 93       	st	X, r24
			break;
		}
	}
	if(val==LOW)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 23       	and	r24, r24
    1506:	09 f0       	breq	.+2      	; 0x150a <DIO_SetNippleVal+0xae>
    1508:	c7 c0       	rjmp	.+398    	; 0x1698 <DIO_SetNippleVal+0x23c>
	{
		switch(port_indx)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	39 87       	std	Y+9, r19	; 0x09
    1512:	28 87       	std	Y+8, r18	; 0x08
    1514:	88 85       	ldd	r24, Y+8	; 0x08
    1516:	99 85       	ldd	r25, Y+9	; 0x09
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	e9 f0       	breq	.+58     	; 0x1558 <DIO_SetNippleVal+0xfc>
    151e:	28 85       	ldd	r18, Y+8	; 0x08
    1520:	39 85       	ldd	r19, Y+9	; 0x09
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <DIO_SetNippleVal+0xd6>
    1528:	88 85       	ldd	r24, Y+8	; 0x08
    152a:	99 85       	ldd	r25, Y+9	; 0x09
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <DIO_SetNippleVal+0xec>
    1530:	b3 c0       	rjmp	.+358    	; 0x1698 <DIO_SetNippleVal+0x23c>
    1532:	28 85       	ldd	r18, Y+8	; 0x08
    1534:	39 85       	ldd	r19, Y+9	; 0x09
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	b1 f0       	breq	.+44     	; 0x1568 <DIO_SetNippleVal+0x10c>
    153c:	88 85       	ldd	r24, Y+8	; 0x08
    153e:	99 85       	ldd	r25, Y+9	; 0x09
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	c9 f0       	breq	.+50     	; 0x1578 <DIO_SetNippleVal+0x11c>
    1546:	a8 c0       	rjmp	.+336    	; 0x1698 <DIO_SetNippleVal+0x23c>
		{
		case PORTA:
			PORTA_REG&=0b00001111;
    1548:	ab e3       	ldi	r26, 0x3B	; 59
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e3       	ldi	r30, 0x3B	; 59
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 70       	andi	r24, 0x0F	; 15
    1554:	8c 93       	st	X, r24
    1556:	a0 c0       	rjmp	.+320    	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		case PORTB:
			PORTB_REG&=0b00001111;
    1558:	a8 e3       	ldi	r26, 0x38	; 56
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e3       	ldi	r30, 0x38	; 56
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 70       	andi	r24, 0x0F	; 15
    1564:	8c 93       	st	X, r24
    1566:	98 c0       	rjmp	.+304    	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		case PORTC:
			PORTC_REG&=0b00001111;
    1568:	a5 e3       	ldi	r26, 0x35	; 53
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e3       	ldi	r30, 0x35	; 53
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 70       	andi	r24, 0x0F	; 15
    1574:	8c 93       	st	X, r24
    1576:	90 c0       	rjmp	.+288    	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		case PORTD:
			PORTD_REG&=0b00001111;
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8f 70       	andi	r24, 0x0F	; 15
    1584:	8c 93       	st	X, r24
    1586:	88 c0       	rjmp	.+272    	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		}
	}
}
else if(nipple==LOW)
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	88 23       	and	r24, r24
    158c:	09 f0       	breq	.+2      	; 0x1590 <DIO_SetNippleVal+0x134>
    158e:	84 c0       	rjmp	.+264    	; 0x1698 <DIO_SetNippleVal+0x23c>
{
	if(val==HIGH)
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	09 f0       	breq	.+2      	; 0x1598 <DIO_SetNippleVal+0x13c>
    1596:	3e c0       	rjmp	.+124    	; 0x1614 <DIO_SetNippleVal+0x1b8>
	{
		switch(port_indx)
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3f 83       	std	Y+7, r19	; 0x07
    15a0:	2e 83       	std	Y+6, r18	; 0x06
    15a2:	8e 81       	ldd	r24, Y+6	; 0x06
    15a4:	9f 81       	ldd	r25, Y+7	; 0x07
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	e9 f0       	breq	.+58     	; 0x15e6 <DIO_SetNippleVal+0x18a>
    15ac:	2e 81       	ldd	r18, Y+6	; 0x06
    15ae:	3f 81       	ldd	r19, Y+7	; 0x07
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <DIO_SetNippleVal+0x164>
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <DIO_SetNippleVal+0x17a>
    15be:	2a c0       	rjmp	.+84     	; 0x1614 <DIO_SetNippleVal+0x1b8>
    15c0:	2e 81       	ldd	r18, Y+6	; 0x06
    15c2:	3f 81       	ldd	r19, Y+7	; 0x07
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	b1 f0       	breq	.+44     	; 0x15f6 <DIO_SetNippleVal+0x19a>
    15ca:	8e 81       	ldd	r24, Y+6	; 0x06
    15cc:	9f 81       	ldd	r25, Y+7	; 0x07
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	c9 f0       	breq	.+50     	; 0x1606 <DIO_SetNippleVal+0x1aa>
    15d4:	1f c0       	rjmp	.+62     	; 0x1614 <DIO_SetNippleVal+0x1b8>
		{
		case PORTA:
			PORTA_REG|=0b00001111;
    15d6:	ab e3       	ldi	r26, 0x3B	; 59
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 60       	ori	r24, 0x0F	; 15
    15e2:	8c 93       	st	X, r24
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTB:
			PORTB_REG|=0b00001111;
    15e6:	a8 e3       	ldi	r26, 0x38	; 56
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e8 e3       	ldi	r30, 0x38	; 56
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 60       	ori	r24, 0x0F	; 15
    15f2:	8c 93       	st	X, r24
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTC:
			PORTC_REG|=0b00001111;
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8f 60       	ori	r24, 0x0F	; 15
    1602:	8c 93       	st	X, r24
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTD:
			PORTD_REG|=0b00001111;
    1606:	a2 e3       	ldi	r26, 0x32	; 50
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e2 e3       	ldi	r30, 0x32	; 50
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8f 60       	ori	r24, 0x0F	; 15
    1612:	8c 93       	st	X, r24
			break;
		}
	}
	if(val==LOW)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 23       	and	r24, r24
    1618:	09 f0       	breq	.+2      	; 0x161c <DIO_SetNippleVal+0x1c0>
    161a:	3e c0       	rjmp	.+124    	; 0x1698 <DIO_SetNippleVal+0x23c>
	{
		switch(port_indx)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3d 83       	std	Y+5, r19	; 0x05
    1624:	2c 83       	std	Y+4, r18	; 0x04
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	e9 f0       	breq	.+58     	; 0x166a <DIO_SetNippleVal+0x20e>
    1630:	2c 81       	ldd	r18, Y+4	; 0x04
    1632:	3d 81       	ldd	r19, Y+5	; 0x05
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <DIO_SetNippleVal+0x1e8>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 f0       	breq	.+24     	; 0x165a <DIO_SetNippleVal+0x1fe>
    1642:	2a c0       	rjmp	.+84     	; 0x1698 <DIO_SetNippleVal+0x23c>
    1644:	2c 81       	ldd	r18, Y+4	; 0x04
    1646:	3d 81       	ldd	r19, Y+5	; 0x05
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	b1 f0       	breq	.+44     	; 0x167a <DIO_SetNippleVal+0x21e>
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	c9 f0       	breq	.+50     	; 0x168a <DIO_SetNippleVal+0x22e>
    1658:	1f c0       	rjmp	.+62     	; 0x1698 <DIO_SetNippleVal+0x23c>
		{
		case PORTA:
			PORTA_REG&=0b11110000;
    165a:	ab e3       	ldi	r26, 0x3B	; 59
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	eb e3       	ldi	r30, 0x3B	; 59
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	80 7f       	andi	r24, 0xF0	; 240
    1666:	8c 93       	st	X, r24
    1668:	17 c0       	rjmp	.+46     	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		case PORTB:
			PORTB_REG&=0b11110000;
    166a:	a8 e3       	ldi	r26, 0x38	; 56
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 7f       	andi	r24, 0xF0	; 240
    1676:	8c 93       	st	X, r24
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		case PORTC:
			PORTC_REG&=0b11110000;
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 7f       	andi	r24, 0xF0	; 240
    1686:	8c 93       	st	X, r24
    1688:	07 c0       	rjmp	.+14     	; 0x1698 <DIO_SetNippleVal+0x23c>
			break;
		case PORTD:
			PORTD_REG&=0b11110000;
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 7f       	andi	r24, 0xF0	; 240
    1696:	8c 93       	st	X, r24
		}

	}

	}
}
    1698:	2b 96       	adiw	r28, 0x0b	; 11
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <DIO_AssignPortVal>:

void DIO_AssignPortVal(u8 port_indx, u8 val) //assigns a value to a port
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <DIO_AssignPortVal+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_AssignPortVal+0x8>
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_indx)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3c 83       	std	Y+4, r19	; 0x04
    16c2:	2b 83       	std	Y+3, r18	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	d1 f0       	breq	.+52     	; 0x1702 <DIO_AssignPortVal+0x58>
    16ce:	2b 81       	ldd	r18, Y+3	; 0x03
    16d0:	3c 81       	ldd	r19, Y+4	; 0x04
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <DIO_AssignPortVal+0x38>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	61 f0       	breq	.+24     	; 0x16f8 <DIO_AssignPortVal+0x4e>
    16e0:	1e c0       	rjmp	.+60     	; 0x171e <DIO_AssignPortVal+0x74>
    16e2:	2b 81       	ldd	r18, Y+3	; 0x03
    16e4:	3c 81       	ldd	r19, Y+4	; 0x04
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	81 f0       	breq	.+32     	; 0x170c <DIO_AssignPortVal+0x62>
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <DIO_AssignPortVal+0x6c>
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <DIO_AssignPortVal+0x74>
	{
	case PORTA:
		PORTA_REG=val;
    16f8:	eb e3       	ldi	r30, 0x3B	; 59
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	80 83       	st	Z, r24
    1700:	0e c0       	rjmp	.+28     	; 0x171e <DIO_AssignPortVal+0x74>
		break;
	case PORTB:
		PORTB_REG=val;
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	80 83       	st	Z, r24
    170a:	09 c0       	rjmp	.+18     	; 0x171e <DIO_AssignPortVal+0x74>
		break;
	case PORTC:
		PORTC_REG=val;
    170c:	e5 e3       	ldi	r30, 0x35	; 53
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	04 c0       	rjmp	.+8      	; 0x171e <DIO_AssignPortVal+0x74>
		break;
	case PORTD:
		PORTD_REG=val;
    1716:	e2 e3       	ldi	r30, 0x32	; 50
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
		break;

	}
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <DIO_AssignNippleVal>:


void DIO_AssignNippleVal(u8 port_indx, u8 nipple, u8 val)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	27 97       	sbiw	r28, 0x07	; 7
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	6a 83       	std	Y+2, r22	; 0x02
    1744:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==HIGH)
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	09 f0       	breq	.+2      	; 0x174e <DIO_AssignNippleVal+0x22>
    174c:	7c c0       	rjmp	.+248    	; 0x1846 <DIO_AssignNippleVal+0x11a>
	{
		{
			switch(port_indx)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3f 83       	std	Y+7, r19	; 0x07
    1756:	2e 83       	std	Y+6, r18	; 0x06
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	9f 81       	ldd	r25, Y+7	; 0x07
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	69 f1       	breq	.+90     	; 0x17bc <DIO_AssignNippleVal+0x90>
    1762:	2e 81       	ldd	r18, Y+6	; 0x06
    1764:	3f 81       	ldd	r19, Y+7	; 0x07
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	2c f4       	brge	.+10     	; 0x1776 <DIO_AssignNippleVal+0x4a>
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f0       	breq	.+26     	; 0x178e <DIO_AssignNippleVal+0x62>
    1774:	e7 c0       	rjmp	.+462    	; 0x1944 <DIO_AssignNippleVal+0x218>
    1776:	2e 81       	ldd	r18, Y+6	; 0x06
    1778:	3f 81       	ldd	r19, Y+7	; 0x07
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	a9 f1       	breq	.+106    	; 0x17ea <DIO_AssignNippleVal+0xbe>
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	9f 81       	ldd	r25, Y+7	; 0x07
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <DIO_AssignNippleVal+0x60>
    178a:	46 c0       	rjmp	.+140    	; 0x1818 <DIO_AssignNippleVal+0xec>
    178c:	db c0       	rjmp	.+438    	; 0x1944 <DIO_AssignNippleVal+0x218>
			{
			case PORTA:
				ASSIGN_HIGH_NIBBLE(PORTA_REG,val);
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	80 7f       	andi	r24, 0xF0	; 240
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	ab e3       	ldi	r26, 0x3B	; 59
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	eb e3       	ldi	r30, 0x3B	; 59
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	90 81       	ld	r25, Z
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	89 2b       	or	r24, r25
    17a2:	8c 93       	st	X, r24
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	8f 60       	ori	r24, 0x0F	; 15
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	ab e3       	ldi	r26, 0x3B	; 59
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	90 81       	ld	r25, Z
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	89 23       	and	r24, r25
    17b8:	8c 93       	st	X, r24
    17ba:	c4 c0       	rjmp	.+392    	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			case PORTB:
				ASSIGN_HIGH_NIBBLE(PORTB_REG,val);
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	80 7f       	andi	r24, 0xF0	; 240
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	a8 e3       	ldi	r26, 0x38	; 56
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e8 e3       	ldi	r30, 0x38	; 56
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	90 81       	ld	r25, Z
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	89 2b       	or	r24, r25
    17d0:	8c 93       	st	X, r24
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	8f 60       	ori	r24, 0x0F	; 15
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    17d8:	a8 e3       	ldi	r26, 0x38	; 56
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e8 e3       	ldi	r30, 0x38	; 56
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	90 81       	ld	r25, Z
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	89 23       	and	r24, r25
    17e6:	8c 93       	st	X, r24
    17e8:	ad c0       	rjmp	.+346    	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			case PORTC:
				ASSIGN_HIGH_NIBBLE(PORTC_REG,val);
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	80 7f       	andi	r24, 0xF0	; 240
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	a5 e3       	ldi	r26, 0x35	; 53
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e5 e3       	ldi	r30, 0x35	; 53
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	90 81       	ld	r25, Z
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	89 2b       	or	r24, r25
    17fe:	8c 93       	st	X, r24
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	8f 60       	ori	r24, 0x0F	; 15
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	a5 e3       	ldi	r26, 0x35	; 53
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e3       	ldi	r30, 0x35	; 53
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	90 81       	ld	r25, Z
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	89 23       	and	r24, r25
    1814:	8c 93       	st	X, r24
    1816:	96 c0       	rjmp	.+300    	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			case PORTD:
				ASSIGN_HIGH_NIBBLE(PORTD_REG,val);
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	80 7f       	andi	r24, 0xF0	; 240
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	a2 e3       	ldi	r26, 0x32	; 50
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	90 81       	ld	r25, Z
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	89 2b       	or	r24, r25
    182c:	8c 93       	st	X, r24
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	8f 60       	ori	r24, 0x0F	; 15
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	a2 e3       	ldi	r26, 0x32	; 50
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e2 e3       	ldi	r30, 0x32	; 50
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	90 81       	ld	r25, Z
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	89 23       	and	r24, r25
    1842:	8c 93       	st	X, r24
    1844:	7f c0       	rjmp	.+254    	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			}
		}
	}
	else if(nipple==LOW)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	88 23       	and	r24, r24
    184a:	09 f0       	breq	.+2      	; 0x184e <DIO_AssignNippleVal+0x122>
    184c:	7b c0       	rjmp	.+246    	; 0x1944 <DIO_AssignNippleVal+0x218>
	{
			switch(port_indx)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3d 83       	std	Y+5, r19	; 0x05
    1856:	2c 83       	std	Y+4, r18	; 0x04
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	69 f1       	breq	.+90     	; 0x18bc <DIO_AssignNippleVal+0x190>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <DIO_AssignNippleVal+0x14a>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f0       	breq	.+26     	; 0x188e <DIO_AssignNippleVal+0x162>
    1874:	67 c0       	rjmp	.+206    	; 0x1944 <DIO_AssignNippleVal+0x218>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	a9 f1       	breq	.+106    	; 0x18ea <DIO_AssignNippleVal+0x1be>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <DIO_AssignNippleVal+0x160>
    188a:	46 c0       	rjmp	.+140    	; 0x1918 <DIO_AssignNippleVal+0x1ec>
    188c:	5b c0       	rjmp	.+182    	; 0x1944 <DIO_AssignNippleVal+0x218>
			{
			case PORTA:
				ASSIGN_LOW_NIBBLE(PORTA_REG,val);
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	8f 70       	andi	r24, 0x0F	; 15
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	90 81       	ld	r25, Z
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	89 2b       	or	r24, r25
    18a2:	8c 93       	st	X, r24
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	80 6f       	ori	r24, 0xF0	; 240
    18a8:	8b 83       	std	Y+3, r24	; 0x03
    18aa:	ab e3       	ldi	r26, 0x3B	; 59
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	90 81       	ld	r25, Z
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	89 23       	and	r24, r25
    18b8:	8c 93       	st	X, r24
    18ba:	44 c0       	rjmp	.+136    	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			case PORTB:
				ASSIGN_LOW_NIBBLE(PORTB_REG,val);
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	8f 70       	andi	r24, 0x0F	; 15
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	a8 e3       	ldi	r26, 0x38	; 56
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e8 e3       	ldi	r30, 0x38	; 56
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	90 81       	ld	r25, Z
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	89 2b       	or	r24, r25
    18d0:	8c 93       	st	X, r24
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	80 6f       	ori	r24, 0xF0	; 240
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    18d8:	a8 e3       	ldi	r26, 0x38	; 56
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e8 e3       	ldi	r30, 0x38	; 56
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	90 81       	ld	r25, Z
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	89 23       	and	r24, r25
    18e6:	8c 93       	st	X, r24
    18e8:	2d c0       	rjmp	.+90     	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			case PORTC:
				ASSIGN_LOW_NIBBLE(PORTC_REG,val);
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    18f0:	a5 e3       	ldi	r26, 0x35	; 53
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e5 e3       	ldi	r30, 0x35	; 53
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	90 81       	ld	r25, Z
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	89 2b       	or	r24, r25
    18fe:	8c 93       	st	X, r24
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	80 6f       	ori	r24, 0xF0	; 240
    1904:	8b 83       	std	Y+3, r24	; 0x03
    1906:	a5 e3       	ldi	r26, 0x35	; 53
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e3       	ldi	r30, 0x35	; 53
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	90 81       	ld	r25, Z
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	89 23       	and	r24, r25
    1914:	8c 93       	st	X, r24
    1916:	16 c0       	rjmp	.+44     	; 0x1944 <DIO_AssignNippleVal+0x218>
				break;
			case PORTD:
				ASSIGN_LOW_NIBBLE(PORTD_REG,val);
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	8f 70       	andi	r24, 0x0F	; 15
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	a2 e3       	ldi	r26, 0x32	; 50
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	90 81       	ld	r25, Z
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	89 2b       	or	r24, r25
    192c:	8c 93       	st	X, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	80 6f       	ori	r24, 0xF0	; 240
    1932:	8b 83       	std	Y+3, r24	; 0x03
    1934:	a2 e3       	ldi	r26, 0x32	; 50
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e2 e3       	ldi	r30, 0x32	; 50
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	90 81       	ld	r25, Z
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	89 23       	and	r24, r25
    1942:	8c 93       	st	X, r24
				break;
			}
		}
	}
    1944:	27 96       	adiw	r28, 0x07	; 7
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <DIO_GetPinVal>:


u8 DIO_GetPinVal(u8 port_indx, u8 pin_indx) // get pin value (high,low) from a pin for AVR
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <DIO_GetPinVal+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <DIO_GetPinVal+0x8>
    195e:	0f 92       	push	r0
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	8a 83       	std	Y+2, r24	; 0x02
    1966:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
    1968:	19 82       	std	Y+1, r1	; 0x01
	switch(port_indx)
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	3d 83       	std	Y+5, r19	; 0x05
    1972:	2c 83       	std	Y+4, r18	; 0x04
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	91 05       	cpc	r25, r1
    197c:	39 f1       	breq	.+78     	; 0x19cc <DIO_GetPinVal+0x76>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	2c f4       	brge	.+10     	; 0x1992 <DIO_GetPinVal+0x3c>
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	61 f0       	breq	.+24     	; 0x19a8 <DIO_GetPinVal+0x52>
    1990:	52 c0       	rjmp	.+164    	; 0x1a36 <DIO_GetPinVal+0xe0>
    1992:	2c 81       	ldd	r18, Y+4	; 0x04
    1994:	3d 81       	ldd	r19, Y+5	; 0x05
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	51 f1       	breq	.+84     	; 0x19f0 <DIO_GetPinVal+0x9a>
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	9d 81       	ldd	r25, Y+5	; 0x05
    19a0:	83 30       	cpi	r24, 0x03	; 3
    19a2:	91 05       	cpc	r25, r1
    19a4:	b9 f1       	breq	.+110    	; 0x1a14 <DIO_GetPinVal+0xbe>
    19a6:	47 c0       	rjmp	.+142    	; 0x1a36 <DIO_GetPinVal+0xe0>
	{
	case PORTA:
		pin_value=(PINA_REG)&(1<<pin_indx);
    19a8:	e9 e3       	ldi	r30, 0x39	; 57
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_GetPinVal+0x6c>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <DIO_GetPinVal+0x68>
    19c6:	84 23       	and	r24, r20
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	35 c0       	rjmp	.+106    	; 0x1a36 <DIO_GetPinVal+0xe0>
		break;
	case PORTB:
		pin_value=(PINB_REG)&(1<<pin_indx);
    19cc:	e6 e3       	ldi	r30, 0x36	; 54
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <DIO_GetPinVal+0x90>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <DIO_GetPinVal+0x8c>
    19ea:	84 23       	and	r24, r20
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	23 c0       	rjmp	.+70     	; 0x1a36 <DIO_GetPinVal+0xe0>
		break;
	case PORTC:
		pin_value=(PINC_REG)&(1<<pin_indx);
    19f0:	e3 e3       	ldi	r30, 0x33	; 51
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_GetPinVal+0xb4>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_GetPinVal+0xb0>
    1a0e:	84 23       	and	r24, r20
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	11 c0       	rjmp	.+34     	; 0x1a36 <DIO_GetPinVal+0xe0>
		break;
	case PORTD:
		pin_value=(PIND_REG)&(1<<pin_indx);
    1a14:	e0 e3       	ldi	r30, 0x30	; 48
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_GetPinVal+0xd8>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_GetPinVal+0xd4>
    1a32:	84 23       	and	r24, r20
    1a34:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return pin_value;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <USART_inti>:
#include "USART_interface.h"
#include "USART_config.h"
#include "USART_priv.h"

void USART_inti() //initialization of USART com. protocol
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_val=0;
    1a52:	19 82       	std	Y+1, r1	; 0x01
		CLEAR_BIT(UCSRB,UCSZ2);
		SET_BIT(UCSRC_val,UCSZ1);
		CLEAR_BIT(UCSRC_val,UCSZ0);
		CLEAR_BIT(UCSRC_val,URSEL);
	#elif (DATA_BITS == 8)
		CLEAR_BIT(UCSRB,UCSZ2);
    1a54:	aa e2       	ldi	r26, 0x2A	; 42
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ea e2       	ldi	r30, 0x2A	; 42
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8b 7f       	andi	r24, 0xFB	; 251
    1a60:	8c 93       	st	X, r24
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	86 68       	ori	r24, 0x86	; 134
    1a66:	89 83       	std	Y+1, r24	; 0x01
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	#endif

	//choosing stop bits
	#if (STOP_BITS == 1)
		CLEAR_BIT(UCSRC_val,USBS);
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	87 7f       	andi	r24, 0xF7	; 247
    1a6c:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,USBS);
	#endif

	//choosing parity bit
	#if(PARITY_BITS == DISABLED)
		CLEAR_BIT(UCSRC_val,UPM1);
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	8f 7d       	andi	r24, 0xDF	; 223
    1a72:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,UPM0);
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	8f 7e       	andi	r24, 0xEF	; 239
    1a78:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//choosing asynchronous or synchronous
	#if SYNC_MODE
		SET_BIT(UCSRC_val,UMSEL);
	#else
		CLEAR_BIT(UCSRC_val,UMSEL);
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	8f 7b       	andi	r24, 0xBF	; 191
    1a7e:	89 83       	std	Y+1, r24	; 0x01

	//choosing interrupts
	#if (RX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,RXCIE);
	#else
		CLEAR_BIT(UCSRB,RXCIE);
    1a80:	aa e2       	ldi	r26, 0x2A	; 42
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ea e2       	ldi	r30, 0x2A	; 42
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8f 77       	andi	r24, 0x7F	; 127
    1a8c:	8c 93       	st	X, r24
	#endif

	#if(TX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,TXCIE);
	#else
		CLEAR_BIT(UCSRB,TXCIE);
    1a8e:	aa e2       	ldi	r26, 0x2A	; 42
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	ea e2       	ldi	r30, 0x2A	; 42
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 7b       	andi	r24, 0xBF	; 191
    1a9a:	8c 93       	st	X, r24
	#endif

	#if(UDR_EMPTY_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,UDRIE);
	#else
		CLEAR_BIT(UCSRB,UDRIE);
    1a9c:	aa e2       	ldi	r26, 0x2A	; 42
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	ea e2       	ldi	r30, 0x2A	; 42
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 7d       	andi	r24, 0xDF	; 223
    1aa8:	8c 93       	st	X, r24
	#endif

	//enabling Tx and Rx
	#if(RX_ENABLE)
		SET_BIT(UCSRB,RXEN);
    1aaa:	aa e2       	ldi	r26, 0x2A	; 42
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	ea e2       	ldi	r30, 0x2A	; 42
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 61       	ori	r24, 0x10	; 16
    1ab6:	8c 93       	st	X, r24
	#else
		CLEAR_BIT(UCSRB,RXEN);
	#endif

	#if(TX_ENABLE)
		SET_BIT(UCSRB,TXEN);
    1ab8:	aa e2       	ldi	r26, 0x2A	; 42
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ea e2       	ldi	r30, 0x2A	; 42
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 60       	ori	r24, 0x08	; 8
    1ac4:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,TXEN);
	#endif

	//choosing baud rate

	UBRRL=51;
    1ac6:	e9 e2       	ldi	r30, 0x29	; 41
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	83 e3       	ldi	r24, 0x33	; 51
    1acc:	80 83       	st	Z, r24
	UBRRH=0;
    1ace:	e0 e4       	ldi	r30, 0x40	; 64
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	10 82       	st	Z, r1

	//assigning UCSRC value into UCSRC register
	UCSRC=UCSRC_val;
    1ad4:	e0 e4       	ldi	r30, 0x40	; 64
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	80 83       	st	Z, r24
}
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <USART_ReceiveDataPolling>:


u8 USART_ReceiveDataPolling() // receive data polling on RXC flag
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	//waiting for data to be sent and UDR Rx buffer to be filled
	while((GET_BIT(UCSRA,RXC))==0);
    1aec:	eb e2       	ldi	r30, 0x2B	; 43
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	88 23       	and	r24, r24
    1af4:	dc f7       	brge	.-10     	; 0x1aec <USART_ReceiveDataPolling+0x8>

	//returning data
	return UDR;
    1af6:	ec e2       	ldi	r30, 0x2C	; 44
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <USART_ReceiveDataINT>:

u8 USART_ReceiveDataINT() // receive data with RXC interrupt, WARNING ENABLE RXC INT
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	//returning data
	return UDR;
    1b0a:	ec e2       	ldi	r30, 0x2C	; 44
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
}
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <USART_SendDataPolling>:


void USART_SendDataPolling(u8 data) // send data polling on UDRE flag
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	0f 92       	push	r0
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
	//waiting to UDR Tx buffer to be empty
	while((GET_BIT(UCSRA,UDRE))==0);
    1b22:	eb e2       	ldi	r30, 0x2B	; 43
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	82 95       	swap	r24
    1b2a:	86 95       	lsr	r24
    1b2c:	87 70       	andi	r24, 0x07	; 7
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	90 70       	andi	r25, 0x00	; 0
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	a1 f3       	breq	.-24     	; 0x1b22 <USART_SendDataPolling+0xc>

	//sending data
	UDR=data;
    1b3a:	ec e2       	ldi	r30, 0x2C	; 44
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	80 83       	st	Z, r24
}
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <USART_ReceieveStr>:

void USART_ReceieveStr(u8* str_data, u8 number) // receive number of elements
{
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <USART_ReceieveStr+0xa>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <USART_ReceieveStr+0xc>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	9b 83       	std	Y+3, r25	; 0x03
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
    1b5e:	6c 83       	std	Y+4, r22	; 0x04
	u8 counter;
	for(counter=0;counter<number;counter++)
    1b60:	19 82       	std	Y+1, r1	; 0x01
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <USART_ReceieveStr+0x38>
	{
		str_data[counter]=USART_ReceiveDataPolling();
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6e:	8c 01       	movw	r16, r24
    1b70:	02 0f       	add	r16, r18
    1b72:	13 1f       	adc	r17, r19
    1b74:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <USART_ReceiveDataPolling>
    1b78:	f8 01       	movw	r30, r16
    1b7a:	80 83       	st	Z, r24
}

void USART_ReceieveStr(u8* str_data, u8 number) // receive number of elements
{
	u8 counter;
	for(counter=0;counter<number;counter++)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	99 81       	ldd	r25, Y+1	; 0x01
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	98 17       	cp	r25, r24
    1b88:	68 f3       	brcs	.-38     	; 0x1b64 <USART_ReceieveStr+0x1a>
	{
		str_data[counter]=USART_ReceiveDataPolling();
	}
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	08 95       	ret

00001b9c <USART_SendDataINT>:

void USART_SendDataINT(u8 data) // send data with UDRE interrupt, WARNING ENABLE UDRE INT
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	//sending data
	UDR=data;
    1ba8:	ec e2       	ldi	r30, 0x2C	; 44
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	80 83       	st	Z, r24
}
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <USART_SendStr>:

void USART_SendStr(u8* str_data)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <USART_SendStr+0x6>
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	9b 83       	std	Y+3, r25	; 0x03
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	0e c0       	rjmp	.+28     	; 0x1be8 <USART_SendStr+0x30>
	while(str_data[counter]!='\0')
	{
		USART_SendDataPolling(str_data[counter]);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	80 81       	ld	r24, Z
    1bde:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <USART_SendDataPolling>
		counter++;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendStr(u8* str_data)
{
	u8 counter=0;
	while(str_data[counter]!='\0')
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	e2 0f       	add	r30, r18
    1bf6:	f3 1f       	adc	r31, r19
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 23       	and	r24, r24
    1bfc:	39 f7       	brne	.-50     	; 0x1bcc <USART_SendStr+0x14>
	{
		USART_SendDataPolling(str_data[counter]);
		counter++;
	}
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <USART_SendInteger>:

void USART_SendInteger(volatile u16 Copy_u16Number) //this function to print direct integer number
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	2d 97       	sbiw	r28, 0x0d	; 13
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	98 87       	std	Y+8, r25	; 0x08
    1c20:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8arrStrNumber[5]={10,10,10,10,10};
    1c22:	ce 01       	movw	r24, r28
    1c24:	02 96       	adiw	r24, 0x02	; 2
    1c26:	9a 87       	std	Y+10, r25	; 0x0a
    1c28:	89 87       	std	Y+9, r24	; 0x09
    1c2a:	e2 e0       	ldi	r30, 0x02	; 2
    1c2c:	f2 e0       	ldi	r31, 0x02	; 2
    1c2e:	fc 87       	std	Y+12, r31	; 0x0c
    1c30:	eb 87       	std	Y+11, r30	; 0x0b
    1c32:	f5 e0       	ldi	r31, 0x05	; 5
    1c34:	fd 87       	std	Y+13, r31	; 0x0d
    1c36:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c38:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c3a:	00 80       	ld	r0, Z
    1c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	8b 87       	std	Y+11, r24	; 0x0b
    1c46:	e9 85       	ldd	r30, Y+9	; 0x09
    1c48:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c4a:	00 82       	st	Z, r0
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	9a 87       	std	Y+10, r25	; 0x0a
    1c54:	89 87       	std	Y+9, r24	; 0x09
    1c56:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c58:	91 50       	subi	r25, 0x01	; 1
    1c5a:	9d 87       	std	Y+13, r25	; 0x0d
    1c5c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c5e:	ee 23       	and	r30, r30
    1c60:	51 f7       	brne	.-44     	; 0x1c36 <USART_SendInteger+0x2c>
	u8 Local_u8Counter=4;
    1c62:	84 e0       	ldi	r24, 0x04	; 4
    1c64:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16Number==0)
    1c66:	8f 81       	ldd	r24, Y+7	; 0x07
    1c68:	98 85       	ldd	r25, Y+8	; 0x08
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	d9 f5       	brne	.+118    	; 0x1ce4 <USART_SendInteger+0xda>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	e8 2f       	mov	r30, r24
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8f 81       	ldd	r24, Y+7	; 0x07
    1c76:	98 85       	ldd	r25, Y+8	; 0x08
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodhi4>
    1c82:	28 2f       	mov	r18, r24
    1c84:	ce 01       	movw	r24, r28
    1c86:	02 96       	adiw	r24, 0x02	; 2
    1c88:	e8 0f       	add	r30, r24
    1c8a:	f9 1f       	adc	r31, r25
    1c8c:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	2a e0       	ldi	r18, 0x0A	; 10
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	b9 01       	movw	r22, r18
    1c98:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodhi4>
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	98 87       	std	Y+8, r25	; 0x08
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter--;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	81 50       	subi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	1d c0       	rjmp	.+58     	; 0x1ce4 <USART_SendInteger+0xda>
	}
	while(Copy_u16Number>0)
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	e8 2f       	mov	r30, r24
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb2:	98 85       	ldd	r25, Y+8	; 0x08
    1cb4:	2a e0       	ldi	r18, 0x0A	; 10
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	b9 01       	movw	r22, r18
    1cba:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodhi4>
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	02 96       	adiw	r24, 0x02	; 2
    1cc4:	e8 0f       	add	r30, r24
    1cc6:	f9 1f       	adc	r31, r25
    1cc8:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	98 85       	ldd	r25, Y+8	; 0x08
    1cce:	2a e0       	ldi	r18, 0x0A	; 10
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodhi4>
    1cd8:	cb 01       	movw	r24, r22
    1cda:	98 87       	std	Y+8, r25	; 0x08
    1cdc:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter--;
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	81 50       	subi	r24, 0x01	; 1
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	while(Copy_u16Number>0)
    1ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce6:	98 85       	ldd	r25, Y+8	; 0x08
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	f9 f6       	brne	.-66     	; 0x1caa <USART_SendInteger+0xa0>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    1cec:	19 82       	std	Y+1, r1	; 0x01
    1cee:	1a c0       	rjmp	.+52     	; 0x1d24 <USART_SendInteger+0x11a>
	{
		if(Local_u8arrStrNumber[Local_u8Counter]<=9)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	02 96       	adiw	r24, 0x02	; 2
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	80 81       	ld	r24, Z
    1d02:	8a 30       	cpi	r24, 0x0A	; 10
    1d04:	60 f4       	brcc	.+24     	; 0x1d1e <USART_SendInteger+0x114>
		{
			USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	02 96       	adiw	r24, 0x02	; 2
    1d10:	fc 01       	movw	r30, r24
    1d12:	e2 0f       	add	r30, r18
    1d14:	f3 1f       	adc	r31, r19
    1d16:	80 81       	ld	r24, Z
    1d18:	80 5d       	subi	r24, 0xD0	; 208
    1d1a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <USART_SendDataPolling>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	85 30       	cpi	r24, 0x05	; 5
    1d28:	18 f3       	brcs	.-58     	; 0x1cf0 <USART_SendInteger+0xe6>
		if(Local_u8arrStrNumber[Local_u8Counter]<=9)
		{
			USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
		}
	}
}
    1d2a:	2d 96       	adiw	r28, 0x0d	; 13
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <USART_EnableRx>:

void USART_EnableRx() // enable rx during runtime
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    1d44:	aa e2       	ldi	r26, 0x2A	; 42
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ea e2       	ldi	r30, 0x2A	; 42
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 61       	ori	r24, 0x10	; 16
    1d50:	8c 93       	st	X, r24

}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <USART_DisableRx>:

void USART_DisableRx() // disable rx during runtime
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXEN);
    1d60:	aa e2       	ldi	r26, 0x2A	; 42
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	ea e2       	ldi	r30, 0x2A	; 42
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8f 7e       	andi	r24, 0xEF	; 239
    1d6c:	8c 93       	st	X, r24

}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <USART_EnableTx>:

void USART_EnableTx() // enable tx during runtime
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXEN);
    1d7c:	aa e2       	ldi	r26, 0x2A	; 42
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ea e2       	ldi	r30, 0x2A	; 42
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	88 60       	ori	r24, 0x08	; 8
    1d88:	8c 93       	st	X, r24

}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <USART_DisableTx>:

void USART_DisableTx() // disable tx during runtime
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXEN);
    1d98:	aa e2       	ldi	r26, 0x2A	; 42
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ea e2       	ldi	r30, 0x2A	; 42
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	87 7f       	andi	r24, 0xF7	; 247
    1da4:	8c 93       	st	X, r24

}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <main>:
u8 ESP8266_u8GetPR(u8* arr);
void ESP8266_VidSendHB(u8 Copy_u8HB);
void ESP8266_VidSendPR(u8 Copy_u8PR);

void main(void)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	c8 5e       	subi	r28, 0xE8	; 232
    1db6:	d0 40       	sbci	r29, 0x00	; 0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61

	//here put your transmitted data//
	volatile u8 heart_beat_sensor=100;
    1dc2:	84 e6       	ldi	r24, 0x64	; 100
    1dc4:	8d 8f       	std	Y+29, r24	; 0x1d
	volatile u8 heat_sensor=200;
    1dc6:	88 ec       	ldi	r24, 0xC8	; 200
    1dc8:	8e 8f       	std	Y+30, r24	; 0x1e


	//here you will get the recived data
	volatile u8 z[100]={0};
    1dca:	ce 01       	movw	r24, r28
    1dcc:	4f 96       	adiw	r24, 0x1f	; 31
    1dce:	24 e6       	ldi	r18, 0x64	; 100
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	a9 01       	movw	r20, r18
    1dd8:	0e 94 a8 21 	call	0x4350	; 0x4350 <memset>
	volatile u8 m[100]={0};
    1ddc:	ce 01       	movw	r24, r28
    1dde:	8d 57       	subi	r24, 0x7D	; 125
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	24 e6       	ldi	r18, 0x64	; 100
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	a9 01       	movw	r20, r18
    1dec:	0e 94 a8 21 	call	0x4350	; 0x4350 <memset>
	volatile u8 heart_beat=0;
    1df0:	fe 01       	movw	r30, r28
    1df2:	e9 51       	subi	r30, 0x19	; 25
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	10 82       	st	Z, r1
	volatile u8 heat=0;
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e8 51       	subi	r30, 0x18	; 24
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	10 82       	st	Z, r1


	////Initialization////
	DIO_SetPinDir( PORTD,  PIN0,  INPUT); //Rx
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDir>
	DIO_SetPinDir( PORTD,  PIN1,  OUTPUT); //Tx
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDir>
	DIO_SetPinDir( RESET_PORT,  RESET_PIN,  OUTPUT); //Reset pin
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDir>
	USART_inti();
    1e1e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <USART_inti>
	DIO_SetPinVal(RESET_PORT,RESET_PIN,LOW);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_SetPinVal>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a8 ec       	ldi	r26, 0xC8	; 200
    1e32:	b2 e4       	ldi	r27, 0x42	; 66
    1e34:	89 8f       	std	Y+25, r24	; 0x19
    1e36:	9a 8f       	std	Y+26, r25	; 0x1a
    1e38:	ab 8f       	std	Y+27, r26	; 0x1b
    1e3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8d 8b       	std	Y+21, r24	; 0x15
    1e56:	9e 8b       	std	Y+22, r25	; 0x16
    1e58:	af 8b       	std	Y+23, r26	; 0x17
    1e5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <main+0xd2>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 8b       	std	Y+20, r25	; 0x14
    1e7a:	8b 8b       	std	Y+19, r24	; 0x13
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <main+0x150>
	else if (__tmp > 65535)
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <main+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	69 8d       	ldd	r22, Y+25	; 0x19
    1e98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9c 8b       	std	Y+20, r25	; 0x14
    1ebc:	8b 8b       	std	Y+19, r24	; 0x13
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <main+0x132>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9a 8b       	std	Y+18, r25	; 0x12
    1ec6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec8:	89 89       	ldd	r24, Y+17	; 0x11
    1eca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <main+0x120>
    1ed0:	9a 8b       	std	Y+18, r25	; 0x12
    1ed2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <main+0x114>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eea:	7e 89       	ldd	r23, Y+22	; 0x16
    1eec:	8f 89       	ldd	r24, Y+23	; 0x17
    1eee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	8b 89       	ldd	r24, Y+19	; 0x13
    1efe:	9c 89       	ldd	r25, Y+20	; 0x14
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 89       	ldd	r25, Y+16	; 0x10
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <main+0x15c>
    1f0c:	98 8b       	std	Y+16, r25	; 0x10
    1f0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms( 100 );
	DIO_SetPinVal(RESET_PORT,RESET_PIN,HIGH);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_SetPinVal>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	aa e7       	ldi	r26, 0x7A	; 122
    1f20:	b4 e4       	ldi	r27, 0x44	; 68
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
    1f24:	9c 87       	std	Y+12, r25	; 0x0c
    1f26:	ad 87       	std	Y+13, r26	; 0x0d
    1f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8f 83       	std	Y+7, r24	; 0x07
    1f44:	98 87       	std	Y+8, r25	; 0x08
    1f46:	a9 87       	std	Y+9, r26	; 0x09
    1f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <main+0x1c0>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <main+0x23e>
	else if (__tmp > 65535)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <main+0x220>
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <main+0x20e>
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <main+0x202>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <main+0x24a>
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	ESP8266_VidInit();
    1ffe:	0e 94 20 10 	call	0x2040	; 0x2040 <ESP8266_VidInit>
	/////////////////////////////////////////////////////////////////////////

	//connect
	ESP8266_VidConnectToWiFi("sayed","11112222"); //put your name and password of your hotspots mobile ,the name should be characters only and password is numbers only
    2002:	80 e6       	ldi	r24, 0x60	; 96
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	26 e6       	ldi	r18, 0x66	; 102
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 9a 12 	call	0x2534	; 0x2534 <ESP8266_VidConnectToWiFi>




	//transmit
	ESP8266_VidSendPR(heat_sensor);
    2010:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2012:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <ESP8266_VidSendPR>
	ESP8266_VidSendHB(heart_beat_sensor);
    2016:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2018:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <ESP8266_VidSendHB>




	//receive
	heat=ESP8266_u8GetPR(z);
    201c:	ce 01       	movw	r24, r28
    201e:	4f 96       	adiw	r24, 0x1f	; 31
    2020:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <ESP8266_u8GetPR>
    2024:	fe 01       	movw	r30, r28
    2026:	e8 51       	subi	r30, 0x18	; 24
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 83       	st	Z, r24
	heart_beat=ESP8266_u8GetHB(m);
    202c:	ce 01       	movw	r24, r28
    202e:	8d 57       	subi	r24, 0x7D	; 125
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <ESP8266_u8GetHB>
    2036:	fe 01       	movw	r30, r28
    2038:	e9 51       	subi	r30, 0x19	; 25
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 83       	st	Z, r24
    203e:	ff cf       	rjmp	.-2      	; 0x203e <main+0x292>

00002040 <ESP8266_VidInit>:




void ESP8266_VidInit()
{
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	c6 54       	subi	r28, 0x46	; 70
    204e:	d0 40       	sbci	r29, 0x00	; 0
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
	//disable echo
	USART_SendStr( (u8 *)"ATE0\r\n" );
    205a:	8f e6       	ldi	r24, 0x6F	; 111
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    2062:	fe 01       	movw	r30, r28
    2064:	ed 5b       	subi	r30, 0xBD	; 189
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	aa e7       	ldi	r26, 0x7A	; 122
    206e:	b4 e4       	ldi	r27, 0x44	; 68
    2070:	80 83       	st	Z, r24
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	a2 83       	std	Z+2, r26	; 0x02
    2076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	8e 01       	movw	r16, r28
    207a:	01 5c       	subi	r16, 0xC1	; 193
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	ed 5b       	subi	r30, 0xBD	; 189
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a ef       	ldi	r20, 0xFA	; 250
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	f8 01       	movw	r30, r16
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a6:	fe 01       	movw	r30, r28
    20a8:	ff 96       	adiw	r30, 0x3f	; 63
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <ESP8266_VidInit+0x8c>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9e af       	std	Y+62, r25	; 0x3e
    20c8:	8d af       	std	Y+61, r24	; 0x3d
    20ca:	46 c0       	rjmp	.+140    	; 0x2158 <ESP8266_VidInit+0x118>
	else if (__tmp > 65535)
    20cc:	fe 01       	movw	r30, r28
    20ce:	ff 96       	adiw	r30, 0x3f	; 63
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	64 f5       	brge	.+88     	; 0x2140 <ESP8266_VidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	fe 01       	movw	r30, r28
    20ea:	ed 5b       	subi	r30, 0xBD	; 189
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e af       	std	Y+62, r25	; 0x3e
    2114:	8d af       	std	Y+61, r24	; 0x3d
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <ESP8266_VidInit+0xf6>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9c af       	std	Y+60, r25	; 0x3c
    211e:	8b af       	std	Y+59, r24	; 0x3b
    2120:	8b ad       	ldd	r24, Y+59	; 0x3b
    2122:	9c ad       	ldd	r25, Y+60	; 0x3c
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <ESP8266_VidInit+0xe4>
    2128:	9c af       	std	Y+60, r25	; 0x3c
    212a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8d ad       	ldd	r24, Y+61	; 0x3d
    212e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9e af       	std	Y+62, r25	; 0x3e
    2134:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8d ad       	ldd	r24, Y+61	; 0x3d
    2138:	9e ad       	ldd	r25, Y+62	; 0x3e
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <ESP8266_VidInit+0xd8>
    213e:	16 c0       	rjmp	.+44     	; 0x216c <ESP8266_VidInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	fe 01       	movw	r30, r28
    2142:	ff 96       	adiw	r30, 0x3f	; 63
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e af       	std	Y+62, r25	; 0x3e
    2156:	8d af       	std	Y+61, r24	; 0x3d
    2158:	8d ad       	ldd	r24, Y+61	; 0x3d
    215a:	9e ad       	ldd	r25, Y+62	; 0x3e
    215c:	9a af       	std	Y+58, r25	; 0x3a
    215e:	89 af       	std	Y+57, r24	; 0x39
    2160:	89 ad       	ldd	r24, Y+57	; 0x39
    2162:	9a ad       	ldd	r25, Y+58	; 0x3a
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <ESP8266_VidInit+0x124>
    2168:	9a af       	std	Y+58, r25	; 0x3a
    216a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms( 1000 );

	/* Sending AT Command To Check ESP8266 Is Working Or Not  */
	USART_SendStr( (u8 *)"AT\r\n" );
    216c:	86 e7       	ldi	r24, 0x76	; 118
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	aa e7       	ldi	r26, 0x7A	; 122
    217a:	b4 e4       	ldi	r27, 0x44	; 68
    217c:	8d ab       	std	Y+53, r24	; 0x35
    217e:	9e ab       	std	Y+54, r25	; 0x36
    2180:	af ab       	std	Y+55, r26	; 0x37
    2182:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6d a9       	ldd	r22, Y+53	; 0x35
    2186:	7e a9       	ldd	r23, Y+54	; 0x36
    2188:	8f a9       	ldd	r24, Y+55	; 0x37
    218a:	98 ad       	ldd	r25, Y+56	; 0x38
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	89 ab       	std	Y+49, r24	; 0x31
    219e:	9a ab       	std	Y+50, r25	; 0x32
    21a0:	ab ab       	std	Y+51, r26	; 0x33
    21a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <ESP8266_VidInit+0x186>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	98 ab       	std	Y+48, r25	; 0x30
    21c2:	8f a7       	std	Y+47, r24	; 0x2f
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <ESP8266_VidInit+0x204>
	else if (__tmp > 65535)
    21c6:	69 a9       	ldd	r22, Y+49	; 0x31
    21c8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ca:	8b a9       	ldd	r24, Y+51	; 0x33
    21cc:	9c a9       	ldd	r25, Y+52	; 0x34
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <ESP8266_VidInit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6d a9       	ldd	r22, Y+53	; 0x35
    21e0:	7e a9       	ldd	r23, Y+54	; 0x36
    21e2:	8f a9       	ldd	r24, Y+55	; 0x37
    21e4:	98 ad       	ldd	r25, Y+56	; 0x38
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <ESP8266_VidInit+0x1e6>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9e a7       	std	Y+46, r25	; 0x2e
    220e:	8d a7       	std	Y+45, r24	; 0x2d
    2210:	8d a5       	ldd	r24, Y+45	; 0x2d
    2212:	9e a5       	ldd	r25, Y+46	; 0x2e
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <ESP8266_VidInit+0x1d4>
    2218:	9e a7       	std	Y+46, r25	; 0x2e
    221a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8f a5       	ldd	r24, Y+47	; 0x2f
    221e:	98 a9       	ldd	r25, Y+48	; 0x30
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	98 ab       	std	Y+48, r25	; 0x30
    2224:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8f a5       	ldd	r24, Y+47	; 0x2f
    2228:	98 a9       	ldd	r25, Y+48	; 0x30
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <ESP8266_VidInit+0x1c8>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <ESP8266_VidInit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	69 a9       	ldd	r22, Y+49	; 0x31
    2232:	7a a9       	ldd	r23, Y+50	; 0x32
    2234:	8b a9       	ldd	r24, Y+51	; 0x33
    2236:	9c a9       	ldd	r25, Y+52	; 0x34
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	98 ab       	std	Y+48, r25	; 0x30
    2242:	8f a7       	std	Y+47, r24	; 0x2f
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	9c a7       	std	Y+44, r25	; 0x2c
    224a:	8b a7       	std	Y+43, r24	; 0x2b
    224c:	8b a5       	ldd	r24, Y+43	; 0x2b
    224e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <ESP8266_VidInit+0x210>
    2254:	9c a7       	std	Y+44, r25	; 0x2c
    2256:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms( 1000 );

	USART_SendStr( (u8 *)"AT+CWMODE=1\r\n" );
    2258:	8b e7       	ldi	r24, 0x7B	; 123
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	aa e7       	ldi	r26, 0x7A	; 122
    2266:	b4 e4       	ldi	r27, 0x44	; 68
    2268:	8f a3       	std	Y+39, r24	; 0x27
    226a:	98 a7       	std	Y+40, r25	; 0x28
    226c:	a9 a7       	std	Y+41, r26	; 0x29
    226e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	6f a1       	ldd	r22, Y+39	; 0x27
    2272:	78 a5       	ldd	r23, Y+40	; 0x28
    2274:	89 a5       	ldd	r24, Y+41	; 0x29
    2276:	9a a5       	ldd	r25, Y+42	; 0x2a
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8b a3       	std	Y+35, r24	; 0x23
    228a:	9c a3       	std	Y+36, r25	; 0x24
    228c:	ad a3       	std	Y+37, r26	; 0x25
    228e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <ESP8266_VidInit+0x272>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9a a3       	std	Y+34, r25	; 0x22
    22ae:	89 a3       	std	Y+33, r24	; 0x21
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <ESP8266_VidInit+0x2f0>
	else if (__tmp > 65535)
    22b2:	6b a1       	ldd	r22, Y+35	; 0x23
    22b4:	7c a1       	ldd	r23, Y+36	; 0x24
    22b6:	8d a1       	ldd	r24, Y+37	; 0x25
    22b8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <ESP8266_VidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	6f a1       	ldd	r22, Y+39	; 0x27
    22cc:	78 a5       	ldd	r23, Y+40	; 0x28
    22ce:	89 a5       	ldd	r24, Y+41	; 0x29
    22d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9a a3       	std	Y+34, r25	; 0x22
    22f0:	89 a3       	std	Y+33, r24	; 0x21
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <ESP8266_VidInit+0x2d2>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	98 a3       	std	Y+32, r25	; 0x20
    22fa:	8f 8f       	std	Y+31, r24	; 0x1f
    22fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <ESP8266_VidInit+0x2c0>
    2304:	98 a3       	std	Y+32, r25	; 0x20
    2306:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	89 a1       	ldd	r24, Y+33	; 0x21
    230a:	9a a1       	ldd	r25, Y+34	; 0x22
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9a a3       	std	Y+34, r25	; 0x22
    2310:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	89 a1       	ldd	r24, Y+33	; 0x21
    2314:	9a a1       	ldd	r25, Y+34	; 0x22
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <ESP8266_VidInit+0x2b4>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <ESP8266_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6b a1       	ldd	r22, Y+35	; 0x23
    231e:	7c a1       	ldd	r23, Y+36	; 0x24
    2320:	8d a1       	ldd	r24, Y+37	; 0x25
    2322:	9e a1       	ldd	r25, Y+38	; 0x26
    2324:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9a a3       	std	Y+34, r25	; 0x22
    232e:	89 a3       	std	Y+33, r24	; 0x21
    2330:	89 a1       	ldd	r24, Y+33	; 0x21
    2332:	9a a1       	ldd	r25, Y+34	; 0x22
    2334:	9e 8f       	std	Y+30, r25	; 0x1e
    2336:	8d 8f       	std	Y+29, r24	; 0x1d
    2338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    233a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <ESP8266_VidInit+0x2fc>
    2340:	9e 8f       	std	Y+30, r25	; 0x1e
    2342:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms( 1000 );

	USART_SendStr( (u8 *) "AT+CIPMODE=0\r\n" );
    2344:	89 e8       	ldi	r24, 0x89	; 137
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	aa e7       	ldi	r26, 0x7A	; 122
    2352:	b4 e4       	ldi	r27, 0x44	; 68
    2354:	89 8f       	std	Y+25, r24	; 0x19
    2356:	9a 8f       	std	Y+26, r25	; 0x1a
    2358:	ab 8f       	std	Y+27, r26	; 0x1b
    235a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	69 8d       	ldd	r22, Y+25	; 0x19
    235e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2360:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2362:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8d 8b       	std	Y+21, r24	; 0x15
    2376:	9e 8b       	std	Y+22, r25	; 0x16
    2378:	af 8b       	std	Y+23, r26	; 0x17
    237a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <ESP8266_VidInit+0x35e>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9c 8b       	std	Y+20, r25	; 0x14
    239a:	8b 8b       	std	Y+19, r24	; 0x13
    239c:	3f c0       	rjmp	.+126    	; 0x241c <ESP8266_VidInit+0x3dc>
	else if (__tmp > 65535)
    239e:	6d 89       	ldd	r22, Y+21	; 0x15
    23a0:	7e 89       	ldd	r23, Y+22	; 0x16
    23a2:	8f 89       	ldd	r24, Y+23	; 0x17
    23a4:	98 8d       	ldd	r25, Y+24	; 0x18
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <ESP8266_VidInit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	69 8d       	ldd	r22, Y+25	; 0x19
    23b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <ESP8266_VidInit+0x3be>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9a 8b       	std	Y+18, r25	; 0x12
    23e6:	89 8b       	std	Y+17, r24	; 0x11
    23e8:	89 89       	ldd	r24, Y+17	; 0x11
    23ea:	9a 89       	ldd	r25, Y+18	; 0x12
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <ESP8266_VidInit+0x3ac>
    23f0:	9a 8b       	std	Y+18, r25	; 0x12
    23f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <ESP8266_VidInit+0x3a0>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <ESP8266_VidInit+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6d 89       	ldd	r22, Y+21	; 0x15
    240a:	7e 89       	ldd	r23, Y+22	; 0x16
    240c:	8f 89       	ldd	r24, Y+23	; 0x17
    240e:	98 8d       	ldd	r25, Y+24	; 0x18
    2410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9c 8b       	std	Y+20, r25	; 0x14
    241a:	8b 8b       	std	Y+19, r24	; 0x13
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	98 8b       	std	Y+16, r25	; 0x10
    2422:	8f 87       	std	Y+15, r24	; 0x0f
    2424:	8f 85       	ldd	r24, Y+15	; 0x0f
    2426:	98 89       	ldd	r25, Y+16	; 0x10
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <ESP8266_VidInit+0x3e8>
    242c:	98 8b       	std	Y+16, r25	; 0x10
    242e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms( 1000 );

	USART_SendStr( (u8 *) "AT+CIPMUX=0\r\n" );
    2430:	88 e9       	ldi	r24, 0x98	; 152
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	aa e7       	ldi	r26, 0x7A	; 122
    243e:	b4 e4       	ldi	r27, 0x44	; 68
    2440:	8b 87       	std	Y+11, r24	; 0x0b
    2442:	9c 87       	std	Y+12, r25	; 0x0c
    2444:	ad 87       	std	Y+13, r26	; 0x0d
    2446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a ef       	ldi	r20, 0xFA	; 250
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8f 83       	std	Y+7, r24	; 0x07
    2462:	98 87       	std	Y+8, r25	; 0x08
    2464:	a9 87       	std	Y+9, r26	; 0x09
    2466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <ESP8266_VidInit+0x44a>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <ESP8266_VidInit+0x4c8>
	else if (__tmp > 65535)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <ESP8266_VidInit+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <ESP8266_VidInit+0x4aa>
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <ESP8266_VidInit+0x498>
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <ESP8266_VidInit+0x48c>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <ESP8266_VidInit+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <ESP8266_VidInit+0x4d4>
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    251c:	ca 5b       	subi	r28, 0xBA	; 186
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <ESP8266_VidConnectToWiFi>:

void ESP8266_VidConnectToWiFi(u8* SSID, u8* Password)
{
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	ca 5b       	subi	r28, 0xBA	; 186
    2542:	d0 40       	sbci	r29, 0x00	; 0
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	fe 01       	movw	r30, r28
    2550:	e9 54       	subi	r30, 0x49	; 73
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	fe 01       	movw	r30, r28
    255a:	e7 54       	subi	r30, 0x47	; 71
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	71 83       	std	Z+1, r23	; 0x01
    2560:	60 83       	st	Z, r22
	USART_SendStr( (u8 *) "AT+CWJAP_CUR=\"" );
    2562:	86 ea       	ldi	r24, 0xA6	; 166
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) SSID );
    256a:	fe 01       	movw	r30, r28
    256c:	e9 54       	subi	r30, 0x49	; 73
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) "\",\"" );
    2578:	85 eb       	ldi	r24, 0xB5	; 181
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) Password);
    2580:	fe 01       	movw	r30, r28
    2582:	e7 54       	subi	r30, 0x47	; 71
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) "\"\r\n");
    258e:	89 eb       	ldi	r24, 0xB9	; 185
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    2596:	fe 01       	movw	r30, r28
    2598:	ed 54       	subi	r30, 0x4D	; 77
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	aa e7       	ldi	r26, 0x7A	; 122
    25a2:	b4 e4       	ldi	r27, 0x44	; 68
    25a4:	80 83       	st	Z, r24
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	a2 83       	std	Z+2, r26	; 0x02
    25aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	8e 01       	movw	r16, r28
    25ae:	01 55       	subi	r16, 0x51	; 81
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	ed 54       	subi	r30, 0x4D	; 77
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a ef       	ldi	r20, 0xFA	; 250
    25c6:	54 e4       	ldi	r21, 0x44	; 68
    25c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	f8 01       	movw	r30, r16
    25d2:	80 83       	st	Z, r24
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	a2 83       	std	Z+2, r26	; 0x02
    25d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25da:	fe 01       	movw	r30, r28
    25dc:	e1 55       	subi	r30, 0x51	; 81
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25f4:	88 23       	and	r24, r24
    25f6:	44 f4       	brge	.+16     	; 0x2608 <ESP8266_VidConnectToWiFi+0xd4>
		__ticks = 1;
    25f8:	fe 01       	movw	r30, r28
    25fa:	e3 55       	subi	r30, 0x53	; 83
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	64 c0       	rjmp	.+200    	; 0x26d0 <ESP8266_VidConnectToWiFi+0x19c>
	else if (__tmp > 65535)
    2608:	fe 01       	movw	r30, r28
    260a:	e1 55       	subi	r30, 0x51	; 81
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <ESP8266_VidConnectToWiFi+0xf4>
    2626:	43 c0       	rjmp	.+134    	; 0x26ae <ESP8266_VidConnectToWiFi+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	fe 01       	movw	r30, r28
    262a:	ed 54       	subi	r30, 0x4D	; 77
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8e 01       	movw	r16, r28
    2648:	03 55       	subi	r16, 0x53	; 83
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
    264c:	bc 01       	movw	r22, r24
    264e:	cd 01       	movw	r24, r26
    2650:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	f8 01       	movw	r30, r16
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
    265e:	1f c0       	rjmp	.+62     	; 0x269e <ESP8266_VidConnectToWiFi+0x16a>
    2660:	fe 01       	movw	r30, r28
    2662:	e5 55       	subi	r30, 0x55	; 85
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	fe 01       	movw	r30, r28
    2670:	e5 55       	subi	r30, 0x55	; 85
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <ESP8266_VidConnectToWiFi+0x144>
    267c:	fe 01       	movw	r30, r28
    267e:	e5 55       	subi	r30, 0x55	; 85
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	de 01       	movw	r26, r28
    2688:	a3 55       	subi	r26, 0x53	; 83
    268a:	bf 4f       	sbci	r27, 0xFF	; 255
    268c:	fe 01       	movw	r30, r28
    268e:	e3 55       	subi	r30, 0x53	; 83
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	11 96       	adiw	r26, 0x01	; 1
    269a:	9c 93       	st	X, r25
    269c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	fe 01       	movw	r30, r28
    26a0:	e3 55       	subi	r30, 0x53	; 83
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	d1 f6       	brne	.-76     	; 0x2660 <ESP8266_VidConnectToWiFi+0x12c>
    26ac:	27 c0       	rjmp	.+78     	; 0x26fc <ESP8266_VidConnectToWiFi+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	8e 01       	movw	r16, r28
    26b0:	03 55       	subi	r16, 0x53	; 83
    26b2:	1f 4f       	sbci	r17, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e1 55       	subi	r30, 0x51	; 81
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	f8 01       	movw	r30, r16
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
    26d0:	de 01       	movw	r26, r28
    26d2:	a7 55       	subi	r26, 0x57	; 87
    26d4:	bf 4f       	sbci	r27, 0xFF	; 255
    26d6:	fe 01       	movw	r30, r28
    26d8:	e3 55       	subi	r30, 0x53	; 83
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	8d 93       	st	X+, r24
    26e2:	9c 93       	st	X, r25
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 55       	subi	r30, 0x57	; 87
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <ESP8266_VidConnectToWiFi+0x1ba>
    26f2:	fe 01       	movw	r30, r28
    26f4:	e7 55       	subi	r30, 0x57	; 87
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	fe 01       	movw	r30, r28
    26fe:	eb 55       	subi	r30, 0x5B	; 91
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	aa e7       	ldi	r26, 0x7A	; 122
    2708:	b4 e4       	ldi	r27, 0x44	; 68
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	8e 01       	movw	r16, r28
    2714:	0f 55       	subi	r16, 0x5F	; 95
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	eb 55       	subi	r30, 0x5B	; 91
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a ef       	ldi	r20, 0xFA	; 250
    272c:	54 e4       	ldi	r21, 0x44	; 68
    272e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	80 83       	st	Z, r24
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	a2 83       	std	Z+2, r26	; 0x02
    273e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2740:	fe 01       	movw	r30, r28
    2742:	ef 55       	subi	r30, 0x5F	; 95
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	44 f4       	brge	.+16     	; 0x276e <ESP8266_VidConnectToWiFi+0x23a>
		__ticks = 1;
    275e:	fe 01       	movw	r30, r28
    2760:	e1 56       	subi	r30, 0x61	; 97
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	64 c0       	rjmp	.+200    	; 0x2836 <ESP8266_VidConnectToWiFi+0x302>
	else if (__tmp > 65535)
    276e:	fe 01       	movw	r30, r28
    2770:	ef 55       	subi	r30, 0x5F	; 95
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	0c f0       	brlt	.+2      	; 0x278e <ESP8266_VidConnectToWiFi+0x25a>
    278c:	43 c0       	rjmp	.+134    	; 0x2814 <ESP8266_VidConnectToWiFi+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	fe 01       	movw	r30, r28
    2790:	eb 55       	subi	r30, 0x5B	; 91
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8e 01       	movw	r16, r28
    27ae:	01 56       	subi	r16, 0x61	; 97
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	f8 01       	movw	r30, r16
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	1f c0       	rjmp	.+62     	; 0x2804 <ESP8266_VidConnectToWiFi+0x2d0>
    27c6:	fe 01       	movw	r30, r28
    27c8:	e3 56       	subi	r30, 0x63	; 99
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	88 ec       	ldi	r24, 0xC8	; 200
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
    27d4:	fe 01       	movw	r30, r28
    27d6:	e3 56       	subi	r30, 0x63	; 99
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <ESP8266_VidConnectToWiFi+0x2aa>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 56       	subi	r30, 0x63	; 99
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	de 01       	movw	r26, r28
    27ee:	a1 56       	subi	r26, 0x61	; 97
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e1 56       	subi	r30, 0x61	; 97
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	11 96       	adiw	r26, 0x01	; 1
    2800:	9c 93       	st	X, r25
    2802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	fe 01       	movw	r30, r28
    2806:	e1 56       	subi	r30, 0x61	; 97
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	d1 f6       	brne	.-76     	; 0x27c6 <ESP8266_VidConnectToWiFi+0x292>
    2812:	27 c0       	rjmp	.+78     	; 0x2862 <ESP8266_VidConnectToWiFi+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	8e 01       	movw	r16, r28
    2816:	01 56       	subi	r16, 0x61	; 97
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	fe 01       	movw	r30, r28
    281c:	ef 55       	subi	r30, 0x5F	; 95
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	de 01       	movw	r26, r28
    2838:	a5 56       	subi	r26, 0x65	; 101
    283a:	bf 4f       	sbci	r27, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e1 56       	subi	r30, 0x61	; 97
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	8d 93       	st	X+, r24
    2848:	9c 93       	st	X, r25
    284a:	fe 01       	movw	r30, r28
    284c:	e5 56       	subi	r30, 0x65	; 101
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <ESP8266_VidConnectToWiFi+0x320>
    2858:	fe 01       	movw	r30, r28
    285a:	e5 56       	subi	r30, 0x65	; 101
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
    2862:	fe 01       	movw	r30, r28
    2864:	e9 56       	subi	r30, 0x69	; 105
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	aa e7       	ldi	r26, 0x7A	; 122
    286e:	b4 e4       	ldi	r27, 0x44	; 68
    2870:	80 83       	st	Z, r24
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	a2 83       	std	Z+2, r26	; 0x02
    2876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2878:	8e 01       	movw	r16, r28
    287a:	0d 56       	subi	r16, 0x6D	; 109
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	e9 56       	subi	r30, 0x69	; 105
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	4a ef       	ldi	r20, 0xFA	; 250
    2892:	54 e4       	ldi	r21, 0x44	; 68
    2894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	f8 01       	movw	r30, r16
    289e:	80 83       	st	Z, r24
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	a2 83       	std	Z+2, r26	; 0x02
    28a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a6:	fe 01       	movw	r30, r28
    28a8:	ed 56       	subi	r30, 0x6D	; 109
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	44 f4       	brge	.+16     	; 0x28d4 <ESP8266_VidConnectToWiFi+0x3a0>
		__ticks = 1;
    28c4:	fe 01       	movw	r30, r28
    28c6:	ef 56       	subi	r30, 0x6F	; 111
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	91 83       	std	Z+1, r25	; 0x01
    28d0:	80 83       	st	Z, r24
    28d2:	64 c0       	rjmp	.+200    	; 0x299c <ESP8266_VidConnectToWiFi+0x468>
	else if (__tmp > 65535)
    28d4:	fe 01       	movw	r30, r28
    28d6:	ed 56       	subi	r30, 0x6D	; 109
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	82 81       	ldd	r24, Z+2	; 0x02
    28e0:	93 81       	ldd	r25, Z+3	; 0x03
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	0c f0       	brlt	.+2      	; 0x28f4 <ESP8266_VidConnectToWiFi+0x3c0>
    28f2:	43 c0       	rjmp	.+134    	; 0x297a <ESP8266_VidConnectToWiFi+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f4:	fe 01       	movw	r30, r28
    28f6:	e9 56       	subi	r30, 0x69	; 105
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	8e 01       	movw	r16, r28
    2914:	0f 56       	subi	r16, 0x6F	; 111
    2916:	1f 4f       	sbci	r17, 0xFF	; 255
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	f8 01       	movw	r30, r16
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	1f c0       	rjmp	.+62     	; 0x296a <ESP8266_VidConnectToWiFi+0x436>
    292c:	fe 01       	movw	r30, r28
    292e:	e1 57       	subi	r30, 0x71	; 113
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	88 ec       	ldi	r24, 0xC8	; 200
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	fe 01       	movw	r30, r28
    293c:	e1 57       	subi	r30, 0x71	; 113
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <ESP8266_VidConnectToWiFi+0x410>
    2948:	fe 01       	movw	r30, r28
    294a:	e1 57       	subi	r30, 0x71	; 113
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	de 01       	movw	r26, r28
    2954:	af 56       	subi	r26, 0x6F	; 111
    2956:	bf 4f       	sbci	r27, 0xFF	; 255
    2958:	fe 01       	movw	r30, r28
    295a:	ef 56       	subi	r30, 0x6F	; 111
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	9c 93       	st	X, r25
    2968:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296a:	fe 01       	movw	r30, r28
    296c:	ef 56       	subi	r30, 0x6F	; 111
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	91 81       	ldd	r25, Z+1	; 0x01
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	d1 f6       	brne	.-76     	; 0x292c <ESP8266_VidConnectToWiFi+0x3f8>
    2978:	27 c0       	rjmp	.+78     	; 0x29c8 <ESP8266_VidConnectToWiFi+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	8e 01       	movw	r16, r28
    297c:	0f 56       	subi	r16, 0x6F	; 111
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	ed 56       	subi	r30, 0x6D	; 109
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	f8 01       	movw	r30, r16
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
    299c:	de 01       	movw	r26, r28
    299e:	a3 57       	subi	r26, 0x73	; 115
    29a0:	bf 4f       	sbci	r27, 0xFF	; 255
    29a2:	fe 01       	movw	r30, r28
    29a4:	ef 56       	subi	r30, 0x6F	; 111
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	8d 93       	st	X+, r24
    29ae:	9c 93       	st	X, r25
    29b0:	fe 01       	movw	r30, r28
    29b2:	e3 57       	subi	r30, 0x73	; 115
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <ESP8266_VidConnectToWiFi+0x486>
    29be:	fe 01       	movw	r30, r28
    29c0:	e3 57       	subi	r30, 0x73	; 115
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
    29c8:	fe 01       	movw	r30, r28
    29ca:	e7 57       	subi	r30, 0x77	; 119
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	aa e7       	ldi	r26, 0x7A	; 122
    29d4:	b4 e4       	ldi	r27, 0x44	; 68
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29de:	8e 01       	movw	r16, r28
    29e0:	0b 57       	subi	r16, 0x7B	; 123
    29e2:	1f 4f       	sbci	r17, 0xFF	; 255
    29e4:	fe 01       	movw	r30, r28
    29e6:	e7 57       	subi	r30, 0x77	; 119
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	4a ef       	ldi	r20, 0xFA	; 250
    29f8:	54 e4       	ldi	r21, 0x44	; 68
    29fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	80 83       	st	Z, r24
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	a2 83       	std	Z+2, r26	; 0x02
    2a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	eb 57       	subi	r30, 0x7B	; 123
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e8       	ldi	r20, 0x80	; 128
    2a20:	5f e3       	ldi	r21, 0x3F	; 63
    2a22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a26:	88 23       	and	r24, r24
    2a28:	44 f4       	brge	.+16     	; 0x2a3a <ESP8266_VidConnectToWiFi+0x506>
		__ticks = 1;
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ed 57       	subi	r30, 0x7D	; 125
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	80 83       	st	Z, r24
    2a38:	64 c0       	rjmp	.+200    	; 0x2b02 <ESP8266_VidConnectToWiFi+0x5ce>
	else if (__tmp > 65535)
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	eb 57       	subi	r30, 0x7B	; 123
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	82 81       	ldd	r24, Z+2	; 0x02
    2a46:	93 81       	ldd	r25, Z+3	; 0x03
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	0c f0       	brlt	.+2      	; 0x2a5a <ESP8266_VidConnectToWiFi+0x526>
    2a58:	43 c0       	rjmp	.+134    	; 0x2ae0 <ESP8266_VidConnectToWiFi+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e7 57       	subi	r30, 0x77	; 119
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e2       	ldi	r20, 0x20	; 32
    2a6e:	51 e4       	ldi	r21, 0x41	; 65
    2a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8e 01       	movw	r16, r28
    2a7a:	0d 57       	subi	r16, 0x7D	; 125
    2a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
    2a90:	1f c0       	rjmp	.+62     	; 0x2ad0 <ESP8266_VidConnectToWiFi+0x59c>
    2a92:	fe 01       	movw	r30, r28
    2a94:	ef 57       	subi	r30, 0x7F	; 127
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	88 ec       	ldi	r24, 0xC8	; 200
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	91 83       	std	Z+1, r25	; 0x01
    2a9e:	80 83       	st	Z, r24
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ef 57       	subi	r30, 0x7F	; 127
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <ESP8266_VidConnectToWiFi+0x576>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	ef 57       	subi	r30, 0x7F	; 127
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab8:	de 01       	movw	r26, r28
    2aba:	ad 57       	subi	r26, 0x7D	; 125
    2abc:	bf 4f       	sbci	r27, 0xFF	; 255
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ed 57       	subi	r30, 0x7D	; 125
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	11 96       	adiw	r26, 0x01	; 1
    2acc:	9c 93       	st	X, r25
    2ace:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ed 57       	subi	r30, 0x7D	; 125
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	d1 f6       	brne	.-76     	; 0x2a92 <ESP8266_VidConnectToWiFi+0x55e>
    2ade:	27 c0       	rjmp	.+78     	; 0x2b2e <ESP8266_VidConnectToWiFi+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	8e 01       	movw	r16, r28
    2ae2:	0d 57       	subi	r16, 0x7D	; 125
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	eb 57       	subi	r30, 0x7B	; 123
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	f8 01       	movw	r30, r16
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	de 01       	movw	r26, r28
    2b04:	a1 58       	subi	r26, 0x81	; 129
    2b06:	bf 4f       	sbci	r27, 0xFF	; 255
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 57       	subi	r30, 0x7D	; 125
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
    2b12:	8d 93       	st	X+, r24
    2b14:	9c 93       	st	X, r25
    2b16:	fe 01       	movw	r30, r28
    2b18:	e1 58       	subi	r30, 0x81	; 129
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <ESP8266_VidConnectToWiFi+0x5ec>
    2b24:	fe 01       	movw	r30, r28
    2b26:	e1 58       	subi	r30, 0x81	; 129
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e5 58       	subi	r30, 0x85	; 133
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	aa e7       	ldi	r26, 0x7A	; 122
    2b3a:	b4 e4       	ldi	r27, 0x44	; 68
    2b3c:	80 83       	st	Z, r24
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	a2 83       	std	Z+2, r26	; 0x02
    2b42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b44:	8e 01       	movw	r16, r28
    2b46:	09 58       	subi	r16, 0x89	; 137
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 58       	subi	r30, 0x85	; 133
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	60 81       	ld	r22, Z
    2b52:	71 81       	ldd	r23, Z+1	; 0x01
    2b54:	82 81       	ldd	r24, Z+2	; 0x02
    2b56:	93 81       	ldd	r25, Z+3	; 0x03
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a ef       	ldi	r20, 0xFA	; 250
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	80 83       	st	Z, r24
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	a2 83       	std	Z+2, r26	; 0x02
    2b70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b72:	fe 01       	movw	r30, r28
    2b74:	e9 58       	subi	r30, 0x89	; 137
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	44 f4       	brge	.+16     	; 0x2ba0 <ESP8266_VidConnectToWiFi+0x66c>
		__ticks = 1;
    2b90:	fe 01       	movw	r30, r28
    2b92:	eb 58       	subi	r30, 0x8B	; 139
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	64 c0       	rjmp	.+200    	; 0x2c68 <ESP8266_VidConnectToWiFi+0x734>
	else if (__tmp > 65535)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e9 58       	subi	r30, 0x89	; 137
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	0c f0       	brlt	.+2      	; 0x2bc0 <ESP8266_VidConnectToWiFi+0x68c>
    2bbe:	43 c0       	rjmp	.+134    	; 0x2c46 <ESP8266_VidConnectToWiFi+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e5 58       	subi	r30, 0x85	; 133
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	8e 01       	movw	r16, r28
    2be0:	0b 58       	subi	r16, 0x8B	; 139
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	80 83       	st	Z, r24
    2bf6:	1f c0       	rjmp	.+62     	; 0x2c36 <ESP8266_VidConnectToWiFi+0x702>
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ed 58       	subi	r30, 0x8D	; 141
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	88 ec       	ldi	r24, 0xC8	; 200
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 58       	subi	r30, 0x8D	; 141
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	91 81       	ldd	r25, Z+1	; 0x01
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <ESP8266_VidConnectToWiFi+0x6dc>
    2c14:	fe 01       	movw	r30, r28
    2c16:	ed 58       	subi	r30, 0x8D	; 141
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	de 01       	movw	r26, r28
    2c20:	ab 58       	subi	r26, 0x8B	; 139
    2c22:	bf 4f       	sbci	r27, 0xFF	; 255
    2c24:	fe 01       	movw	r30, r28
    2c26:	eb 58       	subi	r30, 0x8B	; 139
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	11 96       	adiw	r26, 0x01	; 1
    2c32:	9c 93       	st	X, r25
    2c34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c36:	fe 01       	movw	r30, r28
    2c38:	eb 58       	subi	r30, 0x8B	; 139
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	d1 f6       	brne	.-76     	; 0x2bf8 <ESP8266_VidConnectToWiFi+0x6c4>
    2c44:	27 c0       	rjmp	.+78     	; 0x2c94 <ESP8266_VidConnectToWiFi+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c46:	8e 01       	movw	r16, r28
    2c48:	0b 58       	subi	r16, 0x8B	; 139
    2c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e9 58       	subi	r30, 0x89	; 137
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	f8 01       	movw	r30, r16
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	de 01       	movw	r26, r28
    2c6a:	af 58       	subi	r26, 0x8F	; 143
    2c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6e:	fe 01       	movw	r30, r28
    2c70:	eb 58       	subi	r30, 0x8B	; 139
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	8d 93       	st	X+, r24
    2c7a:	9c 93       	st	X, r25
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ef 58       	subi	r30, 0x8F	; 143
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	91 81       	ldd	r25, Z+1	; 0x01
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <ESP8266_VidConnectToWiFi+0x752>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 58       	subi	r30, 0x8F	; 143
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24
    2c94:	fe 01       	movw	r30, r28
    2c96:	e3 59       	subi	r30, 0x93	; 147
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	aa e7       	ldi	r26, 0x7A	; 122
    2ca0:	b4 e4       	ldi	r27, 0x44	; 68
    2ca2:	80 83       	st	Z, r24
    2ca4:	91 83       	std	Z+1, r25	; 0x01
    2ca6:	a2 83       	std	Z+2, r26	; 0x02
    2ca8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2caa:	8e 01       	movw	r16, r28
    2cac:	07 59       	subi	r16, 0x97	; 151
    2cae:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	e3 59       	subi	r30, 0x93	; 147
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	60 81       	ld	r22, Z
    2cb8:	71 81       	ldd	r23, Z+1	; 0x01
    2cba:	82 81       	ldd	r24, Z+2	; 0x02
    2cbc:	93 81       	ldd	r25, Z+3	; 0x03
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	4a ef       	ldi	r20, 0xFA	; 250
    2cc4:	54 e4       	ldi	r21, 0x44	; 68
    2cc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 83       	st	Z, r24
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	a2 83       	std	Z+2, r26	; 0x02
    2cd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e7 59       	subi	r30, 0x97	; 151
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	60 81       	ld	r22, Z
    2ce0:	71 81       	ldd	r23, Z+1	; 0x01
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	93 81       	ldd	r25, Z+3	; 0x03
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e8       	ldi	r20, 0x80	; 128
    2cec:	5f e3       	ldi	r21, 0x3F	; 63
    2cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	44 f4       	brge	.+16     	; 0x2d06 <ESP8266_VidConnectToWiFi+0x7d2>
		__ticks = 1;
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e9 59       	subi	r30, 0x99	; 153
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
    2d04:	64 c0       	rjmp	.+200    	; 0x2dce <ESP8266_VidConnectToWiFi+0x89a>
	else if (__tmp > 65535)
    2d06:	fe 01       	movw	r30, r28
    2d08:	e7 59       	subi	r30, 0x97	; 151
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	0c f0       	brlt	.+2      	; 0x2d26 <ESP8266_VidConnectToWiFi+0x7f2>
    2d24:	43 c0       	rjmp	.+134    	; 0x2dac <ESP8266_VidConnectToWiFi+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d26:	fe 01       	movw	r30, r28
    2d28:	e3 59       	subi	r30, 0x93	; 147
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8e 01       	movw	r16, r28
    2d46:	09 59       	subi	r16, 0x99	; 153
    2d48:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    2d5c:	1f c0       	rjmp	.+62     	; 0x2d9c <ESP8266_VidConnectToWiFi+0x868>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	eb 59       	subi	r30, 0x9B	; 155
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	88 ec       	ldi	r24, 0xC8	; 200
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	eb 59       	subi	r30, 0x9B	; 155
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <ESP8266_VidConnectToWiFi+0x842>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	eb 59       	subi	r30, 0x9B	; 155
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	de 01       	movw	r26, r28
    2d86:	a9 59       	subi	r26, 0x99	; 153
    2d88:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e9 59       	subi	r30, 0x99	; 153
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	91 81       	ldd	r25, Z+1	; 0x01
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	11 96       	adiw	r26, 0x01	; 1
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e9 59       	subi	r30, 0x99	; 153
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	d1 f6       	brne	.-76     	; 0x2d5e <ESP8266_VidConnectToWiFi+0x82a>
    2daa:	27 c0       	rjmp	.+78     	; 0x2dfa <ESP8266_VidConnectToWiFi+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	8e 01       	movw	r16, r28
    2dae:	09 59       	subi	r16, 0x99	; 153
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 59       	subi	r30, 0x97	; 151
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	f8 01       	movw	r30, r16
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	80 83       	st	Z, r24
    2dce:	de 01       	movw	r26, r28
    2dd0:	ad 59       	subi	r26, 0x9D	; 157
    2dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e9 59       	subi	r30, 0x99	; 153
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	8d 93       	st	X+, r24
    2de0:	9c 93       	st	X, r25
    2de2:	fe 01       	movw	r30, r28
    2de4:	ed 59       	subi	r30, 0x9D	; 157
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 81       	ld	r24, Z
    2dea:	91 81       	ldd	r25, Z+1	; 0x01
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <ESP8266_VidConnectToWiFi+0x8b8>
    2df0:	fe 01       	movw	r30, r28
    2df2:	ed 59       	subi	r30, 0x9D	; 157
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	80 83       	st	Z, r24
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e1 5a       	subi	r30, 0xA1	; 161
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	aa e7       	ldi	r26, 0x7A	; 122
    2e06:	b4 e4       	ldi	r27, 0x44	; 68
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e10:	8e 01       	movw	r16, r28
    2e12:	05 5a       	subi	r16, 0xA5	; 165
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	fe 01       	movw	r30, r28
    2e18:	e1 5a       	subi	r30, 0xA1	; 161
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a ef       	ldi	r20, 0xFA	; 250
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	f8 01       	movw	r30, r16
    2e36:	80 83       	st	Z, r24
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	a2 83       	std	Z+2, r26	; 0x02
    2e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e5 5a       	subi	r30, 0xA5	; 165
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e8       	ldi	r20, 0x80	; 128
    2e52:	5f e3       	ldi	r21, 0x3F	; 63
    2e54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e58:	88 23       	and	r24, r24
    2e5a:	44 f4       	brge	.+16     	; 0x2e6c <ESP8266_VidConnectToWiFi+0x938>
		__ticks = 1;
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e7 5a       	subi	r30, 0xA7	; 167
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	64 c0       	rjmp	.+200    	; 0x2f34 <ESP8266_VidConnectToWiFi+0xa00>
	else if (__tmp > 65535)
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e5 5a       	subi	r30, 0xA5	; 165
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	3f ef       	ldi	r19, 0xFF	; 255
    2e7e:	4f e7       	ldi	r20, 0x7F	; 127
    2e80:	57 e4       	ldi	r21, 0x47	; 71
    2e82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e86:	18 16       	cp	r1, r24
    2e88:	0c f0       	brlt	.+2      	; 0x2e8c <ESP8266_VidConnectToWiFi+0x958>
    2e8a:	43 c0       	rjmp	.+134    	; 0x2f12 <ESP8266_VidConnectToWiFi+0x9de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e1 5a       	subi	r30, 0xA1	; 161
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	8e 01       	movw	r16, r28
    2eac:	07 5a       	subi	r16, 0xA7	; 167
    2eae:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
    2ec2:	1f c0       	rjmp	.+62     	; 0x2f02 <ESP8266_VidConnectToWiFi+0x9ce>
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e9 5a       	subi	r30, 0xA9	; 169
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	88 ec       	ldi	r24, 0xC8	; 200
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e9 5a       	subi	r30, 0xA9	; 169
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <ESP8266_VidConnectToWiFi+0x9a8>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e9 5a       	subi	r30, 0xA9	; 169
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	de 01       	movw	r26, r28
    2eec:	a7 5a       	subi	r26, 0xA7	; 167
    2eee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e7 5a       	subi	r30, 0xA7	; 167
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	91 81       	ldd	r25, Z+1	; 0x01
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	11 96       	adiw	r26, 0x01	; 1
    2efe:	9c 93       	st	X, r25
    2f00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f02:	fe 01       	movw	r30, r28
    2f04:	e7 5a       	subi	r30, 0xA7	; 167
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	d1 f6       	brne	.-76     	; 0x2ec4 <ESP8266_VidConnectToWiFi+0x990>
    2f10:	27 c0       	rjmp	.+78     	; 0x2f60 <ESP8266_VidConnectToWiFi+0xa2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f12:	8e 01       	movw	r16, r28
    2f14:	07 5a       	subi	r16, 0xA7	; 167
    2f16:	1f 4f       	sbci	r17, 0xFF	; 255
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e5 5a       	subi	r30, 0xA5	; 165
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	60 81       	ld	r22, Z
    2f20:	71 81       	ldd	r23, Z+1	; 0x01
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	93 81       	ldd	r25, Z+3	; 0x03
    2f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	f8 01       	movw	r30, r16
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	de 01       	movw	r26, r28
    2f36:	ab 5a       	subi	r26, 0xAB	; 171
    2f38:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e7 5a       	subi	r30, 0xA7	; 167
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	8d 93       	st	X+, r24
    2f46:	9c 93       	st	X, r25
    2f48:	fe 01       	movw	r30, r28
    2f4a:	eb 5a       	subi	r30, 0xAB	; 171
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	80 81       	ld	r24, Z
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <ESP8266_VidConnectToWiFi+0xa1e>
    2f56:	fe 01       	movw	r30, r28
    2f58:	eb 5a       	subi	r30, 0xAB	; 171
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	80 83       	st	Z, r24
    2f60:	fe 01       	movw	r30, r28
    2f62:	ef 5a       	subi	r30, 0xAF	; 175
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	aa e7       	ldi	r26, 0x7A	; 122
    2f6c:	b4 e4       	ldi	r27, 0x44	; 68
    2f6e:	80 83       	st	Z, r24
    2f70:	91 83       	std	Z+1, r25	; 0x01
    2f72:	a2 83       	std	Z+2, r26	; 0x02
    2f74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f76:	8e 01       	movw	r16, r28
    2f78:	03 5b       	subi	r16, 0xB3	; 179
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ef 5a       	subi	r30, 0xAF	; 175
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	60 81       	ld	r22, Z
    2f84:	71 81       	ldd	r23, Z+1	; 0x01
    2f86:	82 81       	ldd	r24, Z+2	; 0x02
    2f88:	93 81       	ldd	r25, Z+3	; 0x03
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4a ef       	ldi	r20, 0xFA	; 250
    2f90:	54 e4       	ldi	r21, 0x44	; 68
    2f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	80 83       	st	Z, r24
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	a2 83       	std	Z+2, r26	; 0x02
    2fa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e3 5b       	subi	r30, 0xB3	; 179
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e8       	ldi	r20, 0x80	; 128
    2fb8:	5f e3       	ldi	r21, 0x3F	; 63
    2fba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fbe:	88 23       	and	r24, r24
    2fc0:	44 f4       	brge	.+16     	; 0x2fd2 <ESP8266_VidConnectToWiFi+0xa9e>
		__ticks = 1;
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e5 5b       	subi	r30, 0xB5	; 181
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
    2fd0:	64 c0       	rjmp	.+200    	; 0x309a <ESP8266_VidConnectToWiFi+0xb66>
	else if (__tmp > 65535)
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e3 5b       	subi	r30, 0xB3	; 179
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	3f ef       	ldi	r19, 0xFF	; 255
    2fe4:	4f e7       	ldi	r20, 0x7F	; 127
    2fe6:	57 e4       	ldi	r21, 0x47	; 71
    2fe8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fec:	18 16       	cp	r1, r24
    2fee:	0c f0       	brlt	.+2      	; 0x2ff2 <ESP8266_VidConnectToWiFi+0xabe>
    2ff0:	43 c0       	rjmp	.+134    	; 0x3078 <ESP8266_VidConnectToWiFi+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	ef 5a       	subi	r30, 0xAF	; 175
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8e 01       	movw	r16, r28
    3012:	05 5b       	subi	r16, 0xB5	; 181
    3014:	1f 4f       	sbci	r17, 0xFF	; 255
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	f8 01       	movw	r30, r16
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	1f c0       	rjmp	.+62     	; 0x3068 <ESP8266_VidConnectToWiFi+0xb34>
    302a:	fe 01       	movw	r30, r28
    302c:	e7 5b       	subi	r30, 0xB7	; 183
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	88 ec       	ldi	r24, 0xC8	; 200
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
    3038:	fe 01       	movw	r30, r28
    303a:	e7 5b       	subi	r30, 0xB7	; 183
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 81       	ld	r24, Z
    3040:	91 81       	ldd	r25, Z+1	; 0x01
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <ESP8266_VidConnectToWiFi+0xb0e>
    3046:	fe 01       	movw	r30, r28
    3048:	e7 5b       	subi	r30, 0xB7	; 183
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	91 83       	std	Z+1, r25	; 0x01
    304e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3050:	de 01       	movw	r26, r28
    3052:	a5 5b       	subi	r26, 0xB5	; 181
    3054:	bf 4f       	sbci	r27, 0xFF	; 255
    3056:	fe 01       	movw	r30, r28
    3058:	e5 5b       	subi	r30, 0xB5	; 181
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	11 96       	adiw	r26, 0x01	; 1
    3064:	9c 93       	st	X, r25
    3066:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3068:	fe 01       	movw	r30, r28
    306a:	e5 5b       	subi	r30, 0xB5	; 181
    306c:	ff 4f       	sbci	r31, 0xFF	; 255
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	d1 f6       	brne	.-76     	; 0x302a <ESP8266_VidConnectToWiFi+0xaf6>
    3076:	27 c0       	rjmp	.+78     	; 0x30c6 <ESP8266_VidConnectToWiFi+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3078:	8e 01       	movw	r16, r28
    307a:	05 5b       	subi	r16, 0xB5	; 181
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	fe 01       	movw	r30, r28
    3080:	e3 5b       	subi	r30, 0xB3	; 179
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	60 81       	ld	r22, Z
    3086:	71 81       	ldd	r23, Z+1	; 0x01
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	f8 01       	movw	r30, r16
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	de 01       	movw	r26, r28
    309c:	a9 5b       	subi	r26, 0xB9	; 185
    309e:	bf 4f       	sbci	r27, 0xFF	; 255
    30a0:	fe 01       	movw	r30, r28
    30a2:	e5 5b       	subi	r30, 0xB5	; 181
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	8d 93       	st	X+, r24
    30ac:	9c 93       	st	X, r25
    30ae:	fe 01       	movw	r30, r28
    30b0:	e9 5b       	subi	r30, 0xB9	; 185
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	91 81       	ldd	r25, Z+1	; 0x01
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <ESP8266_VidConnectToWiFi+0xb84>
    30bc:	fe 01       	movw	r30, r28
    30be:	e9 5b       	subi	r30, 0xB9	; 185
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	80 83       	st	Z, r24
    30c6:	fe 01       	movw	r30, r28
    30c8:	ed 5b       	subi	r30, 0xBD	; 189
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	aa e7       	ldi	r26, 0x7A	; 122
    30d2:	b4 e4       	ldi	r27, 0x44	; 68
    30d4:	80 83       	st	Z, r24
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	a2 83       	std	Z+2, r26	; 0x02
    30da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	8e 01       	movw	r16, r28
    30de:	01 5c       	subi	r16, 0xC1	; 193
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	fe 01       	movw	r30, r28
    30e4:	ed 5b       	subi	r30, 0xBD	; 189
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	93 81       	ldd	r25, Z+3	; 0x03
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a ef       	ldi	r20, 0xFA	; 250
    30f6:	54 e4       	ldi	r21, 0x44	; 68
    30f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	f8 01       	movw	r30, r16
    3102:	80 83       	st	Z, r24
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	a2 83       	std	Z+2, r26	; 0x02
    3108:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    310a:	fe 01       	movw	r30, r28
    310c:	ff 96       	adiw	r30, 0x3f	; 63
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e8       	ldi	r20, 0x80	; 128
    311c:	5f e3       	ldi	r21, 0x3F	; 63
    311e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3122:	88 23       	and	r24, r24
    3124:	2c f4       	brge	.+10     	; 0x3130 <ESP8266_VidConnectToWiFi+0xbfc>
		__ticks = 1;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9e af       	std	Y+62, r25	; 0x3e
    312c:	8d af       	std	Y+61, r24	; 0x3d
    312e:	46 c0       	rjmp	.+140    	; 0x31bc <ESP8266_VidConnectToWiFi+0xc88>
	else if (__tmp > 65535)
    3130:	fe 01       	movw	r30, r28
    3132:	ff 96       	adiw	r30, 0x3f	; 63
    3134:	60 81       	ld	r22, Z
    3136:	71 81       	ldd	r23, Z+1	; 0x01
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	93 81       	ldd	r25, Z+3	; 0x03
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	3f ef       	ldi	r19, 0xFF	; 255
    3140:	4f e7       	ldi	r20, 0x7F	; 127
    3142:	57 e4       	ldi	r21, 0x47	; 71
    3144:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3148:	18 16       	cp	r1, r24
    314a:	64 f5       	brge	.+88     	; 0x31a4 <ESP8266_VidConnectToWiFi+0xc70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314c:	fe 01       	movw	r30, r28
    314e:	ed 5b       	subi	r30, 0xBD	; 189
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	60 81       	ld	r22, Z
    3154:	71 81       	ldd	r23, Z+1	; 0x01
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e2       	ldi	r20, 0x20	; 32
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9e af       	std	Y+62, r25	; 0x3e
    3178:	8d af       	std	Y+61, r24	; 0x3d
    317a:	0f c0       	rjmp	.+30     	; 0x319a <ESP8266_VidConnectToWiFi+0xc66>
    317c:	88 ec       	ldi	r24, 0xC8	; 200
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9c af       	std	Y+60, r25	; 0x3c
    3182:	8b af       	std	Y+59, r24	; 0x3b
    3184:	8b ad       	ldd	r24, Y+59	; 0x3b
    3186:	9c ad       	ldd	r25, Y+60	; 0x3c
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <ESP8266_VidConnectToWiFi+0xc54>
    318c:	9c af       	std	Y+60, r25	; 0x3c
    318e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	8d ad       	ldd	r24, Y+61	; 0x3d
    3192:	9e ad       	ldd	r25, Y+62	; 0x3e
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	9e af       	std	Y+62, r25	; 0x3e
    3198:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	8d ad       	ldd	r24, Y+61	; 0x3d
    319c:	9e ad       	ldd	r25, Y+62	; 0x3e
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	69 f7       	brne	.-38     	; 0x317c <ESP8266_VidConnectToWiFi+0xc48>
    31a2:	16 c0       	rjmp	.+44     	; 0x31d0 <ESP8266_VidConnectToWiFi+0xc9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a4:	fe 01       	movw	r30, r28
    31a6:	ff 96       	adiw	r30, 0x3f	; 63
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	93 81       	ldd	r25, Z+3	; 0x03
    31b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9e af       	std	Y+62, r25	; 0x3e
    31ba:	8d af       	std	Y+61, r24	; 0x3d
    31bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    31be:	9e ad       	ldd	r25, Y+62	; 0x3e
    31c0:	9a af       	std	Y+58, r25	; 0x3a
    31c2:	89 af       	std	Y+57, r24	; 0x39
    31c4:	89 ad       	ldd	r24, Y+57	; 0x39
    31c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <ESP8266_VidConnectToWiFi+0xc94>
    31cc:	9a af       	std	Y+58, r25	; 0x3a
    31ce:	89 af       	std	Y+57, r24	; 0x39
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	aa e7       	ldi	r26, 0x7A	; 122
    31d6:	b4 e4       	ldi	r27, 0x44	; 68
    31d8:	8d ab       	std	Y+53, r24	; 0x35
    31da:	9e ab       	std	Y+54, r25	; 0x36
    31dc:	af ab       	std	Y+55, r26	; 0x37
    31de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	6d a9       	ldd	r22, Y+53	; 0x35
    31e2:	7e a9       	ldd	r23, Y+54	; 0x36
    31e4:	8f a9       	ldd	r24, Y+55	; 0x37
    31e6:	98 ad       	ldd	r25, Y+56	; 0x38
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	4a ef       	ldi	r20, 0xFA	; 250
    31ee:	54 e4       	ldi	r21, 0x44	; 68
    31f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	89 ab       	std	Y+49, r24	; 0x31
    31fa:	9a ab       	std	Y+50, r25	; 0x32
    31fc:	ab ab       	std	Y+51, r26	; 0x33
    31fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3200:	69 a9       	ldd	r22, Y+49	; 0x31
    3202:	7a a9       	ldd	r23, Y+50	; 0x32
    3204:	8b a9       	ldd	r24, Y+51	; 0x33
    3206:	9c a9       	ldd	r25, Y+52	; 0x34
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	2c f4       	brge	.+10     	; 0x3222 <ESP8266_VidConnectToWiFi+0xcee>
		__ticks = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	98 ab       	std	Y+48, r25	; 0x30
    321e:	8f a7       	std	Y+47, r24	; 0x2f
    3220:	3f c0       	rjmp	.+126    	; 0x32a0 <ESP8266_VidConnectToWiFi+0xd6c>
	else if (__tmp > 65535)
    3222:	69 a9       	ldd	r22, Y+49	; 0x31
    3224:	7a a9       	ldd	r23, Y+50	; 0x32
    3226:	8b a9       	ldd	r24, Y+51	; 0x33
    3228:	9c a9       	ldd	r25, Y+52	; 0x34
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	4c f5       	brge	.+82     	; 0x328c <ESP8266_VidConnectToWiFi+0xd58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323a:	6d a9       	ldd	r22, Y+53	; 0x35
    323c:	7e a9       	ldd	r23, Y+54	; 0x36
    323e:	8f a9       	ldd	r24, Y+55	; 0x37
    3240:	98 ad       	ldd	r25, Y+56	; 0x38
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e2       	ldi	r20, 0x20	; 32
    3248:	51 e4       	ldi	r21, 0x41	; 65
    324a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	98 ab       	std	Y+48, r25	; 0x30
    3260:	8f a7       	std	Y+47, r24	; 0x2f
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <ESP8266_VidConnectToWiFi+0xd4e>
    3264:	88 ec       	ldi	r24, 0xC8	; 200
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9e a7       	std	Y+46, r25	; 0x2e
    326a:	8d a7       	std	Y+45, r24	; 0x2d
    326c:	8d a5       	ldd	r24, Y+45	; 0x2d
    326e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <ESP8266_VidConnectToWiFi+0xd3c>
    3274:	9e a7       	std	Y+46, r25	; 0x2e
    3276:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	8f a5       	ldd	r24, Y+47	; 0x2f
    327a:	98 a9       	ldd	r25, Y+48	; 0x30
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	98 ab       	std	Y+48, r25	; 0x30
    3280:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3282:	8f a5       	ldd	r24, Y+47	; 0x2f
    3284:	98 a9       	ldd	r25, Y+48	; 0x30
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	69 f7       	brne	.-38     	; 0x3264 <ESP8266_VidConnectToWiFi+0xd30>
    328a:	14 c0       	rjmp	.+40     	; 0x32b4 <ESP8266_VidConnectToWiFi+0xd80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328c:	69 a9       	ldd	r22, Y+49	; 0x31
    328e:	7a a9       	ldd	r23, Y+50	; 0x32
    3290:	8b a9       	ldd	r24, Y+51	; 0x33
    3292:	9c a9       	ldd	r25, Y+52	; 0x34
    3294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	98 ab       	std	Y+48, r25	; 0x30
    329e:	8f a7       	std	Y+47, r24	; 0x2f
    32a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a2:	98 a9       	ldd	r25, Y+48	; 0x30
    32a4:	9c a7       	std	Y+44, r25	; 0x2c
    32a6:	8b a7       	std	Y+43, r24	; 0x2b
    32a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    32aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <ESP8266_VidConnectToWiFi+0xd78>
    32b0:	9c a7       	std	Y+44, r25	; 0x2c
    32b2:	8b a7       	std	Y+43, r24	; 0x2b
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	aa e7       	ldi	r26, 0x7A	; 122
    32ba:	b4 e4       	ldi	r27, 0x44	; 68
    32bc:	8f a3       	std	Y+39, r24	; 0x27
    32be:	98 a7       	std	Y+40, r25	; 0x28
    32c0:	a9 a7       	std	Y+41, r26	; 0x29
    32c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	6f a1       	ldd	r22, Y+39	; 0x27
    32c6:	78 a5       	ldd	r23, Y+40	; 0x28
    32c8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a ef       	ldi	r20, 0xFA	; 250
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8b a3       	std	Y+35, r24	; 0x23
    32de:	9c a3       	std	Y+36, r25	; 0x24
    32e0:	ad a3       	std	Y+37, r26	; 0x25
    32e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32e4:	6b a1       	ldd	r22, Y+35	; 0x23
    32e6:	7c a1       	ldd	r23, Y+36	; 0x24
    32e8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ea:	9e a1       	ldd	r25, Y+38	; 0x26
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <ESP8266_VidConnectToWiFi+0xdd2>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9a a3       	std	Y+34, r25	; 0x22
    3302:	89 a3       	std	Y+33, r24	; 0x21
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <ESP8266_VidConnectToWiFi+0xe50>
	else if (__tmp > 65535)
    3306:	6b a1       	ldd	r22, Y+35	; 0x23
    3308:	7c a1       	ldd	r23, Y+36	; 0x24
    330a:	8d a1       	ldd	r24, Y+37	; 0x25
    330c:	9e a1       	ldd	r25, Y+38	; 0x26
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <ESP8266_VidConnectToWiFi+0xe3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	6f a1       	ldd	r22, Y+39	; 0x27
    3320:	78 a5       	ldd	r23, Y+40	; 0x28
    3322:	89 a5       	ldd	r24, Y+41	; 0x29
    3324:	9a a5       	ldd	r25, Y+42	; 0x2a
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9a a3       	std	Y+34, r25	; 0x22
    3344:	89 a3       	std	Y+33, r24	; 0x21
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <ESP8266_VidConnectToWiFi+0xe32>
    3348:	88 ec       	ldi	r24, 0xC8	; 200
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	98 a3       	std	Y+32, r25	; 0x20
    334e:	8f 8f       	std	Y+31, r24	; 0x1f
    3350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3352:	98 a1       	ldd	r25, Y+32	; 0x20
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <ESP8266_VidConnectToWiFi+0xe20>
    3358:	98 a3       	std	Y+32, r25	; 0x20
    335a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	89 a1       	ldd	r24, Y+33	; 0x21
    335e:	9a a1       	ldd	r25, Y+34	; 0x22
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9a a3       	std	Y+34, r25	; 0x22
    3364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	89 a1       	ldd	r24, Y+33	; 0x21
    3368:	9a a1       	ldd	r25, Y+34	; 0x22
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <ESP8266_VidConnectToWiFi+0xe14>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <ESP8266_VidConnectToWiFi+0xe64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6b a1       	ldd	r22, Y+35	; 0x23
    3372:	7c a1       	ldd	r23, Y+36	; 0x24
    3374:	8d a1       	ldd	r24, Y+37	; 0x25
    3376:	9e a1       	ldd	r25, Y+38	; 0x26
    3378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9a a3       	std	Y+34, r25	; 0x22
    3382:	89 a3       	std	Y+33, r24	; 0x21
    3384:	89 a1       	ldd	r24, Y+33	; 0x21
    3386:	9a a1       	ldd	r25, Y+34	; 0x22
    3388:	9e 8f       	std	Y+30, r25	; 0x1e
    338a:	8d 8f       	std	Y+29, r24	; 0x1d
    338c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    338e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <ESP8266_VidConnectToWiFi+0xe5c>
    3394:	9e 8f       	std	Y+30, r25	; 0x1e
    3396:	8d 8f       	std	Y+29, r24	; 0x1d
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	aa e7       	ldi	r26, 0x7A	; 122
    339e:	b4 e4       	ldi	r27, 0x44	; 68
    33a0:	89 8f       	std	Y+25, r24	; 0x19
    33a2:	9a 8f       	std	Y+26, r25	; 0x1a
    33a4:	ab 8f       	std	Y+27, r26	; 0x1b
    33a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a8:	69 8d       	ldd	r22, Y+25	; 0x19
    33aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	4a ef       	ldi	r20, 0xFA	; 250
    33b6:	54 e4       	ldi	r21, 0x44	; 68
    33b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	8d 8b       	std	Y+21, r24	; 0x15
    33c2:	9e 8b       	std	Y+22, r25	; 0x16
    33c4:	af 8b       	std	Y+23, r26	; 0x17
    33c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33c8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ca:	7e 89       	ldd	r23, Y+22	; 0x16
    33cc:	8f 89       	ldd	r24, Y+23	; 0x17
    33ce:	98 8d       	ldd	r25, Y+24	; 0x18
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	2c f4       	brge	.+10     	; 0x33ea <ESP8266_VidConnectToWiFi+0xeb6>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9c 8b       	std	Y+20, r25	; 0x14
    33e6:	8b 8b       	std	Y+19, r24	; 0x13
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <ESP8266_VidConnectToWiFi+0xf34>
	else if (__tmp > 65535)
    33ea:	6d 89       	ldd	r22, Y+21	; 0x15
    33ec:	7e 89       	ldd	r23, Y+22	; 0x16
    33ee:	8f 89       	ldd	r24, Y+23	; 0x17
    33f0:	98 8d       	ldd	r25, Y+24	; 0x18
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	3f ef       	ldi	r19, 0xFF	; 255
    33f6:	4f e7       	ldi	r20, 0x7F	; 127
    33f8:	57 e4       	ldi	r21, 0x47	; 71
    33fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33fe:	18 16       	cp	r1, r24
    3400:	4c f5       	brge	.+82     	; 0x3454 <ESP8266_VidConnectToWiFi+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3402:	69 8d       	ldd	r22, Y+25	; 0x19
    3404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e2       	ldi	r20, 0x20	; 32
    3410:	51 e4       	ldi	r21, 0x41	; 65
    3412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	9c 8b       	std	Y+20, r25	; 0x14
    3428:	8b 8b       	std	Y+19, r24	; 0x13
    342a:	0f c0       	rjmp	.+30     	; 0x344a <ESP8266_VidConnectToWiFi+0xf16>
    342c:	88 ec       	ldi	r24, 0xC8	; 200
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	9a 8b       	std	Y+18, r25	; 0x12
    3432:	89 8b       	std	Y+17, r24	; 0x11
    3434:	89 89       	ldd	r24, Y+17	; 0x11
    3436:	9a 89       	ldd	r25, Y+18	; 0x12
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <ESP8266_VidConnectToWiFi+0xf04>
    343c:	9a 8b       	std	Y+18, r25	; 0x12
    343e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3440:	8b 89       	ldd	r24, Y+19	; 0x13
    3442:	9c 89       	ldd	r25, Y+20	; 0x14
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	9c 8b       	std	Y+20, r25	; 0x14
    3448:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344a:	8b 89       	ldd	r24, Y+19	; 0x13
    344c:	9c 89       	ldd	r25, Y+20	; 0x14
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	69 f7       	brne	.-38     	; 0x342c <ESP8266_VidConnectToWiFi+0xef8>
    3452:	14 c0       	rjmp	.+40     	; 0x347c <ESP8266_VidConnectToWiFi+0xf48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	6d 89       	ldd	r22, Y+21	; 0x15
    3456:	7e 89       	ldd	r23, Y+22	; 0x16
    3458:	8f 89       	ldd	r24, Y+23	; 0x17
    345a:	98 8d       	ldd	r25, Y+24	; 0x18
    345c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9c 8b       	std	Y+20, r25	; 0x14
    3466:	8b 8b       	std	Y+19, r24	; 0x13
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	98 8b       	std	Y+16, r25	; 0x10
    346e:	8f 87       	std	Y+15, r24	; 0x0f
    3470:	8f 85       	ldd	r24, Y+15	; 0x0f
    3472:	98 89       	ldd	r25, Y+16	; 0x10
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <ESP8266_VidConnectToWiFi+0xf40>
    3478:	98 8b       	std	Y+16, r25	; 0x10
    347a:	8f 87       	std	Y+15, r24	; 0x0f
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	aa e7       	ldi	r26, 0x7A	; 122
    3482:	b4 e4       	ldi	r27, 0x44	; 68
    3484:	8b 87       	std	Y+11, r24	; 0x0b
    3486:	9c 87       	std	Y+12, r25	; 0x0c
    3488:	ad 87       	std	Y+13, r26	; 0x0d
    348a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	6b 85       	ldd	r22, Y+11	; 0x0b
    348e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3490:	8d 85       	ldd	r24, Y+13	; 0x0d
    3492:	9e 85       	ldd	r25, Y+14	; 0x0e
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a ef       	ldi	r20, 0xFA	; 250
    349a:	54 e4       	ldi	r21, 0x44	; 68
    349c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8f 83       	std	Y+7, r24	; 0x07
    34a6:	98 87       	std	Y+8, r25	; 0x08
    34a8:	a9 87       	std	Y+9, r26	; 0x09
    34aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <ESP8266_VidConnectToWiFi+0xf9a>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <ESP8266_VidConnectToWiFi+0x1018>
	else if (__tmp > 65535)
    34ce:	6f 81       	ldd	r22, Y+7	; 0x07
    34d0:	78 85       	ldd	r23, Y+8	; 0x08
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <ESP8266_VidConnectToWiFi+0x1004>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	0f c0       	rjmp	.+30     	; 0x352e <ESP8266_VidConnectToWiFi+0xffa>
    3510:	88 ec       	ldi	r24, 0xC8	; 200
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	8b 83       	std	Y+3, r24	; 0x03
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	9c 81       	ldd	r25, Y+4	; 0x04
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <ESP8266_VidConnectToWiFi+0xfe8>
    3520:	9c 83       	std	Y+4, r25	; 0x04
    3522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <ESP8266_VidConnectToWiFi+0xfdc>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <ESP8266_VidConnectToWiFi+0x102c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6f 81       	ldd	r22, Y+7	; 0x07
    353a:	78 85       	ldd	r23, Y+8	; 0x08
    353c:	89 85       	ldd	r24, Y+9	; 0x09
    353e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	8d 83       	std	Y+5, r24	; 0x05
    354c:	8d 81       	ldd	r24, Y+5	; 0x05
    354e:	9e 81       	ldd	r25, Y+6	; 0x06
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <ESP8266_VidConnectToWiFi+0x1024>
    355c:	9a 83       	std	Y+2, r25	; 0x02
    355e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	_delay_ms( 1000 );
	_delay_ms( 1000 );
	_delay_ms( 1000 );

}
    3560:	c6 54       	subi	r28, 0x46	; 70
    3562:	df 4f       	sbci	r29, 0xFF	; 255
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	08 95       	ret

00003578 <ESP8266_VidConnectToSrvTcp>:

void ESP8266_VidConnectToSrvTcp(u8* Copy_u8Domain, u8* Copy_u8Port)
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	62 97       	sbiw	r28, 0x12	; 18
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	98 8b       	std	Y+16, r25	; 0x10
    358e:	8f 87       	std	Y+15, r24	; 0x0f
    3590:	7a 8b       	std	Y+18, r23	; 0x12
    3592:	69 8b       	std	Y+17, r22	; 0x11
	USART_SendStr( (u8 *) "AT+CIPSTART=\"TCP\",\"" );
    3594:	8d eb       	ldi	r24, 0xBD	; 189
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) Copy_u8Domain );
    359c:	8f 85       	ldd	r24, Y+15	; 0x0f
    359e:	98 89       	ldd	r25, Y+16	; 0x10
    35a0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) "\"," );
    35a4:	81 ed       	ldi	r24, 0xD1	; 209
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) Copy_u8Port );
    35ac:	89 89       	ldd	r24, Y+17	; 0x11
    35ae:	9a 89       	ldd	r25, Y+18	; 0x12
    35b0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendStr( (u8 *) "\r\n" );
    35b4:	84 ed       	ldi	r24, 0xD4	; 212
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	aa e7       	ldi	r26, 0x7A	; 122
    35c2:	b4 e4       	ldi	r27, 0x44	; 68
    35c4:	8b 87       	std	Y+11, r24	; 0x0b
    35c6:	9c 87       	std	Y+12, r25	; 0x0c
    35c8:	ad 87       	std	Y+13, r26	; 0x0d
    35ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	4a ef       	ldi	r20, 0xFA	; 250
    35da:	54 e4       	ldi	r21, 0x44	; 68
    35dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	8f 83       	std	Y+7, r24	; 0x07
    35e6:	98 87       	std	Y+8, r25	; 0x08
    35e8:	a9 87       	std	Y+9, r26	; 0x09
    35ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e8       	ldi	r20, 0x80	; 128
    35fa:	5f e3       	ldi	r21, 0x3F	; 63
    35fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3600:	88 23       	and	r24, r24
    3602:	2c f4       	brge	.+10     	; 0x360e <ESP8266_VidConnectToSrvTcp+0x96>
		__ticks = 1;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	9e 83       	std	Y+6, r25	; 0x06
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	3f c0       	rjmp	.+126    	; 0x368c <ESP8266_VidConnectToSrvTcp+0x114>
	else if (__tmp > 65535)
    360e:	6f 81       	ldd	r22, Y+7	; 0x07
    3610:	78 85       	ldd	r23, Y+8	; 0x08
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	3f ef       	ldi	r19, 0xFF	; 255
    361a:	4f e7       	ldi	r20, 0x7F	; 127
    361c:	57 e4       	ldi	r21, 0x47	; 71
    361e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3622:	18 16       	cp	r1, r24
    3624:	4c f5       	brge	.+82     	; 0x3678 <ESP8266_VidConnectToSrvTcp+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3626:	6b 85       	ldd	r22, Y+11	; 0x0b
    3628:	7c 85       	ldd	r23, Y+12	; 0x0c
    362a:	8d 85       	ldd	r24, Y+13	; 0x0d
    362c:	9e 85       	ldd	r25, Y+14	; 0x0e
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e2       	ldi	r20, 0x20	; 32
    3634:	51 e4       	ldi	r21, 0x41	; 65
    3636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
    364e:	0f c0       	rjmp	.+30     	; 0x366e <ESP8266_VidConnectToSrvTcp+0xf6>
    3650:	88 ec       	ldi	r24, 0xC8	; 200
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	8b 83       	std	Y+3, r24	; 0x03
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <ESP8266_VidConnectToSrvTcp+0xe4>
    3660:	9c 83       	std	Y+4, r25	; 0x04
    3662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366e:	8d 81       	ldd	r24, Y+5	; 0x05
    3670:	9e 81       	ldd	r25, Y+6	; 0x06
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	69 f7       	brne	.-38     	; 0x3650 <ESP8266_VidConnectToSrvTcp+0xd8>
    3676:	14 c0       	rjmp	.+40     	; 0x36a0 <ESP8266_VidConnectToSrvTcp+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3678:	6f 81       	ldd	r22, Y+7	; 0x07
    367a:	78 85       	ldd	r23, Y+8	; 0x08
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3680:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e 83       	std	Y+6, r25	; 0x06
    368a:	8d 83       	std	Y+5, r24	; 0x05
    368c:	8d 81       	ldd	r24, Y+5	; 0x05
    368e:	9e 81       	ldd	r25, Y+6	; 0x06
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <ESP8266_VidConnectToSrvTcp+0x120>
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    36a0:	62 96       	adiw	r28, 0x12	; 18
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <ESP8266_u8GetHB>:

u8 ESP8266_u8GetHB(u8* arr)
{
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	a0 97       	sbiw	r28, 0x20	; 32
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	98 a3       	std	Y+32, r25	; 0x20
    36cc:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 result=0;
    36ce:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 i=0;
    36d0:	1d 8e       	std	Y+29, r1	; 0x1d
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    36d2:	87 ed       	ldi	r24, 0xD7	; 215
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	27 ee       	ldi	r18, 0xE7	; 231
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	b9 01       	movw	r22, r18
    36dc:	0e 94 bc 1a 	call	0x3578	; 0x3578 <ESP8266_VidConnectToSrvTcp>
	USART_SendStr( (u8 *) "AT+CIPSEND=55\r\n" );
    36e0:	8a ee       	ldi	r24, 0xEA	; 234
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a8 ec       	ldi	r26, 0xC8	; 200
    36ee:	b2 e4       	ldi	r27, 0x42	; 66
    36f0:	89 8f       	std	Y+25, r24	; 0x19
    36f2:	9a 8f       	std	Y+26, r25	; 0x1a
    36f4:	ab 8f       	std	Y+27, r26	; 0x1b
    36f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	69 8d       	ldd	r22, Y+25	; 0x19
    36fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a ef       	ldi	r20, 0xFA	; 250
    3706:	54 e4       	ldi	r21, 0x44	; 68
    3708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8d 8b       	std	Y+21, r24	; 0x15
    3712:	9e 8b       	std	Y+22, r25	; 0x16
    3714:	af 8b       	std	Y+23, r26	; 0x17
    3716:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3718:	6d 89       	ldd	r22, Y+21	; 0x15
    371a:	7e 89       	ldd	r23, Y+22	; 0x16
    371c:	8f 89       	ldd	r24, Y+23	; 0x17
    371e:	98 8d       	ldd	r25, Y+24	; 0x18
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <ESP8266_u8GetHB+0x88>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9c 8b       	std	Y+20, r25	; 0x14
    3736:	8b 8b       	std	Y+19, r24	; 0x13
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <ESP8266_u8GetHB+0x106>
	else if (__tmp > 65535)
    373a:	6d 89       	ldd	r22, Y+21	; 0x15
    373c:	7e 89       	ldd	r23, Y+22	; 0x16
    373e:	8f 89       	ldd	r24, Y+23	; 0x17
    3740:	98 8d       	ldd	r25, Y+24	; 0x18
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <ESP8266_u8GetHB+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	69 8d       	ldd	r22, Y+25	; 0x19
    3754:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9c 8b       	std	Y+20, r25	; 0x14
    3778:	8b 8b       	std	Y+19, r24	; 0x13
    377a:	0f c0       	rjmp	.+30     	; 0x379a <ESP8266_u8GetHB+0xe8>
    377c:	88 ec       	ldi	r24, 0xC8	; 200
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	9a 8b       	std	Y+18, r25	; 0x12
    3782:	89 8b       	std	Y+17, r24	; 0x11
    3784:	89 89       	ldd	r24, Y+17	; 0x11
    3786:	9a 89       	ldd	r25, Y+18	; 0x12
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <ESP8266_u8GetHB+0xd6>
    378c:	9a 8b       	std	Y+18, r25	; 0x12
    378e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	8b 89       	ldd	r24, Y+19	; 0x13
    3792:	9c 89       	ldd	r25, Y+20	; 0x14
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9c 8b       	std	Y+20, r25	; 0x14
    3798:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	8b 89       	ldd	r24, Y+19	; 0x13
    379c:	9c 89       	ldd	r25, Y+20	; 0x14
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <ESP8266_u8GetHB+0xca>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <ESP8266_u8GetHB+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6d 89       	ldd	r22, Y+21	; 0x15
    37a6:	7e 89       	ldd	r23, Y+22	; 0x16
    37a8:	8f 89       	ldd	r24, Y+23	; 0x17
    37aa:	98 8d       	ldd	r25, Y+24	; 0x18
    37ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9c 8b       	std	Y+20, r25	; 0x14
    37b6:	8b 8b       	std	Y+19, r24	; 0x13
    37b8:	8b 89       	ldd	r24, Y+19	; 0x13
    37ba:	9c 89       	ldd	r25, Y+20	; 0x14
    37bc:	98 8b       	std	Y+16, r25	; 0x10
    37be:	8f 87       	std	Y+15, r24	; 0x0f
    37c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c2:	98 89       	ldd	r25, Y+16	; 0x10
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <ESP8266_u8GetHB+0x112>
    37c8:	98 8b       	std	Y+16, r25	; 0x10
    37ca:	8f 87       	std	Y+15, r24	; 0x0f
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a8 ec       	ldi	r26, 0xC8	; 200
    37d2:	b2 e4       	ldi	r27, 0x42	; 66
    37d4:	8b 87       	std	Y+11, r24	; 0x0b
    37d6:	9c 87       	std	Y+12, r25	; 0x0c
    37d8:	ad 87       	std	Y+13, r26	; 0x0d
    37da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37de:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8f 83       	std	Y+7, r24	; 0x07
    37f6:	98 87       	std	Y+8, r25	; 0x08
    37f8:	a9 87       	std	Y+9, r26	; 0x09
    37fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <ESP8266_u8GetHB+0x16c>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	3f c0       	rjmp	.+126    	; 0x389c <ESP8266_u8GetHB+0x1ea>
	else if (__tmp > 65535)
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <ESP8266_u8GetHB+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6b 85       	ldd	r22, Y+11	; 0x0b
    3838:	7c 85       	ldd	r23, Y+12	; 0x0c
    383a:	8d 85       	ldd	r24, Y+13	; 0x0d
    383c:	9e 85       	ldd	r25, Y+14	; 0x0e
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	0f c0       	rjmp	.+30     	; 0x387e <ESP8266_u8GetHB+0x1cc>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <ESP8266_u8GetHB+0x1ba>
    3870:	9c 83       	std	Y+4, r25	; 0x04
    3872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <ESP8266_u8GetHB+0x1ae>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <ESP8266_u8GetHB+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6f 81       	ldd	r22, Y+7	; 0x07
    388a:	78 85       	ldd	r23, Y+8	; 0x08
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	9e 81       	ldd	r25, Y+6	; 0x06
    38a0:	9a 83       	std	Y+2, r25	; 0x02
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <ESP8266_u8GetHB+0x1f6>
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 100 );
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverHB.php?line=0\r\n");
    38b0:	8a ef       	ldi	r24, 0xFA	; 250
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>

	for(i=0;i<45;i++)
    38b8:	1d 8e       	std	Y+29, r1	; 0x1d
    38ba:	0f c0       	rjmp	.+30     	; 0x38da <ESP8266_u8GetHB+0x228>
	{
		arr[i]=USART_ReceiveDataPolling();
    38bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38c4:	98 a1       	ldd	r25, Y+32	; 0x20
    38c6:	8c 01       	movw	r16, r24
    38c8:	02 0f       	add	r16, r18
    38ca:	13 1f       	adc	r17, r19
    38cc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <USART_ReceiveDataPolling>
    38d0:	f8 01       	movw	r30, r16
    38d2:	80 83       	st	Z, r24
	_delay_ms( 100 );
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverHB.php?line=0\r\n");

	for(i=0;i<45;i++)
    38d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38d6:	8f 5f       	subi	r24, 0xFF	; 255
    38d8:	8d 8f       	std	Y+29, r24	; 0x1d
    38da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38dc:	8d 32       	cpi	r24, 0x2D	; 45
    38de:	70 f3       	brcs	.-36     	; 0x38bc <ESP8266_u8GetHB+0x20a>
	{
		arr[i]=USART_ReceiveDataPolling();
	}
	result = (arr[38]-48)*10+(arr[39]-48);
    38e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38e2:	98 a1       	ldd	r25, Y+32	; 0x20
    38e4:	fc 01       	movw	r30, r24
    38e6:	b6 96       	adiw	r30, 0x26	; 38
    38e8:	80 81       	ld	r24, Z
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	9c 01       	movw	r18, r24
    38f0:	22 0f       	add	r18, r18
    38f2:	33 1f       	adc	r19, r19
    38f4:	c9 01       	movw	r24, r18
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	82 0f       	add	r24, r18
    3900:	93 1f       	adc	r25, r19
    3902:	28 2f       	mov	r18, r24
    3904:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3906:	98 a1       	ldd	r25, Y+32	; 0x20
    3908:	fc 01       	movw	r30, r24
    390a:	b7 96       	adiw	r30, 0x27	; 39
    390c:	80 81       	ld	r24, Z
    390e:	82 0f       	add	r24, r18
    3910:	80 51       	subi	r24, 0x10	; 16
    3912:	8e 8f       	std	Y+30, r24	; 0x1e
	if(arr[40]>47 && arr[40]<58)
    3914:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3916:	98 a1       	ldd	r25, Y+32	; 0x20
    3918:	fc 01       	movw	r30, r24
    391a:	b8 96       	adiw	r30, 0x28	; 40
    391c:	80 81       	ld	r24, Z
    391e:	80 33       	cpi	r24, 0x30	; 48
    3920:	a0 f1       	brcs	.+104    	; 0x398a <ESP8266_u8GetHB+0x2d8>
    3922:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3924:	98 a1       	ldd	r25, Y+32	; 0x20
    3926:	fc 01       	movw	r30, r24
    3928:	b8 96       	adiw	r30, 0x28	; 40
    392a:	80 81       	ld	r24, Z
    392c:	8a 33       	cpi	r24, 0x3A	; 58
    392e:	68 f5       	brcc	.+90     	; 0x398a <ESP8266_u8GetHB+0x2d8>
	{
		result = (arr[38]-48)*100+(arr[39]-48)*10+(arr[40]-48);
    3930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3932:	98 a1       	ldd	r25, Y+32	; 0x20
    3934:	fc 01       	movw	r30, r24
    3936:	b6 96       	adiw	r30, 0x26	; 38
    3938:	80 81       	ld	r24, Z
    393a:	28 2f       	mov	r18, r24
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	84 e6       	ldi	r24, 0x64	; 100
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	ac 01       	movw	r20, r24
    3944:	24 9f       	mul	r18, r20
    3946:	c0 01       	movw	r24, r0
    3948:	25 9f       	mul	r18, r21
    394a:	90 0d       	add	r25, r0
    394c:	34 9f       	mul	r19, r20
    394e:	90 0d       	add	r25, r0
    3950:	11 24       	eor	r1, r1
    3952:	48 2f       	mov	r20, r24
    3954:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3956:	98 a1       	ldd	r25, Y+32	; 0x20
    3958:	fc 01       	movw	r30, r24
    395a:	b7 96       	adiw	r30, 0x27	; 39
    395c:	80 81       	ld	r24, Z
    395e:	88 2f       	mov	r24, r24
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9c 01       	movw	r18, r24
    3964:	22 0f       	add	r18, r18
    3966:	33 1f       	adc	r19, r19
    3968:	c9 01       	movw	r24, r18
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	88 0f       	add	r24, r24
    3970:	99 1f       	adc	r25, r25
    3972:	82 0f       	add	r24, r18
    3974:	93 1f       	adc	r25, r19
    3976:	24 2f       	mov	r18, r20
    3978:	28 0f       	add	r18, r24
    397a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    397c:	98 a1       	ldd	r25, Y+32	; 0x20
    397e:	fc 01       	movw	r30, r24
    3980:	b8 96       	adiw	r30, 0x28	; 40
    3982:	80 81       	ld	r24, Z
    3984:	82 0f       	add	r24, r18
    3986:	80 5d       	subi	r24, 0xD0	; 208
    3988:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	return result;
    398a:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    398c:	a0 96       	adiw	r28, 0x20	; 32
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	cf 91       	pop	r28
    399a:	df 91       	pop	r29
    399c:	1f 91       	pop	r17
    399e:	0f 91       	pop	r16
    39a0:	08 95       	ret

000039a2 <ESP8266_u8GetPR>:
u8 ESP8266_u8GetPR(u8* arr)
{
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	a0 97       	sbiw	r28, 0x20	; 32
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	98 a3       	std	Y+32, r25	; 0x20
    39bc:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 result=0;
    39be:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 i=0;
    39c0:	1d 8e       	std	Y+29, r1	; 0x1d
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    39c2:	87 ed       	ldi	r24, 0xD7	; 215
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	27 ee       	ldi	r18, 0xE7	; 231
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	b9 01       	movw	r22, r18
    39cc:	0e 94 bc 1a 	call	0x3578	; 0x3578 <ESP8266_VidConnectToSrvTcp>
	USART_SendStr( (u8 *) "AT+CIPSEND=55\r\n" );
    39d0:	8a ee       	ldi	r24, 0xEA	; 234
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a8 ec       	ldi	r26, 0xC8	; 200
    39de:	b2 e4       	ldi	r27, 0x42	; 66
    39e0:	89 8f       	std	Y+25, r24	; 0x19
    39e2:	9a 8f       	std	Y+26, r25	; 0x1a
    39e4:	ab 8f       	std	Y+27, r26	; 0x1b
    39e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e8:	69 8d       	ldd	r22, Y+25	; 0x19
    39ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	4a ef       	ldi	r20, 0xFA	; 250
    39f6:	54 e4       	ldi	r21, 0x44	; 68
    39f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	8d 8b       	std	Y+21, r24	; 0x15
    3a02:	9e 8b       	std	Y+22, r25	; 0x16
    3a04:	af 8b       	std	Y+23, r26	; 0x17
    3a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a08:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e8       	ldi	r20, 0x80	; 128
    3a16:	5f e3       	ldi	r21, 0x3F	; 63
    3a18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a1c:	88 23       	and	r24, r24
    3a1e:	2c f4       	brge	.+10     	; 0x3a2a <ESP8266_u8GetPR+0x88>
		__ticks = 1;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	9c 8b       	std	Y+20, r25	; 0x14
    3a26:	8b 8b       	std	Y+19, r24	; 0x13
    3a28:	3f c0       	rjmp	.+126    	; 0x3aa8 <ESP8266_u8GetPR+0x106>
	else if (__tmp > 65535)
    3a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a30:	98 8d       	ldd	r25, Y+24	; 0x18
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	3f ef       	ldi	r19, 0xFF	; 255
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	57 e4       	ldi	r21, 0x47	; 71
    3a3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a3e:	18 16       	cp	r1, r24
    3a40:	4c f5       	brge	.+82     	; 0x3a94 <ESP8266_u8GetPR+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a42:	69 8d       	ldd	r22, Y+25	; 0x19
    3a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	9c 8b       	std	Y+20, r25	; 0x14
    3a68:	8b 8b       	std	Y+19, r24	; 0x13
    3a6a:	0f c0       	rjmp	.+30     	; 0x3a8a <ESP8266_u8GetPR+0xe8>
    3a6c:	88 ec       	ldi	r24, 0xC8	; 200
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	9a 8b       	std	Y+18, r25	; 0x12
    3a72:	89 8b       	std	Y+17, r24	; 0x11
    3a74:	89 89       	ldd	r24, Y+17	; 0x11
    3a76:	9a 89       	ldd	r25, Y+18	; 0x12
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <ESP8266_u8GetPR+0xd6>
    3a7c:	9a 8b       	std	Y+18, r25	; 0x12
    3a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a80:	8b 89       	ldd	r24, Y+19	; 0x13
    3a82:	9c 89       	ldd	r25, Y+20	; 0x14
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	9c 8b       	std	Y+20, r25	; 0x14
    3a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	69 f7       	brne	.-38     	; 0x3a6c <ESP8266_u8GetPR+0xca>
    3a92:	14 c0       	rjmp	.+40     	; 0x3abc <ESP8266_u8GetPR+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a94:	6d 89       	ldd	r22, Y+21	; 0x15
    3a96:	7e 89       	ldd	r23, Y+22	; 0x16
    3a98:	8f 89       	ldd	r24, Y+23	; 0x17
    3a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9c 8b       	std	Y+20, r25	; 0x14
    3aa6:	8b 8b       	std	Y+19, r24	; 0x13
    3aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    3aac:	98 8b       	std	Y+16, r25	; 0x10
    3aae:	8f 87       	std	Y+15, r24	; 0x0f
    3ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab2:	98 89       	ldd	r25, Y+16	; 0x10
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <ESP8266_u8GetPR+0x112>
    3ab8:	98 8b       	std	Y+16, r25	; 0x10
    3aba:	8f 87       	std	Y+15, r24	; 0x0f
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ac2:	b2 e4       	ldi	r27, 0x42	; 66
    3ac4:	8b 87       	std	Y+11, r24	; 0x0b
    3ac6:	9c 87       	std	Y+12, r25	; 0x0c
    3ac8:	ad 87       	std	Y+13, r26	; 0x0d
    3aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	4a ef       	ldi	r20, 0xFA	; 250
    3ada:	54 e4       	ldi	r21, 0x44	; 68
    3adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	8f 83       	std	Y+7, r24	; 0x07
    3ae6:	98 87       	std	Y+8, r25	; 0x08
    3ae8:	a9 87       	std	Y+9, r26	; 0x09
    3aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aec:	6f 81       	ldd	r22, Y+7	; 0x07
    3aee:	78 85       	ldd	r23, Y+8	; 0x08
    3af0:	89 85       	ldd	r24, Y+9	; 0x09
    3af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e8       	ldi	r20, 0x80	; 128
    3afa:	5f e3       	ldi	r21, 0x3F	; 63
    3afc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b00:	88 23       	and	r24, r24
    3b02:	2c f4       	brge	.+10     	; 0x3b0e <ESP8266_u8GetPR+0x16c>
		__ticks = 1;
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9e 83       	std	Y+6, r25	; 0x06
    3b0a:	8d 83       	std	Y+5, r24	; 0x05
    3b0c:	3f c0       	rjmp	.+126    	; 0x3b8c <ESP8266_u8GetPR+0x1ea>
	else if (__tmp > 65535)
    3b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b10:	78 85       	ldd	r23, Y+8	; 0x08
    3b12:	89 85       	ldd	r24, Y+9	; 0x09
    3b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	3f ef       	ldi	r19, 0xFF	; 255
    3b1a:	4f e7       	ldi	r20, 0x7F	; 127
    3b1c:	57 e4       	ldi	r21, 0x47	; 71
    3b1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b22:	18 16       	cp	r1, r24
    3b24:	4c f5       	brge	.+82     	; 0x3b78 <ESP8266_u8GetPR+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	40 e2       	ldi	r20, 0x20	; 32
    3b34:	51 e4       	ldi	r21, 0x41	; 65
    3b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	9e 83       	std	Y+6, r25	; 0x06
    3b4c:	8d 83       	std	Y+5, r24	; 0x05
    3b4e:	0f c0       	rjmp	.+30     	; 0x3b6e <ESP8266_u8GetPR+0x1cc>
    3b50:	88 ec       	ldi	r24, 0xC8	; 200
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	9c 83       	std	Y+4, r25	; 0x04
    3b56:	8b 83       	std	Y+3, r24	; 0x03
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	f1 f7       	brne	.-4      	; 0x3b5c <ESP8266_u8GetPR+0x1ba>
    3b60:	9c 83       	std	Y+4, r25	; 0x04
    3b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b64:	8d 81       	ldd	r24, Y+5	; 0x05
    3b66:	9e 81       	ldd	r25, Y+6	; 0x06
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	9e 83       	std	Y+6, r25	; 0x06
    3b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b70:	9e 81       	ldd	r25, Y+6	; 0x06
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	69 f7       	brne	.-38     	; 0x3b50 <ESP8266_u8GetPR+0x1ae>
    3b76:	14 c0       	rjmp	.+40     	; 0x3ba0 <ESP8266_u8GetPR+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b78:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7a:	78 85       	ldd	r23, Y+8	; 0x08
    3b7c:	89 85       	ldd	r24, Y+9	; 0x09
    3b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	9e 83       	std	Y+6, r25	; 0x06
    3b8a:	8d 83       	std	Y+5, r24	; 0x05
    3b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b90:	9a 83       	std	Y+2, r25	; 0x02
    3b92:	89 83       	std	Y+1, r24	; 0x01
    3b94:	89 81       	ldd	r24, Y+1	; 0x01
    3b96:	9a 81       	ldd	r25, Y+2	; 0x02
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <ESP8266_u8GetPR+0x1f6>
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 100 );
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverPR.php?line=0\r\n");
    3ba0:	82 e3       	ldi	r24, 0x32	; 50
    3ba2:	91 e0       	ldi	r25, 0x01	; 1
    3ba4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>

	for(i=0;i<45;i++)
    3ba8:	1d 8e       	std	Y+29, r1	; 0x1d
    3baa:	0f c0       	rjmp	.+30     	; 0x3bca <ESP8266_u8GetPR+0x228>
	{
		arr[i]=USART_ReceiveDataPolling();
    3bac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bae:	28 2f       	mov	r18, r24
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bb4:	98 a1       	ldd	r25, Y+32	; 0x20
    3bb6:	8c 01       	movw	r16, r24
    3bb8:	02 0f       	add	r16, r18
    3bba:	13 1f       	adc	r17, r19
    3bbc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <USART_ReceiveDataPolling>
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	80 83       	st	Z, r24
	_delay_ms( 100 );
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverPR.php?line=0\r\n");

	for(i=0;i<45;i++)
    3bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bc6:	8f 5f       	subi	r24, 0xFF	; 255
    3bc8:	8d 8f       	std	Y+29, r24	; 0x1d
    3bca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bcc:	8d 32       	cpi	r24, 0x2D	; 45
    3bce:	70 f3       	brcs	.-36     	; 0x3bac <ESP8266_u8GetPR+0x20a>
	{
		arr[i]=USART_ReceiveDataPolling();
	}
	result = (arr[38]-48)*10+(arr[39]-48);
    3bd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bd2:	98 a1       	ldd	r25, Y+32	; 0x20
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	b6 96       	adiw	r30, 0x26	; 38
    3bd8:	80 81       	ld	r24, Z
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	9c 01       	movw	r18, r24
    3be0:	22 0f       	add	r18, r18
    3be2:	33 1f       	adc	r19, r19
    3be4:	c9 01       	movw	r24, r18
    3be6:	88 0f       	add	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	88 0f       	add	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	82 0f       	add	r24, r18
    3bf0:	93 1f       	adc	r25, r19
    3bf2:	28 2f       	mov	r18, r24
    3bf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bf6:	98 a1       	ldd	r25, Y+32	; 0x20
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	b7 96       	adiw	r30, 0x27	; 39
    3bfc:	80 81       	ld	r24, Z
    3bfe:	82 0f       	add	r24, r18
    3c00:	80 51       	subi	r24, 0x10	; 16
    3c02:	8e 8f       	std	Y+30, r24	; 0x1e
	if(arr[40]>47 && arr[40]<58)
    3c04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c06:	98 a1       	ldd	r25, Y+32	; 0x20
    3c08:	fc 01       	movw	r30, r24
    3c0a:	b8 96       	adiw	r30, 0x28	; 40
    3c0c:	80 81       	ld	r24, Z
    3c0e:	80 33       	cpi	r24, 0x30	; 48
    3c10:	a0 f1       	brcs	.+104    	; 0x3c7a <ESP8266_u8GetPR+0x2d8>
    3c12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c14:	98 a1       	ldd	r25, Y+32	; 0x20
    3c16:	fc 01       	movw	r30, r24
    3c18:	b8 96       	adiw	r30, 0x28	; 40
    3c1a:	80 81       	ld	r24, Z
    3c1c:	8a 33       	cpi	r24, 0x3A	; 58
    3c1e:	68 f5       	brcc	.+90     	; 0x3c7a <ESP8266_u8GetPR+0x2d8>
	{
		result = (arr[38]-48)*100+(arr[39]-48)*10+(arr[40]-48);
    3c20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c22:	98 a1       	ldd	r25, Y+32	; 0x20
    3c24:	fc 01       	movw	r30, r24
    3c26:	b6 96       	adiw	r30, 0x26	; 38
    3c28:	80 81       	ld	r24, Z
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	84 e6       	ldi	r24, 0x64	; 100
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	ac 01       	movw	r20, r24
    3c34:	24 9f       	mul	r18, r20
    3c36:	c0 01       	movw	r24, r0
    3c38:	25 9f       	mul	r18, r21
    3c3a:	90 0d       	add	r25, r0
    3c3c:	34 9f       	mul	r19, r20
    3c3e:	90 0d       	add	r25, r0
    3c40:	11 24       	eor	r1, r1
    3c42:	48 2f       	mov	r20, r24
    3c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c46:	98 a1       	ldd	r25, Y+32	; 0x20
    3c48:	fc 01       	movw	r30, r24
    3c4a:	b7 96       	adiw	r30, 0x27	; 39
    3c4c:	80 81       	ld	r24, Z
    3c4e:	88 2f       	mov	r24, r24
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	9c 01       	movw	r18, r24
    3c54:	22 0f       	add	r18, r18
    3c56:	33 1f       	adc	r19, r19
    3c58:	c9 01       	movw	r24, r18
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	88 0f       	add	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	82 0f       	add	r24, r18
    3c64:	93 1f       	adc	r25, r19
    3c66:	24 2f       	mov	r18, r20
    3c68:	28 0f       	add	r18, r24
    3c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c6c:	98 a1       	ldd	r25, Y+32	; 0x20
    3c6e:	fc 01       	movw	r30, r24
    3c70:	b8 96       	adiw	r30, 0x28	; 40
    3c72:	80 81       	ld	r24, Z
    3c74:	82 0f       	add	r24, r18
    3c76:	80 5d       	subi	r24, 0xD0	; 208
    3c78:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	return result;
    3c7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    3c7c:	a0 96       	adiw	r28, 0x20	; 32
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	de bf       	out	0x3e, r29	; 62
    3c84:	0f be       	out	0x3f, r0	; 63
    3c86:	cd bf       	out	0x3d, r28	; 61
    3c88:	cf 91       	pop	r28
    3c8a:	df 91       	pop	r29
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	08 95       	ret

00003c92 <ESP8266_VidSendHB>:

void ESP8266_VidSendHB(u8 Copy_u8HB)
{
    3c92:	df 93       	push	r29
    3c94:	cf 93       	push	r28
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
    3c9a:	ab 97       	sbiw	r28, 0x2b	; 43
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	8b a7       	std	Y+43, r24	; 0x2b
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    3ca8:	87 ed       	ldi	r24, 0xD7	; 215
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	27 ee       	ldi	r18, 0xE7	; 231
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	b9 01       	movw	r22, r18
    3cb2:	0e 94 bc 1a 	call	0x3578	; 0x3578 <ESP8266_VidConnectToSrvTcp>
	if(((Copy_u8HB/10)/10)==0)
    3cb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cb8:	84 36       	cpi	r24, 0x64	; 100
    3cba:	28 f4       	brcc	.+10     	; 0x3cc6 <ESP8266_VidSendHB+0x34>
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=59\r\n" );
    3cbc:	8a e6       	ldi	r24, 0x6A	; 106
    3cbe:	91 e0       	ldi	r25, 0x01	; 1
    3cc0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    3cc4:	04 c0       	rjmp	.+8      	; 0x3cce <ESP8266_VidSendHB+0x3c>
	}
	else
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=60\r\n" );
    3cc6:	8a e7       	ldi	r24, 0x7A	; 122
    3cc8:	91 e0       	ldi	r25, 0x01	; 1
    3cca:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	a8 ec       	ldi	r26, 0xC8	; 200
    3cd4:	b2 e4       	ldi	r27, 0x42	; 66
    3cd6:	8f a3       	std	Y+39, r24	; 0x27
    3cd8:	98 a7       	std	Y+40, r25	; 0x28
    3cda:	a9 a7       	std	Y+41, r26	; 0x29
    3cdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cde:	6f a1       	ldd	r22, Y+39	; 0x27
    3ce0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ce4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	4a ef       	ldi	r20, 0xFA	; 250
    3cec:	54 e4       	ldi	r21, 0x44	; 68
    3cee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	8b a3       	std	Y+35, r24	; 0x23
    3cf8:	9c a3       	std	Y+36, r25	; 0x24
    3cfa:	ad a3       	std	Y+37, r26	; 0x25
    3cfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cfe:	6b a1       	ldd	r22, Y+35	; 0x23
    3d00:	7c a1       	ldd	r23, Y+36	; 0x24
    3d02:	8d a1       	ldd	r24, Y+37	; 0x25
    3d04:	9e a1       	ldd	r25, Y+38	; 0x26
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e8       	ldi	r20, 0x80	; 128
    3d0c:	5f e3       	ldi	r21, 0x3F	; 63
    3d0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d12:	88 23       	and	r24, r24
    3d14:	2c f4       	brge	.+10     	; 0x3d20 <ESP8266_VidSendHB+0x8e>
		__ticks = 1;
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	9a a3       	std	Y+34, r25	; 0x22
    3d1c:	89 a3       	std	Y+33, r24	; 0x21
    3d1e:	3f c0       	rjmp	.+126    	; 0x3d9e <ESP8266_VidSendHB+0x10c>
	else if (__tmp > 65535)
    3d20:	6b a1       	ldd	r22, Y+35	; 0x23
    3d22:	7c a1       	ldd	r23, Y+36	; 0x24
    3d24:	8d a1       	ldd	r24, Y+37	; 0x25
    3d26:	9e a1       	ldd	r25, Y+38	; 0x26
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	3f ef       	ldi	r19, 0xFF	; 255
    3d2c:	4f e7       	ldi	r20, 0x7F	; 127
    3d2e:	57 e4       	ldi	r21, 0x47	; 71
    3d30:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d34:	18 16       	cp	r1, r24
    3d36:	4c f5       	brge	.+82     	; 0x3d8a <ESP8266_VidSendHB+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d38:	6f a1       	ldd	r22, Y+39	; 0x27
    3d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e2       	ldi	r20, 0x20	; 32
    3d46:	51 e4       	ldi	r21, 0x41	; 65
    3d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	9a a3       	std	Y+34, r25	; 0x22
    3d5e:	89 a3       	std	Y+33, r24	; 0x21
    3d60:	0f c0       	rjmp	.+30     	; 0x3d80 <ESP8266_VidSendHB+0xee>
    3d62:	88 ec       	ldi	r24, 0xC8	; 200
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	98 a3       	std	Y+32, r25	; 0x20
    3d68:	8f 8f       	std	Y+31, r24	; 0x1f
    3d6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d6c:	98 a1       	ldd	r25, Y+32	; 0x20
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <ESP8266_VidSendHB+0xdc>
    3d72:	98 a3       	std	Y+32, r25	; 0x20
    3d74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d76:	89 a1       	ldd	r24, Y+33	; 0x21
    3d78:	9a a1       	ldd	r25, Y+34	; 0x22
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	9a a3       	std	Y+34, r25	; 0x22
    3d7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d80:	89 a1       	ldd	r24, Y+33	; 0x21
    3d82:	9a a1       	ldd	r25, Y+34	; 0x22
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	69 f7       	brne	.-38     	; 0x3d62 <ESP8266_VidSendHB+0xd0>
    3d88:	14 c0       	rjmp	.+40     	; 0x3db2 <ESP8266_VidSendHB+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    3d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    3d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    3d90:	9e a1       	ldd	r25, Y+38	; 0x26
    3d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9a a3       	std	Y+34, r25	; 0x22
    3d9c:	89 a3       	std	Y+33, r24	; 0x21
    3d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    3da0:	9a a1       	ldd	r25, Y+34	; 0x22
    3da2:	9e 8f       	std	Y+30, r25	; 0x1e
    3da4:	8d 8f       	std	Y+29, r24	; 0x1d
    3da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3da8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <ESP8266_VidSendHB+0x118>
    3dae:	9e 8f       	std	Y+30, r25	; 0x1e
    3db0:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/TransmitterHB.php?data=");
    3db2:	8a e8       	ldi	r24, 0x8A	; 138
    3db4:	91 e0       	ldi	r25, 0x01	; 1
    3db6:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendInteger(Copy_u8HB);
    3dba:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dbc:	88 2f       	mov	r24, r24
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <USART_SendInteger>
	USART_SendStr((u8 *)"\r\n");
    3dc4:	84 ed       	ldi	r24, 0xD4	; 212
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	aa e7       	ldi	r26, 0x7A	; 122
    3dd2:	b4 e4       	ldi	r27, 0x44	; 68
    3dd4:	89 8f       	std	Y+25, r24	; 0x19
    3dd6:	9a 8f       	std	Y+26, r25	; 0x1a
    3dd8:	ab 8f       	std	Y+27, r26	; 0x1b
    3dda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    3dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	4a ef       	ldi	r20, 0xFA	; 250
    3dea:	54 e4       	ldi	r21, 0x44	; 68
    3dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	8d 8b       	std	Y+21, r24	; 0x15
    3df6:	9e 8b       	std	Y+22, r25	; 0x16
    3df8:	af 8b       	std	Y+23, r26	; 0x17
    3dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    3e00:	8f 89       	ldd	r24, Y+23	; 0x17
    3e02:	98 8d       	ldd	r25, Y+24	; 0x18
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	40 e8       	ldi	r20, 0x80	; 128
    3e0a:	5f e3       	ldi	r21, 0x3F	; 63
    3e0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e10:	88 23       	and	r24, r24
    3e12:	2c f4       	brge	.+10     	; 0x3e1e <ESP8266_VidSendHB+0x18c>
		__ticks = 1;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	9c 8b       	std	Y+20, r25	; 0x14
    3e1a:	8b 8b       	std	Y+19, r24	; 0x13
    3e1c:	3f c0       	rjmp	.+126    	; 0x3e9c <ESP8266_VidSendHB+0x20a>
	else if (__tmp > 65535)
    3e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e20:	7e 89       	ldd	r23, Y+22	; 0x16
    3e22:	8f 89       	ldd	r24, Y+23	; 0x17
    3e24:	98 8d       	ldd	r25, Y+24	; 0x18
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	4f e7       	ldi	r20, 0x7F	; 127
    3e2c:	57 e4       	ldi	r21, 0x47	; 71
    3e2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3e32:	18 16       	cp	r1, r24
    3e34:	4c f5       	brge	.+82     	; 0x3e88 <ESP8266_VidSendHB+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e36:	69 8d       	ldd	r22, Y+25	; 0x19
    3e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e2       	ldi	r20, 0x20	; 32
    3e44:	51 e4       	ldi	r21, 0x41	; 65
    3e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	bc 01       	movw	r22, r24
    3e50:	cd 01       	movw	r24, r26
    3e52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9c 8b       	std	Y+20, r25	; 0x14
    3e5c:	8b 8b       	std	Y+19, r24	; 0x13
    3e5e:	0f c0       	rjmp	.+30     	; 0x3e7e <ESP8266_VidSendHB+0x1ec>
    3e60:	88 ec       	ldi	r24, 0xC8	; 200
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	9a 8b       	std	Y+18, r25	; 0x12
    3e66:	89 8b       	std	Y+17, r24	; 0x11
    3e68:	89 89       	ldd	r24, Y+17	; 0x11
    3e6a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	f1 f7       	brne	.-4      	; 0x3e6c <ESP8266_VidSendHB+0x1da>
    3e70:	9a 8b       	std	Y+18, r25	; 0x12
    3e72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e74:	8b 89       	ldd	r24, Y+19	; 0x13
    3e76:	9c 89       	ldd	r25, Y+20	; 0x14
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	9c 8b       	std	Y+20, r25	; 0x14
    3e7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e80:	9c 89       	ldd	r25, Y+20	; 0x14
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	69 f7       	brne	.-38     	; 0x3e60 <ESP8266_VidSendHB+0x1ce>
    3e86:	14 c0       	rjmp	.+40     	; 0x3eb0 <ESP8266_VidSendHB+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e88:	6d 89       	ldd	r22, Y+21	; 0x15
    3e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	9c 8b       	std	Y+20, r25	; 0x14
    3e9a:	8b 8b       	std	Y+19, r24	; 0x13
    3e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea0:	98 8b       	std	Y+16, r25	; 0x10
    3ea2:	8f 87       	std	Y+15, r24	; 0x0f
    3ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea6:	98 89       	ldd	r25, Y+16	; 0x10
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <ESP8266_VidSendHB+0x216>
    3eac:	98 8b       	std	Y+16, r25	; 0x10
    3eae:	8f 87       	std	Y+15, r24	; 0x0f
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	aa e7       	ldi	r26, 0x7A	; 122
    3eb6:	b4 e4       	ldi	r27, 0x44	; 68
    3eb8:	8b 87       	std	Y+11, r24	; 0x0b
    3eba:	9c 87       	std	Y+12, r25	; 0x0c
    3ebc:	ad 87       	std	Y+13, r26	; 0x0d
    3ebe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	4a ef       	ldi	r20, 0xFA	; 250
    3ece:	54 e4       	ldi	r21, 0x44	; 68
    3ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	8f 83       	std	Y+7, r24	; 0x07
    3eda:	98 87       	std	Y+8, r25	; 0x08
    3edc:	a9 87       	std	Y+9, r26	; 0x09
    3ede:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee2:	78 85       	ldd	r23, Y+8	; 0x08
    3ee4:	89 85       	ldd	r24, Y+9	; 0x09
    3ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e8       	ldi	r20, 0x80	; 128
    3eee:	5f e3       	ldi	r21, 0x3F	; 63
    3ef0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3ef4:	88 23       	and	r24, r24
    3ef6:	2c f4       	brge	.+10     	; 0x3f02 <ESP8266_VidSendHB+0x270>
		__ticks = 1;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	9e 83       	std	Y+6, r25	; 0x06
    3efe:	8d 83       	std	Y+5, r24	; 0x05
    3f00:	3f c0       	rjmp	.+126    	; 0x3f80 <ESP8266_VidSendHB+0x2ee>
	else if (__tmp > 65535)
    3f02:	6f 81       	ldd	r22, Y+7	; 0x07
    3f04:	78 85       	ldd	r23, Y+8	; 0x08
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	3f ef       	ldi	r19, 0xFF	; 255
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	57 e4       	ldi	r21, 0x47	; 71
    3f12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	4c f5       	brge	.+82     	; 0x3f6c <ESP8266_VidSendHB+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e2       	ldi	r20, 0x20	; 32
    3f28:	51 e4       	ldi	r21, 0x41	; 65
    3f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	bc 01       	movw	r22, r24
    3f34:	cd 01       	movw	r24, r26
    3f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	9e 83       	std	Y+6, r25	; 0x06
    3f40:	8d 83       	std	Y+5, r24	; 0x05
    3f42:	0f c0       	rjmp	.+30     	; 0x3f62 <ESP8266_VidSendHB+0x2d0>
    3f44:	88 ec       	ldi	r24, 0xC8	; 200
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	9c 83       	std	Y+4, r25	; 0x04
    3f4a:	8b 83       	std	Y+3, r24	; 0x03
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <ESP8266_VidSendHB+0x2be>
    3f54:	9c 83       	std	Y+4, r25	; 0x04
    3f56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f58:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	9e 83       	std	Y+6, r25	; 0x06
    3f60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f62:	8d 81       	ldd	r24, Y+5	; 0x05
    3f64:	9e 81       	ldd	r25, Y+6	; 0x06
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	69 f7       	brne	.-38     	; 0x3f44 <ESP8266_VidSendHB+0x2b2>
    3f6a:	14 c0       	rjmp	.+40     	; 0x3f94 <ESP8266_VidSendHB+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f6e:	78 85       	ldd	r23, Y+8	; 0x08
    3f70:	89 85       	ldd	r24, Y+9	; 0x09
    3f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	9e 83       	std	Y+6, r25	; 0x06
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	8d 81       	ldd	r24, Y+5	; 0x05
    3f82:	9e 81       	ldd	r25, Y+6	; 0x06
    3f84:	9a 83       	std	Y+2, r25	; 0x02
    3f86:	89 83       	std	Y+1, r24	; 0x01
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <ESP8266_VidSendHB+0x2fa>
    3f90:	9a 83       	std	Y+2, r25	; 0x02
    3f92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	_delay_ms( 1000 );


}
    3f94:	ab 96       	adiw	r28, 0x2b	; 43
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	08 95       	ret

00003fa6 <ESP8266_VidSendPR>:
void ESP8266_VidSendPR(u8 Copy_u8PR)
{
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	ab 97       	sbiw	r28, 0x2b	; 43
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	f8 94       	cli
    3fb4:	de bf       	out	0x3e, r29	; 62
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	8b a7       	std	Y+43, r24	; 0x2b
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    3fbc:	87 ed       	ldi	r24, 0xD7	; 215
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	27 ee       	ldi	r18, 0xE7	; 231
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	b9 01       	movw	r22, r18
    3fc6:	0e 94 bc 1a 	call	0x3578	; 0x3578 <ESP8266_VidConnectToSrvTcp>
	if(((Copy_u8PR/10)/10)==0)
    3fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fcc:	84 36       	cpi	r24, 0x64	; 100
    3fce:	28 f4       	brcc	.+10     	; 0x3fda <ESP8266_VidSendPR+0x34>
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=59\r\n" );
    3fd0:	8a e6       	ldi	r24, 0x6A	; 106
    3fd2:	91 e0       	ldi	r25, 0x01	; 1
    3fd4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    3fd8:	04 c0       	rjmp	.+8      	; 0x3fe2 <ESP8266_VidSendPR+0x3c>
	}
	else
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=60\r\n" );
    3fda:	8a e7       	ldi	r24, 0x7A	; 122
    3fdc:	91 e0       	ldi	r25, 0x01	; 1
    3fde:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	a8 ec       	ldi	r26, 0xC8	; 200
    3fe8:	b2 e4       	ldi	r27, 0x42	; 66
    3fea:	8f a3       	std	Y+39, r24	; 0x27
    3fec:	98 a7       	std	Y+40, r25	; 0x28
    3fee:	a9 a7       	std	Y+41, r26	; 0x29
    3ff0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff2:	6f a1       	ldd	r22, Y+39	; 0x27
    3ff4:	78 a5       	ldd	r23, Y+40	; 0x28
    3ff6:	89 a5       	ldd	r24, Y+41	; 0x29
    3ff8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	4a ef       	ldi	r20, 0xFA	; 250
    4000:	54 e4       	ldi	r21, 0x44	; 68
    4002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	8b a3       	std	Y+35, r24	; 0x23
    400c:	9c a3       	std	Y+36, r25	; 0x24
    400e:	ad a3       	std	Y+37, r26	; 0x25
    4010:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4012:	6b a1       	ldd	r22, Y+35	; 0x23
    4014:	7c a1       	ldd	r23, Y+36	; 0x24
    4016:	8d a1       	ldd	r24, Y+37	; 0x25
    4018:	9e a1       	ldd	r25, Y+38	; 0x26
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e8       	ldi	r20, 0x80	; 128
    4020:	5f e3       	ldi	r21, 0x3F	; 63
    4022:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4026:	88 23       	and	r24, r24
    4028:	2c f4       	brge	.+10     	; 0x4034 <ESP8266_VidSendPR+0x8e>
		__ticks = 1;
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	9a a3       	std	Y+34, r25	; 0x22
    4030:	89 a3       	std	Y+33, r24	; 0x21
    4032:	3f c0       	rjmp	.+126    	; 0x40b2 <ESP8266_VidSendPR+0x10c>
	else if (__tmp > 65535)
    4034:	6b a1       	ldd	r22, Y+35	; 0x23
    4036:	7c a1       	ldd	r23, Y+36	; 0x24
    4038:	8d a1       	ldd	r24, Y+37	; 0x25
    403a:	9e a1       	ldd	r25, Y+38	; 0x26
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	3f ef       	ldi	r19, 0xFF	; 255
    4040:	4f e7       	ldi	r20, 0x7F	; 127
    4042:	57 e4       	ldi	r21, 0x47	; 71
    4044:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4048:	18 16       	cp	r1, r24
    404a:	4c f5       	brge	.+82     	; 0x409e <ESP8266_VidSendPR+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404c:	6f a1       	ldd	r22, Y+39	; 0x27
    404e:	78 a5       	ldd	r23, Y+40	; 0x28
    4050:	89 a5       	ldd	r24, Y+41	; 0x29
    4052:	9a a5       	ldd	r25, Y+42	; 0x2a
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	40 e2       	ldi	r20, 0x20	; 32
    405a:	51 e4       	ldi	r21, 0x41	; 65
    405c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	bc 01       	movw	r22, r24
    4066:	cd 01       	movw	r24, r26
    4068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9a a3       	std	Y+34, r25	; 0x22
    4072:	89 a3       	std	Y+33, r24	; 0x21
    4074:	0f c0       	rjmp	.+30     	; 0x4094 <ESP8266_VidSendPR+0xee>
    4076:	88 ec       	ldi	r24, 0xC8	; 200
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	98 a3       	std	Y+32, r25	; 0x20
    407c:	8f 8f       	std	Y+31, r24	; 0x1f
    407e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4080:	98 a1       	ldd	r25, Y+32	; 0x20
    4082:	01 97       	sbiw	r24, 0x01	; 1
    4084:	f1 f7       	brne	.-4      	; 0x4082 <ESP8266_VidSendPR+0xdc>
    4086:	98 a3       	std	Y+32, r25	; 0x20
    4088:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408a:	89 a1       	ldd	r24, Y+33	; 0x21
    408c:	9a a1       	ldd	r25, Y+34	; 0x22
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	9a a3       	std	Y+34, r25	; 0x22
    4092:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4094:	89 a1       	ldd	r24, Y+33	; 0x21
    4096:	9a a1       	ldd	r25, Y+34	; 0x22
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	69 f7       	brne	.-38     	; 0x4076 <ESP8266_VidSendPR+0xd0>
    409c:	14 c0       	rjmp	.+40     	; 0x40c6 <ESP8266_VidSendPR+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    409e:	6b a1       	ldd	r22, Y+35	; 0x23
    40a0:	7c a1       	ldd	r23, Y+36	; 0x24
    40a2:	8d a1       	ldd	r24, Y+37	; 0x25
    40a4:	9e a1       	ldd	r25, Y+38	; 0x26
    40a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9a a3       	std	Y+34, r25	; 0x22
    40b0:	89 a3       	std	Y+33, r24	; 0x21
    40b2:	89 a1       	ldd	r24, Y+33	; 0x21
    40b4:	9a a1       	ldd	r25, Y+34	; 0x22
    40b6:	9e 8f       	std	Y+30, r25	; 0x1e
    40b8:	8d 8f       	std	Y+29, r24	; 0x1d
    40ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40be:	01 97       	sbiw	r24, 0x01	; 1
    40c0:	f1 f7       	brne	.-4      	; 0x40be <ESP8266_VidSendPR+0x118>
    40c2:	9e 8f       	std	Y+30, r25	; 0x1e
    40c4:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/TransmitterPR.php?data=");
    40c6:	82 ec       	ldi	r24, 0xC2	; 194
    40c8:	91 e0       	ldi	r25, 0x01	; 1
    40ca:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
	USART_SendInteger(Copy_u8PR);
    40ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    40d0:	88 2f       	mov	r24, r24
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <USART_SendInteger>
	USART_SendStr((u8 *)"\r\n");
    40d8:	84 ed       	ldi	r24, 0xD4	; 212
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USART_SendStr>
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	aa e7       	ldi	r26, 0x7A	; 122
    40e6:	b4 e4       	ldi	r27, 0x44	; 68
    40e8:	89 8f       	std	Y+25, r24	; 0x19
    40ea:	9a 8f       	std	Y+26, r25	; 0x1a
    40ec:	ab 8f       	std	Y+27, r26	; 0x1b
    40ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f0:	69 8d       	ldd	r22, Y+25	; 0x19
    40f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40f8:	20 e0       	ldi	r18, 0x00	; 0
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	4a ef       	ldi	r20, 0xFA	; 250
    40fe:	54 e4       	ldi	r21, 0x44	; 68
    4100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	8d 8b       	std	Y+21, r24	; 0x15
    410a:	9e 8b       	std	Y+22, r25	; 0x16
    410c:	af 8b       	std	Y+23, r26	; 0x17
    410e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4110:	6d 89       	ldd	r22, Y+21	; 0x15
    4112:	7e 89       	ldd	r23, Y+22	; 0x16
    4114:	8f 89       	ldd	r24, Y+23	; 0x17
    4116:	98 8d       	ldd	r25, Y+24	; 0x18
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	40 e8       	ldi	r20, 0x80	; 128
    411e:	5f e3       	ldi	r21, 0x3F	; 63
    4120:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4124:	88 23       	and	r24, r24
    4126:	2c f4       	brge	.+10     	; 0x4132 <ESP8266_VidSendPR+0x18c>
		__ticks = 1;
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	9c 8b       	std	Y+20, r25	; 0x14
    412e:	8b 8b       	std	Y+19, r24	; 0x13
    4130:	3f c0       	rjmp	.+126    	; 0x41b0 <ESP8266_VidSendPR+0x20a>
	else if (__tmp > 65535)
    4132:	6d 89       	ldd	r22, Y+21	; 0x15
    4134:	7e 89       	ldd	r23, Y+22	; 0x16
    4136:	8f 89       	ldd	r24, Y+23	; 0x17
    4138:	98 8d       	ldd	r25, Y+24	; 0x18
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	3f ef       	ldi	r19, 0xFF	; 255
    413e:	4f e7       	ldi	r20, 0x7F	; 127
    4140:	57 e4       	ldi	r21, 0x47	; 71
    4142:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4146:	18 16       	cp	r1, r24
    4148:	4c f5       	brge	.+82     	; 0x419c <ESP8266_VidSendPR+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414a:	69 8d       	ldd	r22, Y+25	; 0x19
    414c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    414e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	40 e2       	ldi	r20, 0x20	; 32
    4158:	51 e4       	ldi	r21, 0x41	; 65
    415a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	bc 01       	movw	r22, r24
    4164:	cd 01       	movw	r24, r26
    4166:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	9c 8b       	std	Y+20, r25	; 0x14
    4170:	8b 8b       	std	Y+19, r24	; 0x13
    4172:	0f c0       	rjmp	.+30     	; 0x4192 <ESP8266_VidSendPR+0x1ec>
    4174:	88 ec       	ldi	r24, 0xC8	; 200
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	9a 8b       	std	Y+18, r25	; 0x12
    417a:	89 8b       	std	Y+17, r24	; 0x11
    417c:	89 89       	ldd	r24, Y+17	; 0x11
    417e:	9a 89       	ldd	r25, Y+18	; 0x12
    4180:	01 97       	sbiw	r24, 0x01	; 1
    4182:	f1 f7       	brne	.-4      	; 0x4180 <ESP8266_VidSendPR+0x1da>
    4184:	9a 8b       	std	Y+18, r25	; 0x12
    4186:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4188:	8b 89       	ldd	r24, Y+19	; 0x13
    418a:	9c 89       	ldd	r25, Y+20	; 0x14
    418c:	01 97       	sbiw	r24, 0x01	; 1
    418e:	9c 8b       	std	Y+20, r25	; 0x14
    4190:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4192:	8b 89       	ldd	r24, Y+19	; 0x13
    4194:	9c 89       	ldd	r25, Y+20	; 0x14
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	69 f7       	brne	.-38     	; 0x4174 <ESP8266_VidSendPR+0x1ce>
    419a:	14 c0       	rjmp	.+40     	; 0x41c4 <ESP8266_VidSendPR+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419c:	6d 89       	ldd	r22, Y+21	; 0x15
    419e:	7e 89       	ldd	r23, Y+22	; 0x16
    41a0:	8f 89       	ldd	r24, Y+23	; 0x17
    41a2:	98 8d       	ldd	r25, Y+24	; 0x18
    41a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	9c 8b       	std	Y+20, r25	; 0x14
    41ae:	8b 8b       	std	Y+19, r24	; 0x13
    41b0:	8b 89       	ldd	r24, Y+19	; 0x13
    41b2:	9c 89       	ldd	r25, Y+20	; 0x14
    41b4:	98 8b       	std	Y+16, r25	; 0x10
    41b6:	8f 87       	std	Y+15, r24	; 0x0f
    41b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ba:	98 89       	ldd	r25, Y+16	; 0x10
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <ESP8266_VidSendPR+0x216>
    41c0:	98 8b       	std	Y+16, r25	; 0x10
    41c2:	8f 87       	std	Y+15, r24	; 0x0f
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	aa e7       	ldi	r26, 0x7A	; 122
    41ca:	b4 e4       	ldi	r27, 0x44	; 68
    41cc:	8b 87       	std	Y+11, r24	; 0x0b
    41ce:	9c 87       	std	Y+12, r25	; 0x0c
    41d0:	ad 87       	std	Y+13, r26	; 0x0d
    41d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41da:	9e 85       	ldd	r25, Y+14	; 0x0e
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	4a ef       	ldi	r20, 0xFA	; 250
    41e2:	54 e4       	ldi	r21, 0x44	; 68
    41e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	8f 83       	std	Y+7, r24	; 0x07
    41ee:	98 87       	std	Y+8, r25	; 0x08
    41f0:	a9 87       	std	Y+9, r26	; 0x09
    41f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41f4:	6f 81       	ldd	r22, Y+7	; 0x07
    41f6:	78 85       	ldd	r23, Y+8	; 0x08
    41f8:	89 85       	ldd	r24, Y+9	; 0x09
    41fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	40 e8       	ldi	r20, 0x80	; 128
    4202:	5f e3       	ldi	r21, 0x3F	; 63
    4204:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4208:	88 23       	and	r24, r24
    420a:	2c f4       	brge	.+10     	; 0x4216 <ESP8266_VidSendPR+0x270>
		__ticks = 1;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	9e 83       	std	Y+6, r25	; 0x06
    4212:	8d 83       	std	Y+5, r24	; 0x05
    4214:	3f c0       	rjmp	.+126    	; 0x4294 <ESP8266_VidSendPR+0x2ee>
	else if (__tmp > 65535)
    4216:	6f 81       	ldd	r22, Y+7	; 0x07
    4218:	78 85       	ldd	r23, Y+8	; 0x08
    421a:	89 85       	ldd	r24, Y+9	; 0x09
    421c:	9a 85       	ldd	r25, Y+10	; 0x0a
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	3f ef       	ldi	r19, 0xFF	; 255
    4222:	4f e7       	ldi	r20, 0x7F	; 127
    4224:	57 e4       	ldi	r21, 0x47	; 71
    4226:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    422a:	18 16       	cp	r1, r24
    422c:	4c f5       	brge	.+82     	; 0x4280 <ESP8266_VidSendPR+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4230:	7c 85       	ldd	r23, Y+12	; 0x0c
    4232:	8d 85       	ldd	r24, Y+13	; 0x0d
    4234:	9e 85       	ldd	r25, Y+14	; 0x0e
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	40 e2       	ldi	r20, 0x20	; 32
    423c:	51 e4       	ldi	r21, 0x41	; 65
    423e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	bc 01       	movw	r22, r24
    4248:	cd 01       	movw	r24, r26
    424a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	9e 83       	std	Y+6, r25	; 0x06
    4254:	8d 83       	std	Y+5, r24	; 0x05
    4256:	0f c0       	rjmp	.+30     	; 0x4276 <ESP8266_VidSendPR+0x2d0>
    4258:	88 ec       	ldi	r24, 0xC8	; 200
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	9c 83       	std	Y+4, r25	; 0x04
    425e:	8b 83       	std	Y+3, r24	; 0x03
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	9c 81       	ldd	r25, Y+4	; 0x04
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	f1 f7       	brne	.-4      	; 0x4264 <ESP8266_VidSendPR+0x2be>
    4268:	9c 83       	std	Y+4, r25	; 0x04
    426a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	9e 83       	std	Y+6, r25	; 0x06
    4274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4276:	8d 81       	ldd	r24, Y+5	; 0x05
    4278:	9e 81       	ldd	r25, Y+6	; 0x06
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	69 f7       	brne	.-38     	; 0x4258 <ESP8266_VidSendPR+0x2b2>
    427e:	14 c0       	rjmp	.+40     	; 0x42a8 <ESP8266_VidSendPR+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4280:	6f 81       	ldd	r22, Y+7	; 0x07
    4282:	78 85       	ldd	r23, Y+8	; 0x08
    4284:	89 85       	ldd	r24, Y+9	; 0x09
    4286:	9a 85       	ldd	r25, Y+10	; 0x0a
    4288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	9e 83       	std	Y+6, r25	; 0x06
    4292:	8d 83       	std	Y+5, r24	; 0x05
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	9a 83       	std	Y+2, r25	; 0x02
    429a:	89 83       	std	Y+1, r24	; 0x01
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	9a 81       	ldd	r25, Y+2	; 0x02
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	f1 f7       	brne	.-4      	; 0x42a0 <ESP8266_VidSendPR+0x2fa>
    42a4:	9a 83       	std	Y+2, r25	; 0x02
    42a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	_delay_ms( 1000 );


}
    42a8:	ab 96       	adiw	r28, 0x2b	; 43
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	08 95       	ret

000042ba <__udivmodhi4>:
    42ba:	aa 1b       	sub	r26, r26
    42bc:	bb 1b       	sub	r27, r27
    42be:	51 e1       	ldi	r21, 0x11	; 17
    42c0:	07 c0       	rjmp	.+14     	; 0x42d0 <__udivmodhi4_ep>

000042c2 <__udivmodhi4_loop>:
    42c2:	aa 1f       	adc	r26, r26
    42c4:	bb 1f       	adc	r27, r27
    42c6:	a6 17       	cp	r26, r22
    42c8:	b7 07       	cpc	r27, r23
    42ca:	10 f0       	brcs	.+4      	; 0x42d0 <__udivmodhi4_ep>
    42cc:	a6 1b       	sub	r26, r22
    42ce:	b7 0b       	sbc	r27, r23

000042d0 <__udivmodhi4_ep>:
    42d0:	88 1f       	adc	r24, r24
    42d2:	99 1f       	adc	r25, r25
    42d4:	5a 95       	dec	r21
    42d6:	a9 f7       	brne	.-22     	; 0x42c2 <__udivmodhi4_loop>
    42d8:	80 95       	com	r24
    42da:	90 95       	com	r25
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	08 95       	ret

000042e2 <__prologue_saves__>:
    42e2:	2f 92       	push	r2
    42e4:	3f 92       	push	r3
    42e6:	4f 92       	push	r4
    42e8:	5f 92       	push	r5
    42ea:	6f 92       	push	r6
    42ec:	7f 92       	push	r7
    42ee:	8f 92       	push	r8
    42f0:	9f 92       	push	r9
    42f2:	af 92       	push	r10
    42f4:	bf 92       	push	r11
    42f6:	cf 92       	push	r12
    42f8:	df 92       	push	r13
    42fa:	ef 92       	push	r14
    42fc:	ff 92       	push	r15
    42fe:	0f 93       	push	r16
    4300:	1f 93       	push	r17
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62
    430a:	ca 1b       	sub	r28, r26
    430c:	db 0b       	sbc	r29, r27
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	09 94       	ijmp

0000431a <__epilogue_restores__>:
    431a:	2a 88       	ldd	r2, Y+18	; 0x12
    431c:	39 88       	ldd	r3, Y+17	; 0x11
    431e:	48 88       	ldd	r4, Y+16	; 0x10
    4320:	5f 84       	ldd	r5, Y+15	; 0x0f
    4322:	6e 84       	ldd	r6, Y+14	; 0x0e
    4324:	7d 84       	ldd	r7, Y+13	; 0x0d
    4326:	8c 84       	ldd	r8, Y+12	; 0x0c
    4328:	9b 84       	ldd	r9, Y+11	; 0x0b
    432a:	aa 84       	ldd	r10, Y+10	; 0x0a
    432c:	b9 84       	ldd	r11, Y+9	; 0x09
    432e:	c8 84       	ldd	r12, Y+8	; 0x08
    4330:	df 80       	ldd	r13, Y+7	; 0x07
    4332:	ee 80       	ldd	r14, Y+6	; 0x06
    4334:	fd 80       	ldd	r15, Y+5	; 0x05
    4336:	0c 81       	ldd	r16, Y+4	; 0x04
    4338:	1b 81       	ldd	r17, Y+3	; 0x03
    433a:	aa 81       	ldd	r26, Y+2	; 0x02
    433c:	b9 81       	ldd	r27, Y+1	; 0x01
    433e:	ce 0f       	add	r28, r30
    4340:	d1 1d       	adc	r29, r1
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	f8 94       	cli
    4346:	de bf       	out	0x3e, r29	; 62
    4348:	0f be       	out	0x3f, r0	; 63
    434a:	cd bf       	out	0x3d, r28	; 61
    434c:	ed 01       	movw	r28, r26
    434e:	08 95       	ret

00004350 <memset>:
    4350:	dc 01       	movw	r26, r24
    4352:	01 c0       	rjmp	.+2      	; 0x4356 <memset+0x6>
    4354:	6d 93       	st	X+, r22
    4356:	41 50       	subi	r20, 0x01	; 1
    4358:	50 40       	sbci	r21, 0x00	; 0
    435a:	e0 f7       	brcc	.-8      	; 0x4354 <memset+0x4>
    435c:	08 95       	ret

0000435e <_exit>:
    435e:	f8 94       	cli

00004360 <__stop_program>:
    4360:	ff cf       	rjmp	.-2      	; 0x4360 <__stop_program>
