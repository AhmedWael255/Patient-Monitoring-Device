
testhrtbeat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022e  00800060  000052ce  00005362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080028e  0080028e  00005590  2**0
                  ALLOC
  3 .stab         000039cc  00000000  00000000  00005590  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010de  00000000  00000000  00008f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a03a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000a1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000a38b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000c39b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e500  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000e95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f26c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f2 e5       	ldi	r31, 0x52	; 82
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <main>
      8a:	0c 94 65 29 	jmp	0x52ca	; 0x52ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 29 	jmp	0x525c	; 0x525c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 29 	jmp	0x525c	; 0x525c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3a 29 	jmp	0x5274	; 0x5274 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 37 29 	jmp	0x526e	; 0x526e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 53 29 	jmp	0x52a6	; 0x52a6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 3e 29 	jmp	0x527c	; 0x527c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e9 57       	subi	r30, 0x79	; 121
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DIO_vidSetPinDir>:

// use port number A,B,C,D
// use pin number PIN0..7
//use direction INPUT , OUTPUT , INPULLUP

void DIO_vidSetPinDir(uint8 port_no , uint8 pin_no , uint8 dir) {
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vidSetPinDir+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_vidSetPinDir+0x8>
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6a 83       	std	Y+2, r22	; 0x02
     cb2:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_no) {
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3d 83       	std	Y+5, r19	; 0x05
     cbc:	2c 83       	std	Y+4, r18	; 0x04
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	9d 81       	ldd	r25, Y+5	; 0x05
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <DIO_vidSetPinDir+0x2a>
     cc8:	72 c0       	rjmp	.+228    	; 0xdae <DIO_vidSetPinDir+0x10e>
     cca:	2c 81       	ldd	r18, Y+4	; 0x04
     ccc:	3d 81       	ldd	r19, Y+5	; 0x05
     cce:	23 30       	cpi	r18, 0x03	; 3
     cd0:	31 05       	cpc	r19, r1
     cd2:	34 f4       	brge	.+12     	; 0xce0 <DIO_vidSetPinDir+0x40>
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	9d 81       	ldd	r25, Y+5	; 0x05
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	71 f0       	breq	.+28     	; 0xcfa <DIO_vidSetPinDir+0x5a>
     cde:	73 c1       	rjmp	.+742    	; 0xfc6 <DIO_vidSetPinDir+0x326>
     ce0:	2c 81       	ldd	r18, Y+4	; 0x04
     ce2:	3d 81       	ldd	r19, Y+5	; 0x05
     ce4:	23 30       	cpi	r18, 0x03	; 3
     ce6:	31 05       	cpc	r19, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <DIO_vidSetPinDir+0x4c>
     cea:	bb c0       	rjmp	.+374    	; 0xe62 <DIO_vidSetPinDir+0x1c2>
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <DIO_vidSetPinDir+0x58>
     cf6:	0f c1       	rjmp	.+542    	; 0xf16 <DIO_vidSetPinDir+0x276>
     cf8:	66 c1       	rjmp	.+716    	; 0xfc6 <DIO_vidSetPinDir+0x326>
	case A:
		if (dir==0) ClrBit(DDRA,pin_no);
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	88 23       	and	r24, r24
     cfe:	a9 f4       	brne	.+42     	; 0xd2a <DIO_vidSetPinDir+0x8a>
     d00:	aa e3       	ldi	r26, 0x3A	; 58
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ea e3       	ldi	r30, 0x3A	; 58
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_vidSetPinDir+0x7e>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_vidSetPinDir+0x7a>
     d22:	80 95       	com	r24
     d24:	84 23       	and	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	4e c1       	rjmp	.+668    	; 0xfc6 <DIO_vidSetPinDir+0x326>
		else if (dir==1) SetBit(DDRA,pin_no);
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	a1 f4       	brne	.+40     	; 0xd58 <DIO_vidSetPinDir+0xb8>
     d30:	aa e3       	ldi	r26, 0x3A	; 58
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ea e3       	ldi	r30, 0x3A	; 58
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	48 2f       	mov	r20, r24
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_vidSetPinDir+0xae>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_vidSetPinDir+0xaa>
     d52:	84 2b       	or	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	37 c1       	rjmp	.+622    	; 0xfc6 <DIO_vidSetPinDir+0x326>
		else if (dir==2) {ClrBit(DDRA,pin_no); SetBit(PORTA,pin_no);}
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	09 f0       	breq	.+2      	; 0xd60 <DIO_vidSetPinDir+0xc0>
     d5e:	33 c1       	rjmp	.+614    	; 0xfc6 <DIO_vidSetPinDir+0x326>
     d60:	aa e3       	ldi	r26, 0x3A	; 58
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ea e3       	ldi	r30, 0x3A	; 58
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_vidSetPinDir+0xdc>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	2a 95       	dec	r18
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_vidSetPinDir+0xd8>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	ab e3       	ldi	r26, 0x3B	; 59
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	eb e3       	ldi	r30, 0x3B	; 59
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_vidSetPinDir+0x104>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_vidSetPinDir+0x100>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	0c c1       	rjmp	.+536    	; 0xfc6 <DIO_vidSetPinDir+0x326>
		break;
	case B:
			if (dir==0) ClrBit(DDRB,pin_no);
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	88 23       	and	r24, r24
     db2:	a9 f4       	brne	.+42     	; 0xdde <DIO_vidSetPinDir+0x13e>
     db4:	a7 e3       	ldi	r26, 0x37	; 55
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e7 e3       	ldi	r30, 0x37	; 55
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_vidSetPinDir+0x132>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_vidSetPinDir+0x12e>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	f4 c0       	rjmp	.+488    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRB,pin_no);
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	a1 f4       	brne	.+40     	; 0xe0c <DIO_vidSetPinDir+0x16c>
     de4:	a7 e3       	ldi	r26, 0x37	; 55
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 e3       	ldi	r30, 0x37	; 55
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_vidSetPinDir+0x162>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_vidSetPinDir+0x15e>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	dd c0       	rjmp	.+442    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRB,pin_no); SetBit(PORTB,pin_no);}
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	09 f0       	breq	.+2      	; 0xe14 <DIO_vidSetPinDir+0x174>
     e12:	d9 c0       	rjmp	.+434    	; 0xfc6 <DIO_vidSetPinDir+0x326>
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_vidSetPinDir+0x190>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	2a 95       	dec	r18
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_vidSetPinDir+0x18c>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	a8 e3       	ldi	r26, 0x38	; 56
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e3       	ldi	r30, 0x38	; 56
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_vidSetPinDir+0x1b8>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_vidSetPinDir+0x1b4>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	b2 c0       	rjmp	.+356    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			break;
	case C:
			if (dir==0) ClrBit(DDRC,pin_no);
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	88 23       	and	r24, r24
     e66:	a9 f4       	brne	.+42     	; 0xe92 <DIO_vidSetPinDir+0x1f2>
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_vidSetPinDir+0x1e6>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_vidSetPinDir+0x1e2>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	9a c0       	rjmp	.+308    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRC,pin_no);
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	a1 f4       	brne	.+40     	; 0xec0 <DIO_vidSetPinDir+0x220>
     e98:	a4 e3       	ldi	r26, 0x34	; 52
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e4 e3       	ldi	r30, 0x34	; 52
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_vidSetPinDir+0x216>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_vidSetPinDir+0x212>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	83 c0       	rjmp	.+262    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRC,pin_no); SetBit(PORTC,pin_no);}
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	09 f0       	breq	.+2      	; 0xec8 <DIO_vidSetPinDir+0x228>
     ec6:	7f c0       	rjmp	.+254    	; 0xfc6 <DIO_vidSetPinDir+0x326>
     ec8:	a4 e3       	ldi	r26, 0x34	; 52
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e4 e3       	ldi	r30, 0x34	; 52
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_vidSetPinDir+0x244>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	2a 95       	dec	r18
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_vidSetPinDir+0x240>
     ee8:	80 95       	com	r24
     eea:	84 23       	and	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	a5 e3       	ldi	r26, 0x35	; 53
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e3       	ldi	r30, 0x35	; 53
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_vidSetPinDir+0x26c>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_vidSetPinDir+0x268>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	58 c0       	rjmp	.+176    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			break;
	case D:
			if (dir==0) ClrBit(DDRD,pin_no);
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 23       	and	r24, r24
     f1a:	a9 f4       	brne	.+42     	; 0xf46 <DIO_vidSetPinDir+0x2a6>
     f1c:	a1 e3       	ldi	r26, 0x31	; 49
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e1 e3       	ldi	r30, 0x31	; 49
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_vidSetPinDir+0x29a>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_vidSetPinDir+0x296>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	40 c0       	rjmp	.+128    	; 0xfc6 <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRD,pin_no);
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <DIO_vidSetPinDir+0x2d4>
     f4c:	a1 e3       	ldi	r26, 0x31	; 49
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e1 e3       	ldi	r30, 0x31	; 49
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_vidSetPinDir+0x2ca>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_vidSetPinDir+0x2c6>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	29 c0       	rjmp	.+82     	; 0xfc6 <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRD,pin_no); SetBit(PORTD,pin_no);}
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	31 f5       	brne	.+76     	; 0xfc6 <DIO_vidSetPinDir+0x326>
     f7a:	a1 e3       	ldi	r26, 0x31	; 49
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e1 e3       	ldi	r30, 0x31	; 49
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_vidSetPinDir+0x2f6>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	2a 95       	dec	r18
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_vidSetPinDir+0x2f2>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	a2 e3       	ldi	r26, 0x32	; 50
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e2 e3       	ldi	r30, 0x32	; 50
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_vidSetPinDir+0x31e>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_vidSetPinDir+0x31a>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
			break;
	}
}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <DIO_vidSetPortDirMask>:

void DIO_vidSetPortDirMask(uint8 port_no , uint8 DirMask) {
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <DIO_vidSetPortDirMask+0x6>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <DIO_vidSetPortDirMask+0x8>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3c 83       	std	Y+4, r19	; 0x04
     fee:	2b 83       	std	Y+3, r18	; 0x03
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	91 05       	cpc	r25, r1
     ff8:	d9 f0       	breq	.+54     	; 0x1030 <DIO_vidSetPortDirMask+0x5a>
     ffa:	2b 81       	ldd	r18, Y+3	; 0x03
     ffc:	3c 81       	ldd	r19, Y+4	; 0x04
     ffe:	23 30       	cpi	r18, 0x03	; 3
    1000:	31 05       	cpc	r19, r1
    1002:	34 f4       	brge	.+12     	; 0x1010 <DIO_vidSetPortDirMask+0x3a>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	61 f0       	breq	.+24     	; 0x1026 <DIO_vidSetPortDirMask+0x50>
    100e:	1e c0       	rjmp	.+60     	; 0x104c <DIO_vidSetPortDirMask+0x76>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	23 30       	cpi	r18, 0x03	; 3
    1016:	31 05       	cpc	r19, r1
    1018:	81 f0       	breq	.+32     	; 0x103a <DIO_vidSetPortDirMask+0x64>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	91 05       	cpc	r25, r1
    1022:	81 f0       	breq	.+32     	; 0x1044 <DIO_vidSetPortDirMask+0x6e>
    1024:	13 c0       	rjmp	.+38     	; 0x104c <DIO_vidSetPortDirMask+0x76>
	case A:
			DDRA=DirMask;
    1026:	ea e3       	ldi	r30, 0x3A	; 58
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	80 83       	st	Z, r24
    102e:	0e c0       	rjmp	.+28     	; 0x104c <DIO_vidSetPortDirMask+0x76>
			break;
	case B:
			DDRB=DirMask;
    1030:	e7 e3       	ldi	r30, 0x37	; 55
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	80 83       	st	Z, r24
    1038:	09 c0       	rjmp	.+18     	; 0x104c <DIO_vidSetPortDirMask+0x76>
			break;
	case C:
			DDRC=DirMask;
    103a:	e4 e3       	ldi	r30, 0x34	; 52
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	80 83       	st	Z, r24
    1042:	04 c0       	rjmp	.+8      	; 0x104c <DIO_vidSetPortDirMask+0x76>
			break;
	case D:
			DDRD=DirMask;
    1044:	e1 e3       	ldi	r30, 0x31	; 49
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	80 83       	st	Z, r24
			break;
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(uint8 port_no , uint8 dir) {
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_vidSetPortDir+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_vidSetPortDir+0x8>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3c 83       	std	Y+4, r19	; 0x04
    1072:	2b 83       	std	Y+3, r18	; 0x03
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	91 f1       	breq	.+100    	; 0x10e2 <DIO_vidSetPortDir+0x88>
    107e:	2b 81       	ldd	r18, Y+3	; 0x03
    1080:	3c 81       	ldd	r19, Y+4	; 0x04
    1082:	23 30       	cpi	r18, 0x03	; 3
    1084:	31 05       	cpc	r19, r1
    1086:	34 f4       	brge	.+12     	; 0x1094 <DIO_vidSetPortDir+0x3a>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	69 f0       	breq	.+26     	; 0x10ac <DIO_vidSetPortDir+0x52>
    1092:	74 c0       	rjmp	.+232    	; 0x117c <DIO_vidSetPortDir+0x122>
    1094:	2b 81       	ldd	r18, Y+3	; 0x03
    1096:	3c 81       	ldd	r19, Y+4	; 0x04
    1098:	23 30       	cpi	r18, 0x03	; 3
    109a:	31 05       	cpc	r19, r1
    109c:	e1 f1       	breq	.+120    	; 0x1116 <DIO_vidSetPortDir+0xbc>
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <DIO_vidSetPortDir+0x50>
    10a8:	50 c0       	rjmp	.+160    	; 0x114a <DIO_vidSetPortDir+0xf0>
    10aa:	68 c0       	rjmp	.+208    	; 0x117c <DIO_vidSetPortDir+0x122>
	case A:
		if (dir==0)      {DDRA=0;}
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 23       	and	r24, r24
    10b0:	21 f4       	brne	.+8      	; 0x10ba <DIO_vidSetPortDir+0x60>
    10b2:	ea e3       	ldi	r30, 0x3A	; 58
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	10 82       	st	Z, r1
    10b8:	61 c0       	rjmp	.+194    	; 0x117c <DIO_vidSetPortDir+0x122>
		else if (dir==1) {DDRA=0xFF;}
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	29 f4       	brne	.+10     	; 0x10ca <DIO_vidSetPortDir+0x70>
    10c0:	ea e3       	ldi	r30, 0x3A	; 58
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	80 83       	st	Z, r24
    10c8:	59 c0       	rjmp	.+178    	; 0x117c <DIO_vidSetPortDir+0x122>
		else if (dir==2) {DDRA=0; PORTA=0xFF;}
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <DIO_vidSetPortDir+0x78>
    10d0:	55 c0       	rjmp	.+170    	; 0x117c <DIO_vidSetPortDir+0x122>
    10d2:	ea e3       	ldi	r30, 0x3A	; 58
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	10 82       	st	Z, r1
    10d8:	eb e3       	ldi	r30, 0x3B	; 59
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	80 83       	st	Z, r24
    10e0:	4d c0       	rjmp	.+154    	; 0x117c <DIO_vidSetPortDir+0x122>
		break;
	case B:
		if (dir==0)      {DDRB=0;}
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 23       	and	r24, r24
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <DIO_vidSetPortDir+0x96>
    10e8:	e7 e3       	ldi	r30, 0x37	; 55
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	10 82       	st	Z, r1
    10ee:	46 c0       	rjmp	.+140    	; 0x117c <DIO_vidSetPortDir+0x122>
		else if (dir==1) {DDRB=0xFF;}
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	29 f4       	brne	.+10     	; 0x1100 <DIO_vidSetPortDir+0xa6>
    10f6:	e7 e3       	ldi	r30, 0x37	; 55
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	80 83       	st	Z, r24
    10fe:	3e c0       	rjmp	.+124    	; 0x117c <DIO_vidSetPortDir+0x122>
		else if (dir==2) {DDRB=0; PORTB=0xFF;}
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	d9 f5       	brne	.+118    	; 0x117c <DIO_vidSetPortDir+0x122>
    1106:	e7 e3       	ldi	r30, 0x37	; 55
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	10 82       	st	Z, r1
    110c:	e8 e3       	ldi	r30, 0x38	; 56
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	80 83       	st	Z, r24
    1114:	33 c0       	rjmp	.+102    	; 0x117c <DIO_vidSetPortDir+0x122>
		break;
	case C:
			if (dir==0)      {DDRC=0;}
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 23       	and	r24, r24
    111a:	21 f4       	brne	.+8      	; 0x1124 <DIO_vidSetPortDir+0xca>
    111c:	e4 e3       	ldi	r30, 0x34	; 52
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	10 82       	st	Z, r1
    1122:	2c c0       	rjmp	.+88     	; 0x117c <DIO_vidSetPortDir+0x122>
			else if (dir==1) {DDRC=0xFF;}
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	29 f4       	brne	.+10     	; 0x1134 <DIO_vidSetPortDir+0xda>
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	80 83       	st	Z, r24
    1132:	24 c0       	rjmp	.+72     	; 0x117c <DIO_vidSetPortDir+0x122>
			else if (dir==2) {DDRC=0; PORTC=0xFF;}
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	09 f5       	brne	.+66     	; 0x117c <DIO_vidSetPortDir+0x122>
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	10 82       	st	Z, r1
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	80 83       	st	Z, r24
    1148:	19 c0       	rjmp	.+50     	; 0x117c <DIO_vidSetPortDir+0x122>
			break;
	case D:
			if (dir==0)      {DDRD=0;}
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	88 23       	and	r24, r24
    114e:	21 f4       	brne	.+8      	; 0x1158 <DIO_vidSetPortDir+0xfe>
    1150:	e1 e3       	ldi	r30, 0x31	; 49
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	10 82       	st	Z, r1
    1156:	12 c0       	rjmp	.+36     	; 0x117c <DIO_vidSetPortDir+0x122>
			else if (dir==1) {DDRD=0xFF;}
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	29 f4       	brne	.+10     	; 0x1168 <DIO_vidSetPortDir+0x10e>
    115e:	e1 e3       	ldi	r30, 0x31	; 49
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	80 83       	st	Z, r24
    1166:	0a c0       	rjmp	.+20     	; 0x117c <DIO_vidSetPortDir+0x122>
			else if (dir==2) {DDRD=0; PORTD=0xFF;}
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	39 f4       	brne	.+14     	; 0x117c <DIO_vidSetPortDir+0x122>
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	10 82       	st	Z, r1
    1174:	e2 e3       	ldi	r30, 0x32	; 50
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	80 83       	st	Z, r24
			break;
	}
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <DIO_vidWriteOnPin>:

void DIO_vidWriteOnPin(uint8 port_no , uint8 pin_no , uint8 level) {
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <DIO_vidWriteOnPin+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <DIO_vidWriteOnPin+0x8>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	6a 83       	std	Y+2, r22	; 0x02
    119c:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_no) {
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3d 83       	std	Y+5, r19	; 0x05
    11a6:	2c 83       	std	Y+4, r18	; 0x04
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <DIO_vidWriteOnPin+0x2a>
    11b2:	48 c0       	rjmp	.+144    	; 0x1244 <DIO_vidWriteOnPin+0xba>
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	23 30       	cpi	r18, 0x03	; 3
    11ba:	31 05       	cpc	r19, r1
    11bc:	34 f4       	brge	.+12     	; 0x11ca <DIO_vidWriteOnPin+0x40>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <DIO_vidWriteOnPin+0x5a>
    11c8:	cb c0       	rjmp	.+406    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	23 30       	cpi	r18, 0x03	; 3
    11d0:	31 05       	cpc	r19, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <DIO_vidWriteOnPin+0x4c>
    11d4:	67 c0       	rjmp	.+206    	; 0x12a4 <DIO_vidWriteOnPin+0x11a>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	84 30       	cpi	r24, 0x04	; 4
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <DIO_vidWriteOnPin+0x58>
    11e0:	91 c0       	rjmp	.+290    	; 0x1304 <DIO_vidWriteOnPin+0x17a>
    11e2:	be c0       	rjmp	.+380    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
	case A:
		if (level==0) ClrBit(PORTA,pin_no);
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 23       	and	r24, r24
    11e8:	a9 f4       	brne	.+42     	; 0x1214 <DIO_vidWriteOnPin+0x8a>
    11ea:	ab e3       	ldi	r26, 0x3B	; 59
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	eb e3       	ldi	r30, 0x3B	; 59
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_vidWriteOnPin+0x7e>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_vidWriteOnPin+0x7a>
    120c:	80 95       	com	r24
    120e:	84 23       	and	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	a6 c0       	rjmp	.+332    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
		else if (level==1) SetBit(PORTA,pin_no);
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	09 f0       	breq	.+2      	; 0x121c <DIO_vidWriteOnPin+0x92>
    121a:	a2 c0       	rjmp	.+324    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
    121c:	ab e3       	ldi	r26, 0x3B	; 59
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	eb e3       	ldi	r30, 0x3B	; 59
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_vidWriteOnPin+0xb0>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_vidWriteOnPin+0xac>
    123e:	84 2b       	or	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	8e c0       	rjmp	.+284    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
		break;
	case B:
			if (level==0) ClrBit(PORTB,pin_no);
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 23       	and	r24, r24
    1248:	a9 f4       	brne	.+42     	; 0x1274 <DIO_vidWriteOnPin+0xea>
    124a:	a8 e3       	ldi	r26, 0x38	; 56
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e8 e3       	ldi	r30, 0x38	; 56
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_vidWriteOnPin+0xde>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_vidWriteOnPin+0xda>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	76 c0       	rjmp	.+236    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTB,pin_no);
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_vidWriteOnPin+0xf2>
    127a:	72 c0       	rjmp	.+228    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
    127c:	a8 e3       	ldi	r26, 0x38	; 56
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e3       	ldi	r30, 0x38	; 56
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_vidWriteOnPin+0x110>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_vidWriteOnPin+0x10c>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	5e c0       	rjmp	.+188    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
			break;
	case C:
			if (level==0) ClrBit(PORTC,pin_no);
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 23       	and	r24, r24
    12a8:	a9 f4       	brne	.+42     	; 0x12d4 <DIO_vidWriteOnPin+0x14a>
    12aa:	a5 e3       	ldi	r26, 0x35	; 53
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e3       	ldi	r30, 0x35	; 53
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_vidWriteOnPin+0x13e>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_vidWriteOnPin+0x13a>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	46 c0       	rjmp	.+140    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTC,pin_no);
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <DIO_vidWriteOnPin+0x152>
    12da:	42 c0       	rjmp	.+132    	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_vidWriteOnPin+0x170>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_vidWriteOnPin+0x16c>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	2e c0       	rjmp	.+92     	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
			break;
	case D:
			if (level==0) ClrBit(PORTD,pin_no);
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 23       	and	r24, r24
    1308:	a9 f4       	brne	.+42     	; 0x1334 <DIO_vidWriteOnPin+0x1aa>
    130a:	a2 e3       	ldi	r26, 0x32	; 50
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_vidWriteOnPin+0x19e>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_vidWriteOnPin+0x19a>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTD,pin_no);
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	99 f4       	brne	.+38     	; 0x1360 <DIO_vidWriteOnPin+0x1d6>
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_vidWriteOnPin+0x1ce>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_vidWriteOnPin+0x1ca>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
			break;
	}
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_vidWriteOnPort>:

void DIO_vidWriteOnPort(uint8 port_no , uint8 level) {
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_vidWriteOnPort+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_vidWriteOnPort+0x8>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3c 83       	std	Y+4, r19	; 0x04
    1388:	2b 83       	std	Y+3, r18	; 0x03
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	91 05       	cpc	r25, r1
    1392:	d9 f0       	breq	.+54     	; 0x13ca <DIO_vidWriteOnPort+0x5a>
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	23 30       	cpi	r18, 0x03	; 3
    139a:	31 05       	cpc	r19, r1
    139c:	34 f4       	brge	.+12     	; 0x13aa <DIO_vidWriteOnPort+0x3a>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <DIO_vidWriteOnPort+0x50>
    13a8:	1e c0       	rjmp	.+60     	; 0x13e6 <DIO_vidWriteOnPort+0x76>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	23 30       	cpi	r18, 0x03	; 3
    13b0:	31 05       	cpc	r19, r1
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <DIO_vidWriteOnPort+0x64>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	91 05       	cpc	r25, r1
    13bc:	81 f0       	breq	.+32     	; 0x13de <DIO_vidWriteOnPort+0x6e>
    13be:	13 c0       	rjmp	.+38     	; 0x13e6 <DIO_vidWriteOnPort+0x76>
			case A:
					PORTA=level;
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
    13c8:	0e c0       	rjmp	.+28     	; 0x13e6 <DIO_vidWriteOnPort+0x76>
					break;
			case B:
					PORTB=level;
    13ca:	e8 e3       	ldi	r30, 0x38	; 56
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <DIO_vidWriteOnPort+0x76>
					break;
			case C:
					PORTC=level;
    13d4:	e5 e3       	ldi	r30, 0x35	; 53
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <DIO_vidWriteOnPort+0x76>
					break;
			case D:
					PORTD=level;
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
					break;
		}
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <DIO_u8ReadFromPin>:
				else if (level==1) {PORTD=0xFF;}
				break;
	}
}*/

uint8 DIO_u8ReadFromPin(uint8 port_no , uint8 pin_no) {
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <DIO_u8ReadFromPin+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_u8ReadFromPin+0x8>
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp;
	switch(port_no) {
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3d 83       	std	Y+5, r19	; 0x05
    140e:	2c 83       	std	Y+4, r18	; 0x04
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	91 05       	cpc	r25, r1
    1418:	d9 f0       	breq	.+54     	; 0x1450 <DIO_u8ReadFromPin+0x5c>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	23 30       	cpi	r18, 0x03	; 3
    1420:	31 05       	cpc	r19, r1
    1422:	34 f4       	brge	.+12     	; 0x1430 <DIO_u8ReadFromPin+0x3c>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	91 05       	cpc	r25, r1
    142c:	61 f0       	breq	.+24     	; 0x1446 <DIO_u8ReadFromPin+0x52>
    142e:	1e c0       	rjmp	.+60     	; 0x146c <DIO_u8ReadFromPin+0x78>
    1430:	2c 81       	ldd	r18, Y+4	; 0x04
    1432:	3d 81       	ldd	r19, Y+5	; 0x05
    1434:	23 30       	cpi	r18, 0x03	; 3
    1436:	31 05       	cpc	r19, r1
    1438:	81 f0       	breq	.+32     	; 0x145a <DIO_u8ReadFromPin+0x66>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	91 05       	cpc	r25, r1
    1442:	81 f0       	breq	.+32     	; 0x1464 <DIO_u8ReadFromPin+0x70>
    1444:	13 c0       	rjmp	.+38     	; 0x146c <DIO_u8ReadFromPin+0x78>
		case A:
				temp=PINA;
    1446:	e9 e3       	ldi	r30, 0x39	; 57
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	0e c0       	rjmp	.+28     	; 0x146c <DIO_u8ReadFromPin+0x78>
				break;
		case B:
				temp=PINB;
    1450:	e6 e3       	ldi	r30, 0x36	; 54
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	09 c0       	rjmp	.+18     	; 0x146c <DIO_u8ReadFromPin+0x78>
				break;
		case C:
				temp=PINC;
    145a:	e3 e3       	ldi	r30, 0x33	; 51
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	04 c0       	rjmp	.+8      	; 0x146c <DIO_u8ReadFromPin+0x78>
				break;
		case D:
				temp=PIND;
    1464:	e0 e3       	ldi	r30, 0x30	; 48
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	89 83       	std	Y+1, r24	; 0x01
				break;
		default : //Do Nothing
				break;
		}
	return temp;
    146c:	89 81       	ldd	r24, Y+1	; 0x01
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DIO_u8ReadFromPort>:

uint8 DIO_u8ReadFromPort(uint8 port_no) {
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DIO_u8ReadFromPort+0x6>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <DIO_u8ReadFromPort+0x8>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp;
	switch(port_no) {
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3c 83       	std	Y+4, r19	; 0x04
    1494:	2b 83       	std	Y+3, r18	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	91 05       	cpc	r25, r1
    149e:	d9 f0       	breq	.+54     	; 0x14d6 <DIO_u8ReadFromPort+0x58>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	23 30       	cpi	r18, 0x03	; 3
    14a6:	31 05       	cpc	r19, r1
    14a8:	34 f4       	brge	.+12     	; 0x14b6 <DIO_u8ReadFromPort+0x38>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	91 05       	cpc	r25, r1
    14b2:	61 f0       	breq	.+24     	; 0x14cc <DIO_u8ReadFromPort+0x4e>
    14b4:	1e c0       	rjmp	.+60     	; 0x14f2 <DIO_u8ReadFromPort+0x74>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	23 30       	cpi	r18, 0x03	; 3
    14bc:	31 05       	cpc	r19, r1
    14be:	81 f0       	breq	.+32     	; 0x14e0 <DIO_u8ReadFromPort+0x62>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	84 30       	cpi	r24, 0x04	; 4
    14c6:	91 05       	cpc	r25, r1
    14c8:	81 f0       	breq	.+32     	; 0x14ea <DIO_u8ReadFromPort+0x6c>
    14ca:	13 c0       	rjmp	.+38     	; 0x14f2 <DIO_u8ReadFromPort+0x74>
		case A:
				temp=PINA;
    14cc:	e9 e3       	ldi	r30, 0x39	; 57
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	0e c0       	rjmp	.+28     	; 0x14f2 <DIO_u8ReadFromPort+0x74>
				break;
		case B:
				temp=PINB;
    14d6:	e6 e3       	ldi	r30, 0x36	; 54
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	09 c0       	rjmp	.+18     	; 0x14f2 <DIO_u8ReadFromPort+0x74>
				break;
		case C:
				temp=PINC;
    14e0:	e3 e3       	ldi	r30, 0x33	; 51
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <DIO_u8ReadFromPort+0x74>
				break;
		case D:
				temp=PIND;
    14ea:	e0 e3       	ldi	r30, 0x30	; 48
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	89 83       	std	Y+1, r24	; 0x01
				break;

		default : //Do Nothing
				break;
		}
	return temp;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <DIO_SetPinDir>:
//***********************************************************
//*********************Driver functions**********************
//***********************************************************

void DIO_SetPinDir(u8 port_indx, u8 pin_indx, u8 dir) // set pin direction (input,output) for AVR
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	27 97       	sbiw	r28, 0x07	; 7
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6a 83       	std	Y+2, r22	; 0x02
    151a:	4b 83       	std	Y+3, r20	; 0x03
	if(dir==INPUT)
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 23       	and	r24, r24
    1520:	09 f0       	breq	.+2      	; 0x1524 <DIO_SetPinDir+0x22>
    1522:	74 c0       	rjmp	.+232    	; 0x160c <DIO_SetPinDir+0x10a>
	{
		switch(port_indx)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3f 83       	std	Y+7, r19	; 0x07
    152c:	2e 83       	std	Y+6, r18	; 0x06
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	9f 81       	ldd	r25, Y+7	; 0x07
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	59 f1       	breq	.+86     	; 0x158e <DIO_SetPinDir+0x8c>
    1538:	2e 81       	ldd	r18, Y+6	; 0x06
    153a:	3f 81       	ldd	r19, Y+7	; 0x07
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <DIO_SetPinDir+0x4a>
    1542:	8e 81       	ldd	r24, Y+6	; 0x06
    1544:	9f 81       	ldd	r25, Y+7	; 0x07
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f0       	breq	.+26     	; 0x1564 <DIO_SetPinDir+0x62>
    154a:	d2 c0       	rjmp	.+420    	; 0x16f0 <DIO_SetPinDir+0x1ee>
    154c:	2e 81       	ldd	r18, Y+6	; 0x06
    154e:	3f 81       	ldd	r19, Y+7	; 0x07
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	89 f1       	breq	.+98     	; 0x15b8 <DIO_SetPinDir+0xb6>
    1556:	8e 81       	ldd	r24, Y+6	; 0x06
    1558:	9f 81       	ldd	r25, Y+7	; 0x07
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <DIO_SetPinDir+0x60>
    1560:	40 c0       	rjmp	.+128    	; 0x15e2 <DIO_SetPinDir+0xe0>
    1562:	c6 c0       	rjmp	.+396    	; 0x16f0 <DIO_SetPinDir+0x1ee>
		{
		case PORTA:
			CLEAR_BIT(DDRA_REG,pin_indx);
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_SetPinDir+0x80>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_SetPinDir+0x7c>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	b1 c0       	rjmp	.+354    	; 0x16f0 <DIO_SetPinDir+0x1ee>
			break;
		case PORTB:
			CLEAR_BIT(DDRB_REG,pin_indx);
    158e:	a7 e3       	ldi	r26, 0x37	; 55
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e7 e3       	ldi	r30, 0x37	; 55
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_SetPinDir+0xaa>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_SetPinDir+0xa6>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	9c c0       	rjmp	.+312    	; 0x16f0 <DIO_SetPinDir+0x1ee>
			break;
		case PORTC:
			CLEAR_BIT(DDRC_REG,pin_indx);
    15b8:	a4 e3       	ldi	r26, 0x34	; 52
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_SetPinDir+0xd4>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_SetPinDir+0xd0>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	87 c0       	rjmp	.+270    	; 0x16f0 <DIO_SetPinDir+0x1ee>
			break;
		case PORTD:
			CLEAR_BIT(DDRD_REG,pin_indx);
    15e2:	a1 e3       	ldi	r26, 0x31	; 49
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e1 e3       	ldi	r30, 0x31	; 49
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_SetPinDir+0xfe>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_SetPinDir+0xfa>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	72 c0       	rjmp	.+228    	; 0x16f0 <DIO_SetPinDir+0x1ee>
			break;
		}
	}
	else if(dir==OUTPUT)
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	09 f0       	breq	.+2      	; 0x1614 <DIO_SetPinDir+0x112>
    1612:	6e c0       	rjmp	.+220    	; 0x16f0 <DIO_SetPinDir+0x1ee>
		{
			switch(port_indx)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3d 83       	std	Y+5, r19	; 0x05
    161c:	2c 83       	std	Y+4, r18	; 0x04
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	49 f1       	breq	.+82     	; 0x167a <DIO_SetPinDir+0x178>
    1628:	2c 81       	ldd	r18, Y+4	; 0x04
    162a:	3d 81       	ldd	r19, Y+5	; 0x05
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <DIO_SetPinDir+0x13a>
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <DIO_SetPinDir+0x150>
    163a:	5a c0       	rjmp	.+180    	; 0x16f0 <DIO_SetPinDir+0x1ee>
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	71 f1       	breq	.+92     	; 0x16a2 <DIO_SetPinDir+0x1a0>
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	e9 f1       	breq	.+122    	; 0x16ca <DIO_SetPinDir+0x1c8>
    1650:	4f c0       	rjmp	.+158    	; 0x16f0 <DIO_SetPinDir+0x1ee>
			{
			case PORTA:
				SET_BIT(DDRA_REG,pin_indx);
    1652:	aa e3       	ldi	r26, 0x3A	; 58
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_SetPinDir+0x16e>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_SetPinDir+0x16a>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	3b c0       	rjmp	.+118    	; 0x16f0 <DIO_SetPinDir+0x1ee>
				break;
			case PORTB:
				SET_BIT(DDRB_REG,pin_indx);
    167a:	a7 e3       	ldi	r26, 0x37	; 55
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e7 e3       	ldi	r30, 0x37	; 55
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_SetPinDir+0x196>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_SetPinDir+0x192>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	27 c0       	rjmp	.+78     	; 0x16f0 <DIO_SetPinDir+0x1ee>
				break;
			case PORTC:
				SET_BIT(DDRC_REG,pin_indx);
    16a2:	a4 e3       	ldi	r26, 0x34	; 52
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e4 e3       	ldi	r30, 0x34	; 52
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_SetPinDir+0x1be>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_SetPinDir+0x1ba>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	13 c0       	rjmp	.+38     	; 0x16f0 <DIO_SetPinDir+0x1ee>
				break;
			case PORTD:
				SET_BIT(DDRD_REG,pin_indx);
    16ca:	a1 e3       	ldi	r26, 0x31	; 49
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e1 e3       	ldi	r30, 0x31	; 49
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_SetPinDir+0x1e6>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_SetPinDir+0x1e2>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
				break;
			}
		}

}
    16f0:	27 96       	adiw	r28, 0x07	; 7
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <DIO_SetPinVal>:
void DIO_SetPinVal(u8 port_indx, u8 pin_indx, u8 val) // set pin value (high,low) value for AVR
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	27 97       	sbiw	r28, 0x07	; 7
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	6a 83       	std	Y+2, r22	; 0x02
    171a:	4b 83       	std	Y+3, r20	; 0x03
	if(val==LOW)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 23       	and	r24, r24
    1720:	09 f0       	breq	.+2      	; 0x1724 <DIO_SetPinVal+0x22>
    1722:	73 c0       	rjmp	.+230    	; 0x180a <DIO_SetPinVal+0x108>
		{
			switch(port_indx)
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3f 83       	std	Y+7, r19	; 0x07
    172c:	2e 83       	std	Y+6, r18	; 0x06
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	9f 81       	ldd	r25, Y+7	; 0x07
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	59 f1       	breq	.+86     	; 0x178e <DIO_SetPinVal+0x8c>
    1738:	2e 81       	ldd	r18, Y+6	; 0x06
    173a:	3f 81       	ldd	r19, Y+7	; 0x07
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <DIO_SetPinVal+0x4a>
    1742:	8e 81       	ldd	r24, Y+6	; 0x06
    1744:	9f 81       	ldd	r25, Y+7	; 0x07
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f0       	breq	.+26     	; 0x1764 <DIO_SetPinVal+0x62>
    174a:	5f c0       	rjmp	.+190    	; 0x180a <DIO_SetPinVal+0x108>
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	89 f1       	breq	.+98     	; 0x17b8 <DIO_SetPinVal+0xb6>
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	9f 81       	ldd	r25, Y+7	; 0x07
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <DIO_SetPinVal+0x60>
    1760:	40 c0       	rjmp	.+128    	; 0x17e2 <DIO_SetPinVal+0xe0>
    1762:	53 c0       	rjmp	.+166    	; 0x180a <DIO_SetPinVal+0x108>
			{
			case PORTA:
				CLEAR_BIT(PORTA_REG,pin_indx);
    1764:	ab e3       	ldi	r26, 0x3B	; 59
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e3       	ldi	r30, 0x3B	; 59
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_SetPinVal+0x80>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <DIO_SetPinVal+0x7c>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	3e c0       	rjmp	.+124    	; 0x180a <DIO_SetPinVal+0x108>
				break;
			case PORTB:
				CLEAR_BIT(PORTB_REG,pin_indx);
    178e:	a8 e3       	ldi	r26, 0x38	; 56
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e8 e3       	ldi	r30, 0x38	; 56
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_SetPinVal+0xaa>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <DIO_SetPinVal+0xa6>
    17b0:	80 95       	com	r24
    17b2:	84 23       	and	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	29 c0       	rjmp	.+82     	; 0x180a <DIO_SetPinVal+0x108>
				break;
			case PORTC:
				CLEAR_BIT(PORTC_REG,pin_indx);
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_SetPinVal+0xd4>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_SetPinVal+0xd0>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <DIO_SetPinVal+0x108>
				break;
			case PORTD:
				CLEAR_BIT(PORTD_REG,pin_indx);
    17e2:	a2 e3       	ldi	r26, 0x32	; 50
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e2 e3       	ldi	r30, 0x32	; 50
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_SetPinVal+0xfe>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_SetPinVal+0xfa>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
				break;
			}
		}
		if(val==HIGH)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	09 f0       	breq	.+2      	; 0x1812 <DIO_SetPinVal+0x110>
    1810:	6e c0       	rjmp	.+220    	; 0x18ee <DIO_SetPinVal+0x1ec>
			{
			switch(port_indx)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3d 83       	std	Y+5, r19	; 0x05
    181a:	2c 83       	std	Y+4, r18	; 0x04
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	49 f1       	breq	.+82     	; 0x1878 <DIO_SetPinVal+0x176>
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <DIO_SetPinVal+0x138>
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f0       	breq	.+24     	; 0x1850 <DIO_SetPinVal+0x14e>
    1838:	5a c0       	rjmp	.+180    	; 0x18ee <DIO_SetPinVal+0x1ec>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	71 f1       	breq	.+92     	; 0x18a0 <DIO_SetPinVal+0x19e>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	e9 f1       	breq	.+122    	; 0x18c8 <DIO_SetPinVal+0x1c6>
    184e:	4f c0       	rjmp	.+158    	; 0x18ee <DIO_SetPinVal+0x1ec>
			{
			case PORTA:
				SET_BIT(PORTA_REG,pin_indx);
    1850:	ab e3       	ldi	r26, 0x3B	; 59
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	eb e3       	ldi	r30, 0x3B	; 59
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_SetPinVal+0x16c>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_SetPinVal+0x168>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	3b c0       	rjmp	.+118    	; 0x18ee <DIO_SetPinVal+0x1ec>
				break;
			case PORTB:
				SET_BIT(PORTB_REG,pin_indx);
    1878:	a8 e3       	ldi	r26, 0x38	; 56
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_SetPinVal+0x194>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_SetPinVal+0x190>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	27 c0       	rjmp	.+78     	; 0x18ee <DIO_SetPinVal+0x1ec>
				break;
			case PORTC:
				SET_BIT(PORTC_REG,pin_indx);
    18a0:	a5 e3       	ldi	r26, 0x35	; 53
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e3       	ldi	r30, 0x35	; 53
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_SetPinVal+0x1bc>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_SetPinVal+0x1b8>
    18c2:	84 2b       	or	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	13 c0       	rjmp	.+38     	; 0x18ee <DIO_SetPinVal+0x1ec>
				break;
			case PORTD:
				SET_BIT(PORTD_REG,pin_indx);
    18c8:	a2 e3       	ldi	r26, 0x32	; 50
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_SetPinVal+0x1e4>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_SetPinVal+0x1e0>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
				break;
			}
		}

}
    18ee:	27 96       	adiw	r28, 0x07	; 7
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <DIO_SetPortDir>:
void DIO_SetPortDir(u8 port_indx, u8 dir) // set port direction (input,output) for AVR
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <DIO_SetPortDir+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <DIO_SetPortDir+0x8>
    1908:	00 d0       	rcall	.+0      	; 0x190a <DIO_SetPortDir+0xa>
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	6a 83       	std	Y+2, r22	; 0x02
	if(dir==INPUT)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	88 23       	and	r24, r24
    1916:	71 f5       	brne	.+92     	; 0x1974 <DIO_SetPortDir+0x74>
	{
		switch (port_indx)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	3e 83       	std	Y+6, r19	; 0x06
    1920:	2d 83       	std	Y+5, r18	; 0x05
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	c9 f0       	breq	.+50     	; 0x195e <DIO_SetPortDir+0x5e>
    192c:	2d 81       	ldd	r18, Y+5	; 0x05
    192e:	3e 81       	ldd	r19, Y+6	; 0x06
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	2c f4       	brge	.+10     	; 0x1940 <DIO_SetPortDir+0x40>
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 f0       	breq	.+24     	; 0x1956 <DIO_SetPortDir+0x56>
    193e:	1a c0       	rjmp	.+52     	; 0x1974 <DIO_SetPortDir+0x74>
    1940:	2d 81       	ldd	r18, Y+5	; 0x05
    1942:	3e 81       	ldd	r19, Y+6	; 0x06
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	71 f0       	breq	.+28     	; 0x1966 <DIO_SetPortDir+0x66>
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	83 30       	cpi	r24, 0x03	; 3
    1950:	91 05       	cpc	r25, r1
    1952:	69 f0       	breq	.+26     	; 0x196e <DIO_SetPortDir+0x6e>
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <DIO_SetPortDir+0x74>
		{
		case PORTA:
			CLEAR_BYTE(DDRA_REG);
    1956:	ea e3       	ldi	r30, 0x3A	; 58
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	10 82       	st	Z, r1
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <DIO_SetPortDir+0x74>
			break;
		case PORTB:
			CLEAR_BYTE(DDRB_REG);
    195e:	e7 e3       	ldi	r30, 0x37	; 55
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	10 82       	st	Z, r1
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <DIO_SetPortDir+0x74>
			break;
		case PORTC:
			CLEAR_BYTE(DDRC_REG);
    1966:	e4 e3       	ldi	r30, 0x34	; 52
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	10 82       	st	Z, r1
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <DIO_SetPortDir+0x74>
			break;
		case PORTD:
			CLEAR_BYTE(DDRD_REG);
    196e:	e1 e3       	ldi	r30, 0x31	; 49
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	10 82       	st	Z, r1
			break;
		}
	}
	if(dir==OUTPUT)
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 f5       	brne	.+100    	; 0x19de <DIO_SetPortDir+0xde>
	{
		switch (port_indx)
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3c 83       	std	Y+4, r19	; 0x04
    1982:	2b 83       	std	Y+3, r18	; 0x03
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	d1 f0       	breq	.+52     	; 0x19c2 <DIO_SetPortDir+0xc2>
    198e:	2b 81       	ldd	r18, Y+3	; 0x03
    1990:	3c 81       	ldd	r19, Y+4	; 0x04
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	2c f4       	brge	.+10     	; 0x19a2 <DIO_SetPortDir+0xa2>
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	61 f0       	breq	.+24     	; 0x19b8 <DIO_SetPortDir+0xb8>
    19a0:	1e c0       	rjmp	.+60     	; 0x19de <DIO_SetPortDir+0xde>
    19a2:	2b 81       	ldd	r18, Y+3	; 0x03
    19a4:	3c 81       	ldd	r19, Y+4	; 0x04
    19a6:	22 30       	cpi	r18, 0x02	; 2
    19a8:	31 05       	cpc	r19, r1
    19aa:	81 f0       	breq	.+32     	; 0x19cc <DIO_SetPortDir+0xcc>
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	91 05       	cpc	r25, r1
    19b4:	81 f0       	breq	.+32     	; 0x19d6 <DIO_SetPortDir+0xd6>
    19b6:	13 c0       	rjmp	.+38     	; 0x19de <DIO_SetPortDir+0xde>
		{
			case PORTA:
				SET_BYTE(DDRA_REG);
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8f ef       	ldi	r24, 0xFF	; 255
    19be:	80 83       	st	Z, r24
    19c0:	0e c0       	rjmp	.+28     	; 0x19de <DIO_SetPortDir+0xde>
				break;
			case PORTB:
				SET_BYTE(DDRB_REG);
    19c2:	e7 e3       	ldi	r30, 0x37	; 55
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	80 83       	st	Z, r24
    19ca:	09 c0       	rjmp	.+18     	; 0x19de <DIO_SetPortDir+0xde>
				break;
			case PORTC:
				SET_BYTE(DDRC_REG);
    19cc:	e4 e3       	ldi	r30, 0x34	; 52
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	80 83       	st	Z, r24
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <DIO_SetPortDir+0xde>
				break;
			case PORTD:
				SET_BYTE(DDRD_REG);
    19d6:	e1 e3       	ldi	r30, 0x31	; 49
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	8f ef       	ldi	r24, 0xFF	; 255
    19dc:	80 83       	st	Z, r24
				break;
				}
	}
}
    19de:	26 96       	adiw	r28, 0x06	; 6
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <DIO_SetPortVal>:
void DIO_SetPortVal(u8 port_indx, u8 val) // set port value (high,low) for AVR
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <DIO_SetPortVal+0x6>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_SetPortVal+0x8>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_SetPortVal+0xa>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	6a 83       	std	Y+2, r22	; 0x02
	if(val==LOW)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 23       	and	r24, r24
    1a06:	71 f5       	brne	.+92     	; 0x1a64 <DIO_SetPortVal+0x74>
		{
			switch (port_indx)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	3e 83       	std	Y+6, r19	; 0x06
    1a10:	2d 83       	std	Y+5, r18	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	c9 f0       	breq	.+50     	; 0x1a4e <DIO_SetPortVal+0x5e>
    1a1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <DIO_SetPortVal+0x40>
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <DIO_SetPortVal+0x56>
    1a2e:	1a c0       	rjmp	.+52     	; 0x1a64 <DIO_SetPortVal+0x74>
    1a30:	2d 81       	ldd	r18, Y+5	; 0x05
    1a32:	3e 81       	ldd	r19, Y+6	; 0x06
    1a34:	22 30       	cpi	r18, 0x02	; 2
    1a36:	31 05       	cpc	r19, r1
    1a38:	71 f0       	breq	.+28     	; 0x1a56 <DIO_SetPortVal+0x66>
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	69 f0       	breq	.+26     	; 0x1a5e <DIO_SetPortVal+0x6e>
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <DIO_SetPortVal+0x74>
			{
			case PORTA:
				CLEAR_BYTE(PORTA_REG);
    1a46:	eb e3       	ldi	r30, 0x3B	; 59
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	10 82       	st	Z, r1
    1a4c:	0b c0       	rjmp	.+22     	; 0x1a64 <DIO_SetPortVal+0x74>
				break;
			case PORTB:
				CLEAR_BYTE(PORTB_REG);
    1a4e:	e8 e3       	ldi	r30, 0x38	; 56
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	10 82       	st	Z, r1
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <DIO_SetPortVal+0x74>
				break;
			case PORTC:
				CLEAR_BYTE(PORTC_REG);
    1a56:	e5 e3       	ldi	r30, 0x35	; 53
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	10 82       	st	Z, r1
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <DIO_SetPortVal+0x74>
				break;
			case PORTD:
				CLEAR_BYTE(PORTD_REG);
    1a5e:	e2 e3       	ldi	r30, 0x32	; 50
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	10 82       	st	Z, r1
				break;
			}
		}
		if(val==HIGH)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 f5       	brne	.+100    	; 0x1ace <DIO_SetPortVal+0xde>
		{
			switch (port_indx)
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3c 83       	std	Y+4, r19	; 0x04
    1a72:	2b 83       	std	Y+3, r18	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	d1 f0       	breq	.+52     	; 0x1ab2 <DIO_SetPortVal+0xc2>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <DIO_SetPortVal+0xa2>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	61 f0       	breq	.+24     	; 0x1aa8 <DIO_SetPortVal+0xb8>
    1a90:	1e c0       	rjmp	.+60     	; 0x1ace <DIO_SetPortVal+0xde>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	81 f0       	breq	.+32     	; 0x1abc <DIO_SetPortVal+0xcc>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	83 30       	cpi	r24, 0x03	; 3
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	81 f0       	breq	.+32     	; 0x1ac6 <DIO_SetPortVal+0xd6>
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <DIO_SetPortVal+0xde>
			{
				case PORTA:
					SET_BYTE(PORTA_REG);
    1aa8:	eb e3       	ldi	r30, 0x3B	; 59
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	80 83       	st	Z, r24
    1ab0:	0e c0       	rjmp	.+28     	; 0x1ace <DIO_SetPortVal+0xde>
					break;
				case PORTB:
					SET_BYTE(PORTB_REG);
    1ab2:	e8 e3       	ldi	r30, 0x38	; 56
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	80 83       	st	Z, r24
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <DIO_SetPortVal+0xde>
					break;
				case PORTC:
					SET_BYTE(PORTC_REG);
    1abc:	e5 e3       	ldi	r30, 0x35	; 53
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	80 83       	st	Z, r24
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <DIO_SetPortVal+0xde>
					break;
				case PORTD:
					SET_BYTE(PORTD_REG);
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	80 83       	st	Z, r24
					break;
			}
		}
}
    1ace:	26 96       	adiw	r28, 0x06	; 6
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <DIO_TogglePinVal>:

void DIO_TogglePinVal(u8 port_indx, u8 pin_indx) // toggles the pin value from high to low or vice versa
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <DIO_TogglePinVal+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <DIO_TogglePinVal+0x8>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_indx)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	3c 83       	std	Y+4, r19	; 0x04
    1af8:	2b 83       	std	Y+3, r18	; 0x03
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	91 05       	cpc	r25, r1
    1b02:	49 f1       	breq	.+82     	; 0x1b56 <DIO_TogglePinVal+0x76>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <DIO_TogglePinVal+0x38>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	61 f0       	breq	.+24     	; 0x1b2e <DIO_TogglePinVal+0x4e>
    1b16:	5a c0       	rjmp	.+180    	; 0x1bcc <DIO_TogglePinVal+0xec>
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	71 f1       	breq	.+92     	; 0x1b7e <DIO_TogglePinVal+0x9e>
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	91 05       	cpc	r25, r1
    1b2a:	e9 f1       	breq	.+122    	; 0x1ba6 <DIO_TogglePinVal+0xc6>
    1b2c:	4f c0       	rjmp	.+158    	; 0x1bcc <DIO_TogglePinVal+0xec>
	{
	case PORTA:
		TOGGLE_BIT(PORTA_REG,pin_indx);
    1b2e:	ab e3       	ldi	r26, 0x3B	; 59
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	eb e3       	ldi	r30, 0x3B	; 59
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_TogglePinVal+0x6c>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_TogglePinVal+0x68>
    1b50:	84 27       	eor	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	3b c0       	rjmp	.+118    	; 0x1bcc <DIO_TogglePinVal+0xec>
		break;
	case PORTB:
		TOGGLE_BIT(PORTB_REG,pin_indx);
    1b56:	a8 e3       	ldi	r26, 0x38	; 56
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_TogglePinVal+0x94>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_TogglePinVal+0x90>
    1b78:	84 27       	eor	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <DIO_TogglePinVal+0xec>
		break;
	case PORTC:
		TOGGLE_BIT(PORTC_REG,pin_indx);
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_TogglePinVal+0xbc>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_TogglePinVal+0xb8>
    1ba0:	84 27       	eor	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <DIO_TogglePinVal+0xec>
		break;
	case PORTD:
		TOGGLE_BIT(PORTD_REG,pin_indx);
    1ba6:	a2 e3       	ldi	r26, 0x32	; 50
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_TogglePinVal+0xe4>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_TogglePinVal+0xe0>
    1bc8:	84 27       	eor	r24, r20
    1bca:	8c 93       	st	X, r24
		break;
	}
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <DIO_SetNippleDir>:


void DIO_SetNippleDir(u8 port_indx, u8 nipple, u8 dir) // sets 4 pins direction
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	2b 97       	sbiw	r28, 0x0b	; 11
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	6a 83       	std	Y+2, r22	; 0x02
    1bf2:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==HIGH)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <DIO_SetNippleDir+0x22>
    1bfa:	85 c0       	rjmp	.+266    	; 0x1d06 <DIO_SetNippleDir+0x12c>
	{
		if(dir==OUTPUT)
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <DIO_SetNippleDir+0x2a>
    1c02:	3e c0       	rjmp	.+124    	; 0x1c80 <DIO_SetNippleDir+0xa6>
		{
			switch(port_indx)
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	3b 87       	std	Y+11, r19	; 0x0b
    1c0c:	2a 87       	std	Y+10, r18	; 0x0a
    1c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	e9 f0       	breq	.+58     	; 0x1c52 <DIO_SetNippleDir+0x78>
    1c18:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c1a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c1c:	22 30       	cpi	r18, 0x02	; 2
    1c1e:	31 05       	cpc	r19, r1
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <DIO_SetNippleDir+0x52>
    1c22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	61 f0       	breq	.+24     	; 0x1c42 <DIO_SetNippleDir+0x68>
    1c2a:	2a c0       	rjmp	.+84     	; 0x1c80 <DIO_SetNippleDir+0xa6>
    1c2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c2e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	b1 f0       	breq	.+44     	; 0x1c62 <DIO_SetNippleDir+0x88>
    1c36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	c9 f0       	breq	.+50     	; 0x1c72 <DIO_SetNippleDir+0x98>
    1c40:	1f c0       	rjmp	.+62     	; 0x1c80 <DIO_SetNippleDir+0xa6>
			{
			case PORTA:
				DDRA_REG|=0b11110000;
    1c42:	aa e3       	ldi	r26, 0x3A	; 58
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ea e3       	ldi	r30, 0x3A	; 58
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 6f       	ori	r24, 0xF0	; 240
    1c4e:	8c 93       	st	X, r24
    1c50:	17 c0       	rjmp	.+46     	; 0x1c80 <DIO_SetNippleDir+0xa6>
				break;
			case PORTB:
				DDRB_REG|=0b11110000;
    1c52:	a7 e3       	ldi	r26, 0x37	; 55
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e7 e3       	ldi	r30, 0x37	; 55
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 6f       	ori	r24, 0xF0	; 240
    1c5e:	8c 93       	st	X, r24
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <DIO_SetNippleDir+0xa6>
				break;
			case PORTC:
				DDRC_REG|=0b11110000;
    1c62:	a4 e3       	ldi	r26, 0x34	; 52
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e4 e3       	ldi	r30, 0x34	; 52
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 6f       	ori	r24, 0xF0	; 240
    1c6e:	8c 93       	st	X, r24
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <DIO_SetNippleDir+0xa6>
				break;
			case PORTD:
				DDRD_REG|=0b11110000;
    1c72:	a1 e3       	ldi	r26, 0x31	; 49
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e1 e3       	ldi	r30, 0x31	; 49
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 6f       	ori	r24, 0xF0	; 240
    1c7e:	8c 93       	st	X, r24
				break;
			}
		}
		if(dir==INPUT)
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	88 23       	and	r24, r24
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <DIO_SetNippleDir+0xae>
    1c86:	c7 c0       	rjmp	.+398    	; 0x1e16 <DIO_SetNippleDir+0x23c>
		{
			switch(port_indx)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	39 87       	std	Y+9, r19	; 0x09
    1c90:	28 87       	std	Y+8, r18	; 0x08
    1c92:	88 85       	ldd	r24, Y+8	; 0x08
    1c94:	99 85       	ldd	r25, Y+9	; 0x09
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	e9 f0       	breq	.+58     	; 0x1cd6 <DIO_SetNippleDir+0xfc>
    1c9c:	28 85       	ldd	r18, Y+8	; 0x08
    1c9e:	39 85       	ldd	r19, Y+9	; 0x09
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <DIO_SetNippleDir+0xd6>
    1ca6:	88 85       	ldd	r24, Y+8	; 0x08
    1ca8:	99 85       	ldd	r25, Y+9	; 0x09
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <DIO_SetNippleDir+0xec>
    1cae:	b3 c0       	rjmp	.+358    	; 0x1e16 <DIO_SetNippleDir+0x23c>
    1cb0:	28 85       	ldd	r18, Y+8	; 0x08
    1cb2:	39 85       	ldd	r19, Y+9	; 0x09
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	b1 f0       	breq	.+44     	; 0x1ce6 <DIO_SetNippleDir+0x10c>
    1cba:	88 85       	ldd	r24, Y+8	; 0x08
    1cbc:	99 85       	ldd	r25, Y+9	; 0x09
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	c9 f0       	breq	.+50     	; 0x1cf6 <DIO_SetNippleDir+0x11c>
    1cc4:	a8 c0       	rjmp	.+336    	; 0x1e16 <DIO_SetNippleDir+0x23c>
			{
			case PORTA:
				DDRA_REG&=0b00001111;
    1cc6:	aa e3       	ldi	r26, 0x3A	; 58
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ea e3       	ldi	r30, 0x3A	; 58
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	8f 70       	andi	r24, 0x0F	; 15
    1cd2:	8c 93       	st	X, r24
    1cd4:	a0 c0       	rjmp	.+320    	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			case PORTB:
				DDRB_REG&=0b00001111;
    1cd6:	a7 e3       	ldi	r26, 0x37	; 55
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e7 e3       	ldi	r30, 0x37	; 55
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 70       	andi	r24, 0x0F	; 15
    1ce2:	8c 93       	st	X, r24
    1ce4:	98 c0       	rjmp	.+304    	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			case PORTC:
				DDRC_REG&=0b00001111;
    1ce6:	a4 e3       	ldi	r26, 0x34	; 52
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e4 e3       	ldi	r30, 0x34	; 52
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	8f 70       	andi	r24, 0x0F	; 15
    1cf2:	8c 93       	st	X, r24
    1cf4:	90 c0       	rjmp	.+288    	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			case PORTD:
				DDRD_REG&=0b00001111;
    1cf6:	a1 e3       	ldi	r26, 0x31	; 49
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e3       	ldi	r30, 0x31	; 49
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8f 70       	andi	r24, 0x0F	; 15
    1d02:	8c 93       	st	X, r24
    1d04:	88 c0       	rjmp	.+272    	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			}
		}
	}
	else if(nipple==LOW)
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	88 23       	and	r24, r24
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <DIO_SetNippleDir+0x134>
    1d0c:	84 c0       	rjmp	.+264    	; 0x1e16 <DIO_SetNippleDir+0x23c>
	{
		if(dir==OUTPUT)
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <DIO_SetNippleDir+0x13c>
    1d14:	3e c0       	rjmp	.+124    	; 0x1d92 <DIO_SetNippleDir+0x1b8>
		{
			switch(port_indx)
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3f 83       	std	Y+7, r19	; 0x07
    1d1e:	2e 83       	std	Y+6, r18	; 0x06
    1d20:	8e 81       	ldd	r24, Y+6	; 0x06
    1d22:	9f 81       	ldd	r25, Y+7	; 0x07
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	91 05       	cpc	r25, r1
    1d28:	e9 f0       	breq	.+58     	; 0x1d64 <DIO_SetNippleDir+0x18a>
    1d2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d2e:	22 30       	cpi	r18, 0x02	; 2
    1d30:	31 05       	cpc	r19, r1
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <DIO_SetNippleDir+0x164>
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	9f 81       	ldd	r25, Y+7	; 0x07
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	61 f0       	breq	.+24     	; 0x1d54 <DIO_SetNippleDir+0x17a>
    1d3c:	2a c0       	rjmp	.+84     	; 0x1d92 <DIO_SetNippleDir+0x1b8>
    1d3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d40:	3f 81       	ldd	r19, Y+7	; 0x07
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	b1 f0       	breq	.+44     	; 0x1d74 <DIO_SetNippleDir+0x19a>
    1d48:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	91 05       	cpc	r25, r1
    1d50:	c9 f0       	breq	.+50     	; 0x1d84 <DIO_SetNippleDir+0x1aa>
    1d52:	1f c0       	rjmp	.+62     	; 0x1d92 <DIO_SetNippleDir+0x1b8>
			{
			case PORTA:
				DDRA_REG|=0b00001111;
    1d54:	aa e3       	ldi	r26, 0x3A	; 58
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	ea e3       	ldi	r30, 0x3A	; 58
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 60       	ori	r24, 0x0F	; 15
    1d60:	8c 93       	st	X, r24
    1d62:	17 c0       	rjmp	.+46     	; 0x1d92 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTB:
				DDRB_REG|=0b00001111;
    1d64:	a7 e3       	ldi	r26, 0x37	; 55
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e7 e3       	ldi	r30, 0x37	; 55
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8f 60       	ori	r24, 0x0F	; 15
    1d70:	8c 93       	st	X, r24
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTC:
				DDRC_REG|=0b00001111;
    1d74:	a4 e3       	ldi	r26, 0x34	; 52
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e4 e3       	ldi	r30, 0x34	; 52
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8f 60       	ori	r24, 0x0F	; 15
    1d80:	8c 93       	st	X, r24
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTD:
				DDRD_REG|=0b00001111;
    1d84:	a1 e3       	ldi	r26, 0x31	; 49
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e1 e3       	ldi	r30, 0x31	; 49
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 60       	ori	r24, 0x0F	; 15
    1d90:	8c 93       	st	X, r24
				break;
			}
		}
		if(dir==INPUT)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	88 23       	and	r24, r24
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <DIO_SetNippleDir+0x1c0>
    1d98:	3e c0       	rjmp	.+124    	; 0x1e16 <DIO_SetNippleDir+0x23c>
		{
			switch(port_indx)
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3d 83       	std	Y+5, r19	; 0x05
    1da2:	2c 83       	std	Y+4, r18	; 0x04
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	e9 f0       	breq	.+58     	; 0x1de8 <DIO_SetNippleDir+0x20e>
    1dae:	2c 81       	ldd	r18, Y+4	; 0x04
    1db0:	3d 81       	ldd	r19, Y+5	; 0x05
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <DIO_SetNippleDir+0x1e8>
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	61 f0       	breq	.+24     	; 0x1dd8 <DIO_SetNippleDir+0x1fe>
    1dc0:	2a c0       	rjmp	.+84     	; 0x1e16 <DIO_SetNippleDir+0x23c>
    1dc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	b1 f0       	breq	.+44     	; 0x1df8 <DIO_SetNippleDir+0x21e>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	c9 f0       	breq	.+50     	; 0x1e08 <DIO_SetNippleDir+0x22e>
    1dd6:	1f c0       	rjmp	.+62     	; 0x1e16 <DIO_SetNippleDir+0x23c>
			{
			case PORTA:
				DDRA_REG&=0b11110000;
    1dd8:	aa e3       	ldi	r26, 0x3A	; 58
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ea e3       	ldi	r30, 0x3A	; 58
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 7f       	andi	r24, 0xF0	; 240
    1de4:	8c 93       	st	X, r24
    1de6:	17 c0       	rjmp	.+46     	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			case PORTB:
				DDRB_REG&=0b11110000;
    1de8:	a7 e3       	ldi	r26, 0x37	; 55
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e7 e3       	ldi	r30, 0x37	; 55
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	80 7f       	andi	r24, 0xF0	; 240
    1df4:	8c 93       	st	X, r24
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			case PORTC:
				DDRC_REG&=0b11110000;
    1df8:	a4 e3       	ldi	r26, 0x34	; 52
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e4 e3       	ldi	r30, 0x34	; 52
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 7f       	andi	r24, 0xF0	; 240
    1e04:	8c 93       	st	X, r24
    1e06:	07 c0       	rjmp	.+14     	; 0x1e16 <DIO_SetNippleDir+0x23c>
				break;
			case PORTD:
				DDRD_REG&=0b11110000;
    1e08:	a1 e3       	ldi	r26, 0x31	; 49
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e1 e3       	ldi	r30, 0x31	; 49
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 7f       	andi	r24, 0xF0	; 240
    1e14:	8c 93       	st	X, r24
				break;
			}

		}
	}
}
    1e16:	2b 96       	adiw	r28, 0x0b	; 11
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <DIO_SetNippleVal>:

void DIO_SetNippleVal(u8 port_indx, u8 nipple, u8 val) // to set 4 pins value
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	2b 97       	sbiw	r28, 0x0b	; 11
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	6a 83       	std	Y+2, r22	; 0x02
    1e40:	4b 83       	std	Y+3, r20	; 0x03
if(nipple==HIGH)
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <DIO_SetNippleVal+0x22>
    1e48:	85 c0       	rjmp	.+266    	; 0x1f54 <DIO_SetNippleVal+0x12c>
{
	if(val==HIGH)
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <DIO_SetNippleVal+0x2a>
    1e50:	3e c0       	rjmp	.+124    	; 0x1ece <DIO_SetNippleVal+0xa6>
	{
		switch(port_indx)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3b 87       	std	Y+11, r19	; 0x0b
    1e5a:	2a 87       	std	Y+10, r18	; 0x0a
    1e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	91 05       	cpc	r25, r1
    1e64:	e9 f0       	breq	.+58     	; 0x1ea0 <DIO_SetNippleVal+0x78>
    1e66:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e68:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <DIO_SetNippleVal+0x52>
    1e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	61 f0       	breq	.+24     	; 0x1e90 <DIO_SetNippleVal+0x68>
    1e78:	2a c0       	rjmp	.+84     	; 0x1ece <DIO_SetNippleVal+0xa6>
    1e7a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e7c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e7e:	22 30       	cpi	r18, 0x02	; 2
    1e80:	31 05       	cpc	r19, r1
    1e82:	b1 f0       	breq	.+44     	; 0x1eb0 <DIO_SetNippleVal+0x88>
    1e84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	c9 f0       	breq	.+50     	; 0x1ec0 <DIO_SetNippleVal+0x98>
    1e8e:	1f c0       	rjmp	.+62     	; 0x1ece <DIO_SetNippleVal+0xa6>
		{
		case PORTA:
			PORTA_REG|=0b11110000;
    1e90:	ab e3       	ldi	r26, 0x3B	; 59
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	eb e3       	ldi	r30, 0x3B	; 59
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 6f       	ori	r24, 0xF0	; 240
    1e9c:	8c 93       	st	X, r24
    1e9e:	17 c0       	rjmp	.+46     	; 0x1ece <DIO_SetNippleVal+0xa6>
			break;
		case PORTB:
			PORTB_REG|=0b11110000;
    1ea0:	a8 e3       	ldi	r26, 0x38	; 56
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e8 e3       	ldi	r30, 0x38	; 56
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 6f       	ori	r24, 0xF0	; 240
    1eac:	8c 93       	st	X, r24
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <DIO_SetNippleVal+0xa6>
			break;
		case PORTC:
			PORTC_REG|=0b11110000;
    1eb0:	a5 e3       	ldi	r26, 0x35	; 53
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e3       	ldi	r30, 0x35	; 53
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 6f       	ori	r24, 0xF0	; 240
    1ebc:	8c 93       	st	X, r24
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <DIO_SetNippleVal+0xa6>
			break;
		case PORTD:
			PORTD_REG|=0b11110000;
    1ec0:	a2 e3       	ldi	r26, 0x32	; 50
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e2 e3       	ldi	r30, 0x32	; 50
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 6f       	ori	r24, 0xF0	; 240
    1ecc:	8c 93       	st	X, r24
			break;
		}
	}
	if(val==LOW)
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	88 23       	and	r24, r24
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <DIO_SetNippleVal+0xae>
    1ed4:	c7 c0       	rjmp	.+398    	; 0x2064 <DIO_SetNippleVal+0x23c>
	{
		switch(port_indx)
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	39 87       	std	Y+9, r19	; 0x09
    1ede:	28 87       	std	Y+8, r18	; 0x08
    1ee0:	88 85       	ldd	r24, Y+8	; 0x08
    1ee2:	99 85       	ldd	r25, Y+9	; 0x09
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	e9 f0       	breq	.+58     	; 0x1f24 <DIO_SetNippleVal+0xfc>
    1eea:	28 85       	ldd	r18, Y+8	; 0x08
    1eec:	39 85       	ldd	r19, Y+9	; 0x09
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <DIO_SetNippleVal+0xd6>
    1ef4:	88 85       	ldd	r24, Y+8	; 0x08
    1ef6:	99 85       	ldd	r25, Y+9	; 0x09
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <DIO_SetNippleVal+0xec>
    1efc:	b3 c0       	rjmp	.+358    	; 0x2064 <DIO_SetNippleVal+0x23c>
    1efe:	28 85       	ldd	r18, Y+8	; 0x08
    1f00:	39 85       	ldd	r19, Y+9	; 0x09
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	b1 f0       	breq	.+44     	; 0x1f34 <DIO_SetNippleVal+0x10c>
    1f08:	88 85       	ldd	r24, Y+8	; 0x08
    1f0a:	99 85       	ldd	r25, Y+9	; 0x09
    1f0c:	83 30       	cpi	r24, 0x03	; 3
    1f0e:	91 05       	cpc	r25, r1
    1f10:	c9 f0       	breq	.+50     	; 0x1f44 <DIO_SetNippleVal+0x11c>
    1f12:	a8 c0       	rjmp	.+336    	; 0x2064 <DIO_SetNippleVal+0x23c>
		{
		case PORTA:
			PORTA_REG&=0b00001111;
    1f14:	ab e3       	ldi	r26, 0x3B	; 59
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	eb e3       	ldi	r30, 0x3B	; 59
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8f 70       	andi	r24, 0x0F	; 15
    1f20:	8c 93       	st	X, r24
    1f22:	a0 c0       	rjmp	.+320    	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		case PORTB:
			PORTB_REG&=0b00001111;
    1f24:	a8 e3       	ldi	r26, 0x38	; 56
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e8 e3       	ldi	r30, 0x38	; 56
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8f 70       	andi	r24, 0x0F	; 15
    1f30:	8c 93       	st	X, r24
    1f32:	98 c0       	rjmp	.+304    	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		case PORTC:
			PORTC_REG&=0b00001111;
    1f34:	a5 e3       	ldi	r26, 0x35	; 53
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e5 e3       	ldi	r30, 0x35	; 53
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 70       	andi	r24, 0x0F	; 15
    1f40:	8c 93       	st	X, r24
    1f42:	90 c0       	rjmp	.+288    	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		case PORTD:
			PORTD_REG&=0b00001111;
    1f44:	a2 e3       	ldi	r26, 0x32	; 50
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 70       	andi	r24, 0x0F	; 15
    1f50:	8c 93       	st	X, r24
    1f52:	88 c0       	rjmp	.+272    	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		}
	}
}
else if(nipple==LOW)
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	88 23       	and	r24, r24
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <DIO_SetNippleVal+0x134>
    1f5a:	84 c0       	rjmp	.+264    	; 0x2064 <DIO_SetNippleVal+0x23c>
{
	if(val==HIGH)
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <DIO_SetNippleVal+0x13c>
    1f62:	3e c0       	rjmp	.+124    	; 0x1fe0 <DIO_SetNippleVal+0x1b8>
	{
		switch(port_indx)
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3f 83       	std	Y+7, r19	; 0x07
    1f6c:	2e 83       	std	Y+6, r18	; 0x06
    1f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f70:	9f 81       	ldd	r25, Y+7	; 0x07
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	e9 f0       	breq	.+58     	; 0x1fb2 <DIO_SetNippleVal+0x18a>
    1f78:	2e 81       	ldd	r18, Y+6	; 0x06
    1f7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <DIO_SetNippleVal+0x164>
    1f82:	8e 81       	ldd	r24, Y+6	; 0x06
    1f84:	9f 81       	ldd	r25, Y+7	; 0x07
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	61 f0       	breq	.+24     	; 0x1fa2 <DIO_SetNippleVal+0x17a>
    1f8a:	2a c0       	rjmp	.+84     	; 0x1fe0 <DIO_SetNippleVal+0x1b8>
    1f8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	b1 f0       	breq	.+44     	; 0x1fc2 <DIO_SetNippleVal+0x19a>
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	c9 f0       	breq	.+50     	; 0x1fd2 <DIO_SetNippleVal+0x1aa>
    1fa0:	1f c0       	rjmp	.+62     	; 0x1fe0 <DIO_SetNippleVal+0x1b8>
		{
		case PORTA:
			PORTA_REG|=0b00001111;
    1fa2:	ab e3       	ldi	r26, 0x3B	; 59
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	eb e3       	ldi	r30, 0x3B	; 59
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8f 60       	ori	r24, 0x0F	; 15
    1fae:	8c 93       	st	X, r24
    1fb0:	17 c0       	rjmp	.+46     	; 0x1fe0 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTB:
			PORTB_REG|=0b00001111;
    1fb2:	a8 e3       	ldi	r26, 0x38	; 56
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e8 e3       	ldi	r30, 0x38	; 56
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 60       	ori	r24, 0x0F	; 15
    1fbe:	8c 93       	st	X, r24
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTC:
			PORTC_REG|=0b00001111;
    1fc2:	a5 e3       	ldi	r26, 0x35	; 53
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e5 e3       	ldi	r30, 0x35	; 53
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 60       	ori	r24, 0x0F	; 15
    1fce:	8c 93       	st	X, r24
    1fd0:	07 c0       	rjmp	.+14     	; 0x1fe0 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTD:
			PORTD_REG|=0b00001111;
    1fd2:	a2 e3       	ldi	r26, 0x32	; 50
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e2 e3       	ldi	r30, 0x32	; 50
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 60       	ori	r24, 0x0F	; 15
    1fde:	8c 93       	st	X, r24
			break;
		}
	}
	if(val==LOW)
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <DIO_SetNippleVal+0x1c0>
    1fe6:	3e c0       	rjmp	.+124    	; 0x2064 <DIO_SetNippleVal+0x23c>
	{
		switch(port_indx)
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3d 83       	std	Y+5, r19	; 0x05
    1ff0:	2c 83       	std	Y+4, r18	; 0x04
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	e9 f0       	breq	.+58     	; 0x2036 <DIO_SetNippleVal+0x20e>
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	2c f4       	brge	.+10     	; 0x2010 <DIO_SetNippleVal+0x1e8>
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	61 f0       	breq	.+24     	; 0x2026 <DIO_SetNippleVal+0x1fe>
    200e:	2a c0       	rjmp	.+84     	; 0x2064 <DIO_SetNippleVal+0x23c>
    2010:	2c 81       	ldd	r18, Y+4	; 0x04
    2012:	3d 81       	ldd	r19, Y+5	; 0x05
    2014:	22 30       	cpi	r18, 0x02	; 2
    2016:	31 05       	cpc	r19, r1
    2018:	b1 f0       	breq	.+44     	; 0x2046 <DIO_SetNippleVal+0x21e>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	9d 81       	ldd	r25, Y+5	; 0x05
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	91 05       	cpc	r25, r1
    2022:	c9 f0       	breq	.+50     	; 0x2056 <DIO_SetNippleVal+0x22e>
    2024:	1f c0       	rjmp	.+62     	; 0x2064 <DIO_SetNippleVal+0x23c>
		{
		case PORTA:
			PORTA_REG&=0b11110000;
    2026:	ab e3       	ldi	r26, 0x3B	; 59
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 7f       	andi	r24, 0xF0	; 240
    2032:	8c 93       	st	X, r24
    2034:	17 c0       	rjmp	.+46     	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		case PORTB:
			PORTB_REG&=0b11110000;
    2036:	a8 e3       	ldi	r26, 0x38	; 56
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e8 e3       	ldi	r30, 0x38	; 56
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	80 7f       	andi	r24, 0xF0	; 240
    2042:	8c 93       	st	X, r24
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		case PORTC:
			PORTC_REG&=0b11110000;
    2046:	a5 e3       	ldi	r26, 0x35	; 53
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e3       	ldi	r30, 0x35	; 53
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 7f       	andi	r24, 0xF0	; 240
    2052:	8c 93       	st	X, r24
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <DIO_SetNippleVal+0x23c>
			break;
		case PORTD:
			PORTD_REG&=0b11110000;
    2056:	a2 e3       	ldi	r26, 0x32	; 50
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e2 e3       	ldi	r30, 0x32	; 50
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	80 7f       	andi	r24, 0xF0	; 240
    2062:	8c 93       	st	X, r24
		}

	}

	}
}
    2064:	2b 96       	adiw	r28, 0x0b	; 11
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <DIO_AssignPortVal>:

void DIO_AssignPortVal(u8 port_indx, u8 val) //assigns a value to a port
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <DIO_AssignPortVal+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <DIO_AssignPortVal+0x8>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_indx)
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	3c 83       	std	Y+4, r19	; 0x04
    208e:	2b 83       	std	Y+3, r18	; 0x03
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	91 05       	cpc	r25, r1
    2098:	d1 f0       	breq	.+52     	; 0x20ce <DIO_AssignPortVal+0x58>
    209a:	2b 81       	ldd	r18, Y+3	; 0x03
    209c:	3c 81       	ldd	r19, Y+4	; 0x04
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	31 05       	cpc	r19, r1
    20a2:	2c f4       	brge	.+10     	; 0x20ae <DIO_AssignPortVal+0x38>
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	61 f0       	breq	.+24     	; 0x20c4 <DIO_AssignPortVal+0x4e>
    20ac:	1e c0       	rjmp	.+60     	; 0x20ea <DIO_AssignPortVal+0x74>
    20ae:	2b 81       	ldd	r18, Y+3	; 0x03
    20b0:	3c 81       	ldd	r19, Y+4	; 0x04
    20b2:	22 30       	cpi	r18, 0x02	; 2
    20b4:	31 05       	cpc	r19, r1
    20b6:	81 f0       	breq	.+32     	; 0x20d8 <DIO_AssignPortVal+0x62>
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	83 30       	cpi	r24, 0x03	; 3
    20be:	91 05       	cpc	r25, r1
    20c0:	81 f0       	breq	.+32     	; 0x20e2 <DIO_AssignPortVal+0x6c>
    20c2:	13 c0       	rjmp	.+38     	; 0x20ea <DIO_AssignPortVal+0x74>
	{
	case PORTA:
		PORTA_REG=val;
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	80 83       	st	Z, r24
    20cc:	0e c0       	rjmp	.+28     	; 0x20ea <DIO_AssignPortVal+0x74>
		break;
	case PORTB:
		PORTB_REG=val;
    20ce:	e8 e3       	ldi	r30, 0x38	; 56
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	80 83       	st	Z, r24
    20d6:	09 c0       	rjmp	.+18     	; 0x20ea <DIO_AssignPortVal+0x74>
		break;
	case PORTC:
		PORTC_REG=val;
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	80 83       	st	Z, r24
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <DIO_AssignPortVal+0x74>
		break;
	case PORTD:
		PORTD_REG=val;
    20e2:	e2 e3       	ldi	r30, 0x32	; 50
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	80 83       	st	Z, r24
		break;

	}
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <DIO_AssignNippleVal>:


void DIO_AssignNippleVal(u8 port_indx, u8 nipple, u8 val)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	27 97       	sbiw	r28, 0x07	; 7
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	6a 83       	std	Y+2, r22	; 0x02
    2110:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==HIGH)
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	09 f0       	breq	.+2      	; 0x211a <DIO_AssignNippleVal+0x22>
    2118:	7c c0       	rjmp	.+248    	; 0x2212 <DIO_AssignNippleVal+0x11a>
	{
		{
			switch(port_indx)
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3f 83       	std	Y+7, r19	; 0x07
    2122:	2e 83       	std	Y+6, r18	; 0x06
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	9f 81       	ldd	r25, Y+7	; 0x07
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	91 05       	cpc	r25, r1
    212c:	69 f1       	breq	.+90     	; 0x2188 <DIO_AssignNippleVal+0x90>
    212e:	2e 81       	ldd	r18, Y+6	; 0x06
    2130:	3f 81       	ldd	r19, Y+7	; 0x07
    2132:	22 30       	cpi	r18, 0x02	; 2
    2134:	31 05       	cpc	r19, r1
    2136:	2c f4       	brge	.+10     	; 0x2142 <DIO_AssignNippleVal+0x4a>
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	9f 81       	ldd	r25, Y+7	; 0x07
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f0       	breq	.+26     	; 0x215a <DIO_AssignNippleVal+0x62>
    2140:	e7 c0       	rjmp	.+462    	; 0x2310 <DIO_AssignNippleVal+0x218>
    2142:	2e 81       	ldd	r18, Y+6	; 0x06
    2144:	3f 81       	ldd	r19, Y+7	; 0x07
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	a9 f1       	breq	.+106    	; 0x21b6 <DIO_AssignNippleVal+0xbe>
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	9f 81       	ldd	r25, Y+7	; 0x07
    2150:	83 30       	cpi	r24, 0x03	; 3
    2152:	91 05       	cpc	r25, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <DIO_AssignNippleVal+0x60>
    2156:	46 c0       	rjmp	.+140    	; 0x21e4 <DIO_AssignNippleVal+0xec>
    2158:	db c0       	rjmp	.+438    	; 0x2310 <DIO_AssignNippleVal+0x218>
			{
			case PORTA:
				ASSIGN_HIGH_NIBBLE(PORTA_REG,val);
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	80 7f       	andi	r24, 0xF0	; 240
    215e:	8b 83       	std	Y+3, r24	; 0x03
    2160:	ab e3       	ldi	r26, 0x3B	; 59
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	eb e3       	ldi	r30, 0x3B	; 59
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	90 81       	ld	r25, Z
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	89 2b       	or	r24, r25
    216e:	8c 93       	st	X, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	8f 60       	ori	r24, 0x0F	; 15
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	ab e3       	ldi	r26, 0x3B	; 59
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	eb e3       	ldi	r30, 0x3B	; 59
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	90 81       	ld	r25, Z
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	89 23       	and	r24, r25
    2184:	8c 93       	st	X, r24
    2186:	c4 c0       	rjmp	.+392    	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			case PORTB:
				ASSIGN_HIGH_NIBBLE(PORTB_REG,val);
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	80 7f       	andi	r24, 0xF0	; 240
    218c:	8b 83       	std	Y+3, r24	; 0x03
    218e:	a8 e3       	ldi	r26, 0x38	; 56
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e8 e3       	ldi	r30, 0x38	; 56
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	90 81       	ld	r25, Z
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	89 2b       	or	r24, r25
    219c:	8c 93       	st	X, r24
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	8f 60       	ori	r24, 0x0F	; 15
    21a2:	8b 83       	std	Y+3, r24	; 0x03
    21a4:	a8 e3       	ldi	r26, 0x38	; 56
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e8 e3       	ldi	r30, 0x38	; 56
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	90 81       	ld	r25, Z
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	89 23       	and	r24, r25
    21b2:	8c 93       	st	X, r24
    21b4:	ad c0       	rjmp	.+346    	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			case PORTC:
				ASSIGN_HIGH_NIBBLE(PORTC_REG,val);
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	80 7f       	andi	r24, 0xF0	; 240
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	a5 e3       	ldi	r26, 0x35	; 53
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e5 e3       	ldi	r30, 0x35	; 53
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	90 81       	ld	r25, Z
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	89 2b       	or	r24, r25
    21ca:	8c 93       	st	X, r24
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	8f 60       	ori	r24, 0x0F	; 15
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	a5 e3       	ldi	r26, 0x35	; 53
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e5 e3       	ldi	r30, 0x35	; 53
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	90 81       	ld	r25, Z
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	89 23       	and	r24, r25
    21e0:	8c 93       	st	X, r24
    21e2:	96 c0       	rjmp	.+300    	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			case PORTD:
				ASSIGN_HIGH_NIBBLE(PORTD_REG,val);
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	80 7f       	andi	r24, 0xF0	; 240
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	a2 e3       	ldi	r26, 0x32	; 50
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e2 e3       	ldi	r30, 0x32	; 50
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	90 81       	ld	r25, Z
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	89 2b       	or	r24, r25
    21f8:	8c 93       	st	X, r24
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	8f 60       	ori	r24, 0x0F	; 15
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	a2 e3       	ldi	r26, 0x32	; 50
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e2 e3       	ldi	r30, 0x32	; 50
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	90 81       	ld	r25, Z
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	89 23       	and	r24, r25
    220e:	8c 93       	st	X, r24
    2210:	7f c0       	rjmp	.+254    	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			}
		}
	}
	else if(nipple==LOW)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	88 23       	and	r24, r24
    2216:	09 f0       	breq	.+2      	; 0x221a <DIO_AssignNippleVal+0x122>
    2218:	7b c0       	rjmp	.+246    	; 0x2310 <DIO_AssignNippleVal+0x218>
	{
			switch(port_indx)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	3d 83       	std	Y+5, r19	; 0x05
    2222:	2c 83       	std	Y+4, r18	; 0x04
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	91 05       	cpc	r25, r1
    222c:	69 f1       	breq	.+90     	; 0x2288 <DIO_AssignNippleVal+0x190>
    222e:	2c 81       	ldd	r18, Y+4	; 0x04
    2230:	3d 81       	ldd	r19, Y+5	; 0x05
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	31 05       	cpc	r19, r1
    2236:	2c f4       	brge	.+10     	; 0x2242 <DIO_AssignNippleVal+0x14a>
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f0       	breq	.+26     	; 0x225a <DIO_AssignNippleVal+0x162>
    2240:	67 c0       	rjmp	.+206    	; 0x2310 <DIO_AssignNippleVal+0x218>
    2242:	2c 81       	ldd	r18, Y+4	; 0x04
    2244:	3d 81       	ldd	r19, Y+5	; 0x05
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	a9 f1       	breq	.+106    	; 0x22b6 <DIO_AssignNippleVal+0x1be>
    224c:	8c 81       	ldd	r24, Y+4	; 0x04
    224e:	9d 81       	ldd	r25, Y+5	; 0x05
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <DIO_AssignNippleVal+0x160>
    2256:	46 c0       	rjmp	.+140    	; 0x22e4 <DIO_AssignNippleVal+0x1ec>
    2258:	5b c0       	rjmp	.+182    	; 0x2310 <DIO_AssignNippleVal+0x218>
			{
			case PORTA:
				ASSIGN_LOW_NIBBLE(PORTA_REG,val);
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	8f 70       	andi	r24, 0x0F	; 15
    225e:	8b 83       	std	Y+3, r24	; 0x03
    2260:	ab e3       	ldi	r26, 0x3B	; 59
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	eb e3       	ldi	r30, 0x3B	; 59
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	90 81       	ld	r25, Z
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	89 2b       	or	r24, r25
    226e:	8c 93       	st	X, r24
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	80 6f       	ori	r24, 0xF0	; 240
    2274:	8b 83       	std	Y+3, r24	; 0x03
    2276:	ab e3       	ldi	r26, 0x3B	; 59
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	eb e3       	ldi	r30, 0x3B	; 59
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	90 81       	ld	r25, Z
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	89 23       	and	r24, r25
    2284:	8c 93       	st	X, r24
    2286:	44 c0       	rjmp	.+136    	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			case PORTB:
				ASSIGN_LOW_NIBBLE(PORTB_REG,val);
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	8f 70       	andi	r24, 0x0F	; 15
    228c:	8b 83       	std	Y+3, r24	; 0x03
    228e:	a8 e3       	ldi	r26, 0x38	; 56
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e8 e3       	ldi	r30, 0x38	; 56
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	90 81       	ld	r25, Z
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	89 2b       	or	r24, r25
    229c:	8c 93       	st	X, r24
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	80 6f       	ori	r24, 0xF0	; 240
    22a2:	8b 83       	std	Y+3, r24	; 0x03
    22a4:	a8 e3       	ldi	r26, 0x38	; 56
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e3       	ldi	r30, 0x38	; 56
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	90 81       	ld	r25, Z
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	89 23       	and	r24, r25
    22b2:	8c 93       	st	X, r24
    22b4:	2d c0       	rjmp	.+90     	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			case PORTC:
				ASSIGN_LOW_NIBBLE(PORTC_REG,val);
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	8f 70       	andi	r24, 0x0F	; 15
    22ba:	8b 83       	std	Y+3, r24	; 0x03
    22bc:	a5 e3       	ldi	r26, 0x35	; 53
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e5 e3       	ldi	r30, 0x35	; 53
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	90 81       	ld	r25, Z
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	89 2b       	or	r24, r25
    22ca:	8c 93       	st	X, r24
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	80 6f       	ori	r24, 0xF0	; 240
    22d0:	8b 83       	std	Y+3, r24	; 0x03
    22d2:	a5 e3       	ldi	r26, 0x35	; 53
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e5 e3       	ldi	r30, 0x35	; 53
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	90 81       	ld	r25, Z
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	89 23       	and	r24, r25
    22e0:	8c 93       	st	X, r24
    22e2:	16 c0       	rjmp	.+44     	; 0x2310 <DIO_AssignNippleVal+0x218>
				break;
			case PORTD:
				ASSIGN_LOW_NIBBLE(PORTD_REG,val);
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	8f 70       	andi	r24, 0x0F	; 15
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	a2 e3       	ldi	r26, 0x32	; 50
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e2 e3       	ldi	r30, 0x32	; 50
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	90 81       	ld	r25, Z
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	89 2b       	or	r24, r25
    22f8:	8c 93       	st	X, r24
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	80 6f       	ori	r24, 0xF0	; 240
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	a2 e3       	ldi	r26, 0x32	; 50
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e2 e3       	ldi	r30, 0x32	; 50
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	90 81       	ld	r25, Z
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	89 23       	and	r24, r25
    230e:	8c 93       	st	X, r24
				break;
			}
		}
	}
    2310:	27 96       	adiw	r28, 0x07	; 7
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <DIO_GetPinVal>:


u8 DIO_GetPinVal(u8 port_indx, u8 pin_indx) // get pin value (high,low) from a pin for AVR
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <DIO_GetPinVal+0x6>
    2328:	00 d0       	rcall	.+0      	; 0x232a <DIO_GetPinVal+0x8>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	8a 83       	std	Y+2, r24	; 0x02
    2332:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
    2334:	19 82       	std	Y+1, r1	; 0x01
	switch(port_indx)
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3d 83       	std	Y+5, r19	; 0x05
    233e:	2c 83       	std	Y+4, r18	; 0x04
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	9d 81       	ldd	r25, Y+5	; 0x05
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	91 05       	cpc	r25, r1
    2348:	39 f1       	breq	.+78     	; 0x2398 <DIO_GetPinVal+0x76>
    234a:	2c 81       	ldd	r18, Y+4	; 0x04
    234c:	3d 81       	ldd	r19, Y+5	; 0x05
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	31 05       	cpc	r19, r1
    2352:	2c f4       	brge	.+10     	; 0x235e <DIO_GetPinVal+0x3c>
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	61 f0       	breq	.+24     	; 0x2374 <DIO_GetPinVal+0x52>
    235c:	52 c0       	rjmp	.+164    	; 0x2402 <DIO_GetPinVal+0xe0>
    235e:	2c 81       	ldd	r18, Y+4	; 0x04
    2360:	3d 81       	ldd	r19, Y+5	; 0x05
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	51 f1       	breq	.+84     	; 0x23bc <DIO_GetPinVal+0x9a>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	91 05       	cpc	r25, r1
    2370:	b9 f1       	breq	.+110    	; 0x23e0 <DIO_GetPinVal+0xbe>
    2372:	47 c0       	rjmp	.+142    	; 0x2402 <DIO_GetPinVal+0xe0>
	{
	case PORTA:
		pin_value=(PINA_REG)&(1<<pin_indx);
    2374:	e9 e3       	ldi	r30, 0x39	; 57
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	48 2f       	mov	r20, r24
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	02 2e       	mov	r0, r18
    2388:	02 c0       	rjmp	.+4      	; 0x238e <DIO_GetPinVal+0x6c>
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	0a 94       	dec	r0
    2390:	e2 f7       	brpl	.-8      	; 0x238a <DIO_GetPinVal+0x68>
    2392:	84 23       	and	r24, r20
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	35 c0       	rjmp	.+106    	; 0x2402 <DIO_GetPinVal+0xe0>
		break;
	case PORTB:
		pin_value=(PINB_REG)&(1<<pin_indx);
    2398:	e6 e3       	ldi	r30, 0x36	; 54
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	02 2e       	mov	r0, r18
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <DIO_GetPinVal+0x90>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	0a 94       	dec	r0
    23b4:	e2 f7       	brpl	.-8      	; 0x23ae <DIO_GetPinVal+0x8c>
    23b6:	84 23       	and	r24, r20
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	23 c0       	rjmp	.+70     	; 0x2402 <DIO_GetPinVal+0xe0>
		break;
	case PORTC:
		pin_value=(PINC_REG)&(1<<pin_indx);
    23bc:	e3 e3       	ldi	r30, 0x33	; 51
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	48 2f       	mov	r20, r24
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	02 2e       	mov	r0, r18
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <DIO_GetPinVal+0xb4>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <DIO_GetPinVal+0xb0>
    23da:	84 23       	and	r24, r20
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	11 c0       	rjmp	.+34     	; 0x2402 <DIO_GetPinVal+0xe0>
		break;
	case PORTD:
		pin_value=(PIND_REG)&(1<<pin_indx);
    23e0:	e0 e3       	ldi	r30, 0x30	; 48
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <DIO_GetPinVal+0xd8>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <DIO_GetPinVal+0xd4>
    23fe:	84 23       	and	r24, r20
    2400:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return pin_value;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <LCD_vidInit>:


#if BIT_MODE_4 == DISABLE

	void LCD_vidInit(void)
	{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	2e 97       	sbiw	r28, 0x0e	; 14
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
		DIO_vidSetPortDir(PORT_DATA_NO , OUTPUT);
    2428:	84 e0       	ldi	r24, 0x04	; 4
    242a:	61 e0       	ldi	r22, 0x01	; 1
    242c:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_vidSetPortDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , EN , OUTPUT);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	65 e0       	ldi	r22, 0x05	; 5
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , RW , OUTPUT);
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , RS , OUTPUT);
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	67 e0       	ldi	r22, 0x07	; 7
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_vidSetPinDir>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a8 e4       	ldi	r26, 0x48	; 72
    2454:	b2 e4       	ldi	r27, 0x42	; 66
    2456:	8b 87       	std	Y+11, r24	; 0x0b
    2458:	9c 87       	std	Y+12, r25	; 0x0c
    245a:	ad 87       	std	Y+13, r26	; 0x0d
    245c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a ef       	ldi	r20, 0xFA	; 250
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8f 83       	std	Y+7, r24	; 0x07
    2478:	98 87       	std	Y+8, r25	; 0x08
    247a:	a9 87       	std	Y+9, r26	; 0x09
    247c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247e:	6f 81       	ldd	r22, Y+7	; 0x07
    2480:	78 85       	ldd	r23, Y+8	; 0x08
    2482:	89 85       	ldd	r24, Y+9	; 0x09
    2484:	9a 85       	ldd	r25, Y+10	; 0x0a
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <LCD_vidInit+0x8c>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	8d 83       	std	Y+5, r24	; 0x05
    249e:	3f c0       	rjmp	.+126    	; 0x251e <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    24a0:	6f 81       	ldd	r22, Y+7	; 0x07
    24a2:	78 85       	ldd	r23, Y+8	; 0x08
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <LCD_vidInit+0xec>
    24e2:	88 ec       	ldi	r24, 0xC8	; 200
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <LCD_vidInit+0xda>
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <LCD_vidInit+0xce>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_vidInit+0x116>
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
		LCD_vidCmd(CMD_FUNCTION_8BIT);
    2532:	88 e3       	ldi	r24, 0x38	; 56
    2534:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_vidCmd>
		LCD_vidCmd(CMD_DISPLAY_ON);
    2538:	8c e0       	ldi	r24, 0x0C	; 12
    253a:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_vidCmd>
		LCD_vidCmd(CMD_ENTRY_MODE);
    253e:	86 e0       	ldi	r24, 0x06	; 6
    2540:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_vidCmd>
		LCD_vidCmd(CMD_CLEAR);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_vidCmd>
		LCD_vidCmd(CMD_HOME);
    254a:	80 e8       	ldi	r24, 0x80	; 128
    254c:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_vidCmd>


	}
    2550:	2e 96       	adiw	r28, 0x0e	; 14
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <LCD_vidCmd>:


	void LCD_vidCmd(uint8 cmd)
	{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	ab 97       	sbiw	r28, 0x2b	; 43
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	65 e0       	ldi	r22, 0x05	; 5
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RS,LOW);
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	67 e0       	ldi	r22, 0x07	; 7
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RW,LOW);
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	66 e0       	ldi	r22, 0x06	; 6
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>

		DIO_vidWriteOnPort(PORT_DATA_NO,cmd);
    2596:	84 e0       	ldi	r24, 0x04	; 4
    2598:	6b a5       	ldd	r22, Y+43	; 0x2b
    259a:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_vidWriteOnPort>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e8       	ldi	r26, 0x80	; 128
    25a4:	bf e3       	ldi	r27, 0x3F	; 63
    25a6:	8f a3       	std	Y+39, r24	; 0x27
    25a8:	98 a7       	std	Y+40, r25	; 0x28
    25aa:	a9 a7       	std	Y+41, r26	; 0x29
    25ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6f a1       	ldd	r22, Y+39	; 0x27
    25b0:	78 a5       	ldd	r23, Y+40	; 0x28
    25b2:	89 a5       	ldd	r24, Y+41	; 0x29
    25b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a ef       	ldi	r20, 0xFA	; 250
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8b a3       	std	Y+35, r24	; 0x23
    25c8:	9c a3       	std	Y+36, r25	; 0x24
    25ca:	ad a3       	std	Y+37, r26	; 0x25
    25cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25ce:	6b a1       	ldd	r22, Y+35	; 0x23
    25d0:	7c a1       	ldd	r23, Y+36	; 0x24
    25d2:	8d a1       	ldd	r24, Y+37	; 0x25
    25d4:	9e a1       	ldd	r25, Y+38	; 0x26
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <LCD_vidCmd+0x8e>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9a a3       	std	Y+34, r25	; 0x22
    25ec:	89 a3       	std	Y+33, r24	; 0x21
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <LCD_vidCmd+0x10c>
	else if (__tmp > 65535)
    25f0:	6b a1       	ldd	r22, Y+35	; 0x23
    25f2:	7c a1       	ldd	r23, Y+36	; 0x24
    25f4:	8d a1       	ldd	r24, Y+37	; 0x25
    25f6:	9e a1       	ldd	r25, Y+38	; 0x26
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <LCD_vidCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6f a1       	ldd	r22, Y+39	; 0x27
    260a:	78 a5       	ldd	r23, Y+40	; 0x28
    260c:	89 a5       	ldd	r24, Y+41	; 0x29
    260e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9a a3       	std	Y+34, r25	; 0x22
    262e:	89 a3       	std	Y+33, r24	; 0x21
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <LCD_vidCmd+0xee>
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	98 a3       	std	Y+32, r25	; 0x20
    2638:	8f 8f       	std	Y+31, r24	; 0x1f
    263a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263c:	98 a1       	ldd	r25, Y+32	; 0x20
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_vidCmd+0xdc>
    2642:	98 a3       	std	Y+32, r25	; 0x20
    2644:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	89 a1       	ldd	r24, Y+33	; 0x21
    2648:	9a a1       	ldd	r25, Y+34	; 0x22
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9a a3       	std	Y+34, r25	; 0x22
    264e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	89 a1       	ldd	r24, Y+33	; 0x21
    2652:	9a a1       	ldd	r25, Y+34	; 0x22
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <LCD_vidCmd+0xd0>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <LCD_vidCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6b a1       	ldd	r22, Y+35	; 0x23
    265c:	7c a1       	ldd	r23, Y+36	; 0x24
    265e:	8d a1       	ldd	r24, Y+37	; 0x25
    2660:	9e a1       	ldd	r25, Y+38	; 0x26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9a a3       	std	Y+34, r25	; 0x22
    266c:	89 a3       	std	Y+33, r24	; 0x21
    266e:	89 a1       	ldd	r24, Y+33	; 0x21
    2670:	9a a1       	ldd	r25, Y+34	; 0x22
    2672:	9e 8f       	std	Y+30, r25	; 0x1e
    2674:	8d 8f       	std	Y+29, r24	; 0x1d
    2676:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2678:	9e 8d       	ldd	r25, Y+30	; 0x1e
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_vidCmd+0x118>
    267e:	9e 8f       	std	Y+30, r25	; 0x1e
    2680:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,LOW);
    2682:	83 e0       	ldi	r24, 0x03	; 3
    2684:	65 e0       	ldi	r22, 0x05	; 5
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 ea       	ldi	r26, 0xA0	; 160
    2692:	b0 e4       	ldi	r27, 0x40	; 64
    2694:	89 8f       	std	Y+25, r24	; 0x19
    2696:	9a 8f       	std	Y+26, r25	; 0x1a
    2698:	ab 8f       	std	Y+27, r26	; 0x1b
    269a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	69 8d       	ldd	r22, Y+25	; 0x19
    269e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a ef       	ldi	r20, 0xFA	; 250
    26aa:	54 e4       	ldi	r21, 0x44	; 68
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8d 8b       	std	Y+21, r24	; 0x15
    26b6:	9e 8b       	std	Y+22, r25	; 0x16
    26b8:	af 8b       	std	Y+23, r26	; 0x17
    26ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <LCD_vidCmd+0x17c>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <LCD_vidCmd+0x1fa>
	else if (__tmp > 65535)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <LCD_vidCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	0f c0       	rjmp	.+30     	; 0x273e <LCD_vidCmd+0x1dc>
    2720:	88 ec       	ldi	r24, 0xC8	; 200
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9a 8b       	std	Y+18, r25	; 0x12
    2726:	89 8b       	std	Y+17, r24	; 0x11
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_vidCmd+0x1ca>
    2730:	9a 8b       	std	Y+18, r25	; 0x12
    2732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <LCD_vidCmd+0x1be>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <LCD_vidCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	8b 89       	ldd	r24, Y+19	; 0x13
    275e:	9c 89       	ldd	r25, Y+20	; 0x14
    2760:	98 8b       	std	Y+16, r25	; 0x10
    2762:	8f 87       	std	Y+15, r24	; 0x0f
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	98 89       	ldd	r25, Y+16	; 0x10
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_vidCmd+0x206>
    276c:	98 8b       	std	Y+16, r25	; 0x10
    276e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    2770:	83 e0       	ldi	r24, 0x03	; 3
    2772:	65 e0       	ldi	r22, 0x05	; 5
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e4       	ldi	r27, 0x40	; 64
    2782:	8b 87       	std	Y+11, r24	; 0x0b
    2784:	9c 87       	std	Y+12, r25	; 0x0c
    2786:	ad 87       	std	Y+13, r26	; 0x0d
    2788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	6b 85       	ldd	r22, Y+11	; 0x0b
    278c:	7c 85       	ldd	r23, Y+12	; 0x0c
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	9e 85       	ldd	r25, Y+14	; 0x0e
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a ef       	ldi	r20, 0xFA	; 250
    2798:	54 e4       	ldi	r21, 0x44	; 68
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8f 83       	std	Y+7, r24	; 0x07
    27a4:	98 87       	std	Y+8, r25	; 0x08
    27a6:	a9 87       	std	Y+9, r26	; 0x09
    27a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_vidCmd+0x26a>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <LCD_vidCmd+0x2e8>
	else if (__tmp > 65535)
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <LCD_vidCmd+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	0f c0       	rjmp	.+30     	; 0x282c <LCD_vidCmd+0x2ca>
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_vidCmd+0x2b8>
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <LCD_vidCmd+0x2ac>
    2834:	14 c0       	rjmp	.+40     	; 0x285e <LCD_vidCmd+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_vidCmd+0x2f4>
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
    285e:	ab 96       	adiw	r28, 0x2b	; 43
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <LCD_vidDispChar>:

	void LCD_vidDispChar(uint8 data)
	{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	6d 97       	sbiw	r28, 0x1d	; 29
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	65 e0       	ldi	r22, 0x05	; 5
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RS,HIGH);
    2890:	83 e0       	ldi	r24, 0x03	; 3
    2892:	67 e0       	ldi	r22, 0x07	; 7
    2894:	41 e0       	ldi	r20, 0x01	; 1
    2896:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RW,LOW);
    289a:	83 e0       	ldi	r24, 0x03	; 3
    289c:	66 e0       	ldi	r22, 0x06	; 6
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>

		DIO_vidWriteOnPort(PORT_DATA_NO,data);
    28a4:	84 e0       	ldi	r24, 0x04	; 4
    28a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28a8:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_vidWriteOnPort>
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,LOW);
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a0 ea       	ldi	r26, 0xA0	; 160
    28bc:	b0 e4       	ldi	r27, 0x40	; 64
    28be:	89 8f       	std	Y+25, r24	; 0x19
    28c0:	9a 8f       	std	Y+26, r25	; 0x1a
    28c2:	ab 8f       	std	Y+27, r26	; 0x1b
    28c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c6:	69 8d       	ldd	r22, Y+25	; 0x19
    28c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	4a ef       	ldi	r20, 0xFA	; 250
    28d4:	54 e4       	ldi	r21, 0x44	; 68
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	8d 8b       	std	Y+21, r24	; 0x15
    28e0:	9e 8b       	std	Y+22, r25	; 0x16
    28e2:	af 8b       	std	Y+23, r26	; 0x17
    28e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e6:	6d 89       	ldd	r22, Y+21	; 0x15
    28e8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ea:	8f 89       	ldd	r24, Y+23	; 0x17
    28ec:	98 8d       	ldd	r25, Y+24	; 0x18
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e8       	ldi	r20, 0x80	; 128
    28f4:	5f e3       	ldi	r21, 0x3F	; 63
    28f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28fa:	88 23       	and	r24, r24
    28fc:	2c f4       	brge	.+10     	; 0x2908 <LCD_vidDispChar+0x98>
		__ticks = 1;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
    2906:	3f c0       	rjmp	.+126    	; 0x2986 <LCD_vidDispChar+0x116>
	else if (__tmp > 65535)
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	57 e4       	ldi	r21, 0x47	; 71
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	4c f5       	brge	.+82     	; 0x2972 <LCD_vidDispChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2920:	69 8d       	ldd	r22, Y+25	; 0x19
    2922:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2924:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2926:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e2       	ldi	r20, 0x20	; 32
    292e:	51 e4       	ldi	r21, 0x41	; 65
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
    2948:	0f c0       	rjmp	.+30     	; 0x2968 <LCD_vidDispChar+0xf8>
    294a:	88 ec       	ldi	r24, 0xC8	; 200
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9a 8b       	std	Y+18, r25	; 0x12
    2950:	89 8b       	std	Y+17, r24	; 0x11
    2952:	89 89       	ldd	r24, Y+17	; 0x11
    2954:	9a 89       	ldd	r25, Y+18	; 0x12
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <LCD_vidDispChar+0xe6>
    295a:	9a 8b       	std	Y+18, r25	; 0x12
    295c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295e:	8b 89       	ldd	r24, Y+19	; 0x13
    2960:	9c 89       	ldd	r25, Y+20	; 0x14
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	9c 8b       	std	Y+20, r25	; 0x14
    2966:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2968:	8b 89       	ldd	r24, Y+19	; 0x13
    296a:	9c 89       	ldd	r25, Y+20	; 0x14
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	69 f7       	brne	.-38     	; 0x294a <LCD_vidDispChar+0xda>
    2970:	14 c0       	rjmp	.+40     	; 0x299a <LCD_vidDispChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	6d 89       	ldd	r22, Y+21	; 0x15
    2974:	7e 89       	ldd	r23, Y+22	; 0x16
    2976:	8f 89       	ldd	r24, Y+23	; 0x17
    2978:	98 8d       	ldd	r25, Y+24	; 0x18
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9c 8b       	std	Y+20, r25	; 0x14
    2984:	8b 8b       	std	Y+19, r24	; 0x13
    2986:	8b 89       	ldd	r24, Y+19	; 0x13
    2988:	9c 89       	ldd	r25, Y+20	; 0x14
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	8f 87       	std	Y+15, r24	; 0x0f
    298e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2990:	98 89       	ldd	r25, Y+16	; 0x10
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <LCD_vidDispChar+0x122>
    2996:	98 8b       	std	Y+16, r25	; 0x10
    2998:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	65 e0       	ldi	r22, 0x05	; 5
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 c5 08 	call	0x118a	; 0x118a <DIO_vidWriteOnPin>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 ea       	ldi	r26, 0xA0	; 160
    29aa:	b0 e4       	ldi	r27, 0x40	; 64
    29ac:	8b 87       	std	Y+11, r24	; 0x0b
    29ae:	9c 87       	std	Y+12, r25	; 0x0c
    29b0:	ad 87       	std	Y+13, r26	; 0x0d
    29b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	4a ef       	ldi	r20, 0xFA	; 250
    29c2:	54 e4       	ldi	r21, 0x44	; 68
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	8f 83       	std	Y+7, r24	; 0x07
    29ce:	98 87       	std	Y+8, r25	; 0x08
    29d0:	a9 87       	std	Y+9, r26	; 0x09
    29d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d4:	6f 81       	ldd	r22, Y+7	; 0x07
    29d6:	78 85       	ldd	r23, Y+8	; 0x08
    29d8:	89 85       	ldd	r24, Y+9	; 0x09
    29da:	9a 85       	ldd	r25, Y+10	; 0x0a
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e8       	ldi	r20, 0x80	; 128
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e8:	88 23       	and	r24, r24
    29ea:	2c f4       	brge	.+10     	; 0x29f6 <LCD_vidDispChar+0x186>
		__ticks = 1;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	3f c0       	rjmp	.+126    	; 0x2a74 <LCD_vidDispChar+0x204>
	else if (__tmp > 65535)
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	4f e7       	ldi	r20, 0x7F	; 127
    2a04:	57 e4       	ldi	r21, 0x47	; 71
    2a06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0a:	18 16       	cp	r1, r24
    2a0c:	4c f5       	brge	.+82     	; 0x2a60 <LCD_vidDispChar+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e2       	ldi	r20, 0x20	; 32
    2a1c:	51 e4       	ldi	r21, 0x41	; 65
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	0f c0       	rjmp	.+30     	; 0x2a56 <LCD_vidDispChar+0x1e6>
    2a38:	88 ec       	ldi	r24, 0xC8	; 200
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_vidDispChar+0x1d4>
    2a48:	9c 83       	std	Y+4, r25	; 0x04
    2a4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <LCD_vidDispChar+0x1c8>
    2a5e:	14 c0       	rjmp	.+40     	; 0x2a88 <LCD_vidDispChar+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_vidDispChar+0x210>
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
	}
    2a88:	6d 96       	adiw	r28, 0x1d	; 29
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <LCD_vidDispString>:
		_delay_ms(5);
	}

#endif
void LCD_vidDispString(uint8 *data)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	61 97       	sbiw	r28, 0x11	; 17
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	99 8b       	std	Y+17, r25	; 0x11
    2ab0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0 ;
    2ab2:	1f 86       	std	Y+15, r1	; 0x0f
    2ab4:	80 c0       	rjmp	.+256    	; 0x2bb6 <LCD_vidDispString+0x11c>
	while (data[i]!=0) {
		LCD_vidDispChar(data[i]);
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	88 89       	ldd	r24, Y+16	; 0x10
    2abe:	99 89       	ldd	r25, Y+17	; 0x11
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	e2 0f       	add	r30, r18
    2ac4:	f3 1f       	adc	r31, r19
    2ac6:	80 81       	ld	r24, Z
    2ac8:	0e 94 38 14 	call	0x2870	; 0x2870 <LCD_vidDispChar>
		i++;
    2acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ace:	8f 5f       	subi	r24, 0xFF	; 255
    2ad0:	8f 87       	std	Y+15, r24	; 0x0f
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a ef       	ldi	r20, 0xFA	; 250
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_vidDispString+0x8a>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_vidDispString+0x108>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_vidDispString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_vidDispString+0xea>
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_vidDispString+0xd8>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_vidDispString+0xcc>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_vidDispString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_vidDispString+0x114>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01

#endif
void LCD_vidDispString(uint8 *data)
{
	uint8 i=0 ;
	while (data[i]!=0) {
    2bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	88 89       	ldd	r24, Y+16	; 0x10
    2bbe:	99 89       	ldd	r25, Y+17	; 0x11
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e2 0f       	add	r30, r18
    2bc4:	f3 1f       	adc	r31, r19
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 23       	and	r24, r24
    2bca:	09 f0       	breq	.+2      	; 0x2bce <LCD_vidDispString+0x134>
    2bcc:	74 cf       	rjmp	.-280    	; 0x2ab6 <LCD_vidDispString+0x1c>
		LCD_vidDispChar(data[i]);
		i++;
		_delay_ms(1);
	}
}
    2bce:	61 96       	adiw	r28, 0x11	; 17
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <main>:

void ADC_Temp_Init(void);
//int ADC_Read(char channel);


int main() {
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	6c 97       	sbiw	r28, 0x1c	; 28
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
	////Initialization////
	DIO_SetPinDir( PORTD,  PIN0,  INPUT); //Rx
    2bf4:	83 e0       	ldi	r24, 0x03	; 3
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	0e 94 81 0a 	call	0x1502	; 0x1502 <DIO_SetPinDir>
	DIO_SetPinDir( PORTD,  PIN1,  OUTPUT); //Tx
    2bfe:	83 e0       	ldi	r24, 0x03	; 3
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 81 0a 	call	0x1502	; 0x1502 <DIO_SetPinDir>
	DIO_SetPinDir( RESET_PORT,  RESET_PIN,  OUTPUT); //Reset pin
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	66 e0       	ldi	r22, 0x06	; 6
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	0e 94 81 0a 	call	0x1502	; 0x1502 <DIO_SetPinDir>
	USART_inti();
    2c12:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <USART_inti>
	DIO_SetPinVal(RESET_PORT,RESET_PIN,LOW);
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	66 e0       	ldi	r22, 0x06	; 6
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	0e 94 81 0b 	call	0x1702	; 0x1702 <DIO_SetPinVal>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a8 ec       	ldi	r26, 0xC8	; 200
    2c26:	b2 e4       	ldi	r27, 0x42	; 66
    2c28:	89 8f       	std	Y+25, r24	; 0x19
    2c2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	69 8d       	ldd	r22, Y+25	; 0x19
    2c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a ef       	ldi	r20, 0xFA	; 250
    2c3e:	54 e4       	ldi	r21, 0x44	; 68
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	8d 8b       	std	Y+21, r24	; 0x15
    2c4a:	9e 8b       	std	Y+22, r25	; 0x16
    2c4c:	af 8b       	std	Y+23, r26	; 0x17
    2c4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c50:	6d 89       	ldd	r22, Y+21	; 0x15
    2c52:	7e 89       	ldd	r23, Y+22	; 0x16
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <main+0x92>
		__ticks = 1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9c 8b       	std	Y+20, r25	; 0x14
    2c6e:	8b 8b       	std	Y+19, r24	; 0x13
    2c70:	3f c0       	rjmp	.+126    	; 0x2cf0 <main+0x110>
	else if (__tmp > 65535)
    2c72:	6d 89       	ldd	r22, Y+21	; 0x15
    2c74:	7e 89       	ldd	r23, Y+22	; 0x16
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	4c f5       	brge	.+82     	; 0x2cdc <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	9c 8b       	std	Y+20, r25	; 0x14
    2cb0:	8b 8b       	std	Y+19, r24	; 0x13
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <main+0xf2>
    2cb4:	88 ec       	ldi	r24, 0xC8	; 200
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9a 8b       	std	Y+18, r25	; 0x12
    2cba:	89 8b       	std	Y+17, r24	; 0x11
    2cbc:	89 89       	ldd	r24, Y+17	; 0x11
    2cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <main+0xe0>
    2cc4:	9a 8b       	std	Y+18, r25	; 0x12
    2cc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cca:	9c 89       	ldd	r25, Y+20	; 0x14
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <main+0xd4>
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf4:	98 8b       	std	Y+16, r25	; 0x10
    2cf6:	8f 87       	std	Y+15, r24	; 0x0f
    2cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfa:	98 89       	ldd	r25, Y+16	; 0x10
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <main+0x11c>
    2d00:	98 8b       	std	Y+16, r25	; 0x10
    2d02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms( 100 );
	DIO_SetPinVal(RESET_PORT,RESET_PIN,HIGH);
    2d04:	83 e0       	ldi	r24, 0x03	; 3
    2d06:	66 e0       	ldi	r22, 0x06	; 6
    2d08:	41 e0       	ldi	r20, 0x01	; 1
    2d0a:	0e 94 81 0b 	call	0x1702	; 0x1702 <DIO_SetPinVal>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	aa e7       	ldi	r26, 0x7A	; 122
    2d14:	b4 e4       	ldi	r27, 0x44	; 68
    2d16:	8b 87       	std	Y+11, r24	; 0x0b
    2d18:	9c 87       	std	Y+12, r25	; 0x0c
    2d1a:	ad 87       	std	Y+13, r26	; 0x0d
    2d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4a ef       	ldi	r20, 0xFA	; 250
    2d2c:	54 e4       	ldi	r21, 0x44	; 68
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	8f 83       	std	Y+7, r24	; 0x07
    2d38:	98 87       	std	Y+8, r25	; 0x08
    2d3a:	a9 87       	std	Y+9, r26	; 0x09
    2d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d40:	78 85       	ldd	r23, Y+8	; 0x08
    2d42:	89 85       	ldd	r24, Y+9	; 0x09
    2d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	5f e3       	ldi	r21, 0x3F	; 63
    2d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	2c f4       	brge	.+10     	; 0x2d60 <main+0x180>
		__ticks = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	3f c0       	rjmp	.+126    	; 0x2dde <main+0x1fe>
	else if (__tmp > 65535)
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	4c f5       	brge	.+82     	; 0x2dca <main+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	51 e4       	ldi	r21, 0x41	; 65
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <main+0x1e0>
    2da2:	88 ec       	ldi	r24, 0xC8	; 200
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <main+0x1ce>
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db6:	8d 81       	ldd	r24, Y+5	; 0x05
    2db8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	69 f7       	brne	.-38     	; 0x2da2 <main+0x1c2>
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <main+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dca:	6f 81       	ldd	r22, Y+7	; 0x07
    2dcc:	78 85       	ldd	r23, Y+8	; 0x08
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <main+0x20a>
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	ESP8266_VidInit();  //intilize wifi
    2df2:	0e 94 08 19 	call	0x3210	; 0x3210 <ESP8266_VidInit>
	ESP8266_VidConnectToWiFi("OPPO Reno2","11112222");  //connect to wifi
    2df6:	80 e6       	ldi	r24, 0x60	; 96
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	2b e6       	ldi	r18, 0x6B	; 107
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	b9 01       	movw	r22, r18
    2e00:	0e 94 82 1b 	call	0x3704	; 0x3704 <ESP8266_VidConnectToWiFi>
	sei();
    2e04:	78 94       	sei


	ADC_Init();    // adc intilize for heart beat
    2e06:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <ADC_Init>
	TCCR0=0x03;     //timers
    2e0a:	e3 e5       	ldi	r30, 0x53	; 83
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	83 e0       	ldi	r24, 0x03	; 3
    2e10:	80 83       	st	Z, r24
	TIMSK|=0x01;
    2e12:	a9 e5       	ldi	r26, 0x59	; 89
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e9 e5       	ldi	r30, 0x59	; 89
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	81 60       	ori	r24, 0x01	; 1
    2e1e:	8c 93       	st	X, r24


	while (1) {

		if (flag_finish==1)
    2e20:	80 91 98 02 	lds	r24, 0x0298
    2e24:	90 91 99 02 	lds	r25, 0x0299
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	c9 f7       	brne	.-14     	; 0x2e20 <main+0x240>
		{
			//wifi part sends the data in the variable
			// we will send variable (bpm )for heart beat
			// we will send variable (temp)for temprature
			bpm=bpm*6;
    2e2e:	20 91 8e 02 	lds	r18, 0x028E
    2e32:	30 91 8f 02 	lds	r19, 0x028F
    2e36:	c9 01       	movw	r24, r18
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	82 0f       	add	r24, r18
    2e3e:	93 1f       	adc	r25, r19
    2e40:	88 0f       	add	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	90 93 8f 02 	sts	0x028F, r25
    2e48:	80 93 8e 02 	sts	0x028E, r24
			ESP8266_VidSendHB(bpm);
    2e4c:	80 91 8e 02 	lds	r24, 0x028E
    2e50:	90 91 8f 02 	lds	r25, 0x028F
    2e54:	0e 94 41 24 	call	0x4882	; 0x4882 <ESP8266_VidSendHB>
			ESP8266_VidSendPR(temp);
    2e58:	80 91 9a 02 	lds	r24, 0x029A
    2e5c:	90 91 9b 02 	lds	r25, 0x029B
    2e60:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <ESP8266_VidSendPR>


			flag_finish=0;
    2e64:	10 92 99 02 	sts	0x0299, r1
    2e68:	10 92 98 02 	sts	0x0298, r1
    2e6c:	d9 cf       	rjmp	.-78     	; 0x2e20 <main+0x240>

00002e6e <ADC_Init>:




void ADC_Init()  // intilizing adc for heart beat
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62

	ClrBit(DDRA, 1);  // make ADC channel pin input for heart
    2e76:	aa e3       	ldi	r26, 0x3A	; 58
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	ea e3       	ldi	r30, 0x3A	; 58
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	8d 7f       	andi	r24, 0xFD	; 253
    2e82:	8c 93       	st	X, r24
	ADCSRA = 0x8F;  // enable ADC with frequency 8M/128  and interrupt enable
    2e84:	e6 e2       	ldi	r30, 0x26	; 38
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	8f e8       	ldi	r24, 0x8F	; 143
    2e8a:	80 83       	st	Z, r24
	ADMUX = 0x40; //set reference VCC
    2e8c:	e7 e2       	ldi	r30, 0x27	; 39
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 e4       	ldi	r24, 0x40	; 64
    2e92:	80 83       	st	Z, r24
}
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <ADC_Temp_Init>:



void ADC_Temp_Init(void)   // intilizing adc for temp
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
	ClrBit(DDRA,0);  // make ADC channel pin input
    2ea2:	aa e3       	ldi	r26, 0x3A	; 58
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	ea e3       	ldi	r30, 0x3A	; 58
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	8e 7f       	andi	r24, 0xFE	; 254
    2eae:	8c 93       	st	X, r24
	ADCSRA=0x8F;  // enable ADC with frequency 8M/128
    2eb0:	e6 e2       	ldi	r30, 0x26	; 38
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	8f e8       	ldi	r24, 0x8F	; 143
    2eb6:	80 83       	st	Z, r24
	ADMUX=0x41; //set reference VCC
    2eb8:	e7 e2       	ldi	r30, 0x27	; 39
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	81 e4       	ldi	r24, 0x41	; 65
    2ebe:	80 83       	st	Z, r24
}
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <__vector_16>:


ISR(ADC_vect)
{  if (heart_flag==1)
    2ec6:	1f 92       	push	r1
    2ec8:	0f 92       	push	r0
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	0f 92       	push	r0
    2ece:	11 24       	eor	r1, r1
    2ed0:	2f 93       	push	r18
    2ed2:	3f 93       	push	r19
    2ed4:	4f 93       	push	r20
    2ed6:	5f 93       	push	r21
    2ed8:	6f 93       	push	r22
    2eda:	7f 93       	push	r23
    2edc:	8f 93       	push	r24
    2ede:	9f 93       	push	r25
    2ee0:	af 93       	push	r26
    2ee2:	bf 93       	push	r27
    2ee4:	ef 93       	push	r30
    2ee6:	ff 93       	push	r31
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	80 91 96 02 	lds	r24, 0x0296
    2efa:	90 91 97 02 	lds	r25, 0x0297
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	91 05       	cpc	r25, r1
    2f02:	a9 f5       	brne	.+106    	; 0x2f6e <__vector_16+0xa8>
{
	AinLow = (int) ADCL;
    2f04:	e4 e2       	ldi	r30, 0x24	; 36
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	90 93 a1 02 	sts	0x02A1, r25
    2f12:	80 93 a0 02 	sts	0x02A0, r24
	Ain = ADCH * 256;
    2f16:	e5 e2       	ldi	r30, 0x25	; 37
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	98 2f       	mov	r25, r24
    2f22:	88 27       	eor	r24, r24
    2f24:	90 93 a3 02 	sts	0x02A3, r25
    2f28:	80 93 a2 02 	sts	0x02A2, r24
	Ain = Ain + AinLow;
    2f2c:	20 91 a2 02 	lds	r18, 0x02A2
    2f30:	30 91 a3 02 	lds	r19, 0x02A3
    2f34:	80 91 a0 02 	lds	r24, 0x02A0
    2f38:	90 91 a1 02 	lds	r25, 0x02A1
    2f3c:	82 0f       	add	r24, r18
    2f3e:	93 1f       	adc	r25, r19
    2f40:	90 93 a3 02 	sts	0x02A3, r25
    2f44:	80 93 a2 02 	sts	0x02A2, r24
	if (Ain>=650)
    2f48:	80 91 a2 02 	lds	r24, 0x02A2
    2f4c:	90 91 a3 02 	lds	r25, 0x02A3
    2f50:	22 e0       	ldi	r18, 0x02	; 2
    2f52:	8a 38       	cpi	r24, 0x8A	; 138
    2f54:	92 07       	cpc	r25, r18
    2f56:	0c f4       	brge	.+2      	; 0x2f5a <__vector_16+0x94>
    2f58:	bb c0       	rjmp	.+374    	; 0x30d0 <__vector_16+0x20a>
	{ bpm++;}
    2f5a:	80 91 8e 02 	lds	r24, 0x028E
    2f5e:	90 91 8f 02 	lds	r25, 0x028F
    2f62:	01 96       	adiw	r24, 0x01	; 1
    2f64:	90 93 8f 02 	sts	0x028F, r25
    2f68:	80 93 8e 02 	sts	0x028E, r24
    2f6c:	b1 c0       	rjmp	.+354    	; 0x30d0 <__vector_16+0x20a>

	//bpm is the variable i want send for tmepreature;
}
else if(temp_flag==1)
    2f6e:	80 91 94 02 	lds	r24, 0x0294
    2f72:	90 91 95 02 	lds	r25, 0x0295
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	91 05       	cpc	r25, r1
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <__vector_16+0xb8>
    2f7c:	a9 c0       	rjmp	.+338    	; 0x30d0 <__vector_16+0x20a>
{
	temp=ADCL*2.5; // 2.5 is the step size 2.5mV
    2f7e:	e4 e2       	ldi	r30, 0x24	; 36
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	88 2f       	mov	r24, r24
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	aa 27       	eor	r26, r26
    2f8a:	97 fd       	sbrc	r25, 7
    2f8c:	a0 95       	com	r26
    2f8e:	ba 2f       	mov	r27, r26
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	50 e4       	ldi	r21, 0x40	; 64
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	90 93 9b 02 	sts	0x029B, r25
    2fc0:	80 93 9a 02 	sts	0x029A, r24
	temp/=10; // LM35 return 10mv / celsius
    2fc4:	80 91 9a 02 	lds	r24, 0x029A
    2fc8:	90 91 9b 02 	lds	r25, 0x029B
    2fcc:	2a e0       	ldi	r18, 0x0A	; 10
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	b9 01       	movw	r22, r18
    2fd2:	0e 94 1b 29 	call	0x5236	; 0x5236 <__divmodhi4>
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	90 93 9b 02 	sts	0x029B, r25
    2fdc:	80 93 9a 02 	sts	0x029A, r24
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	a8 e4       	ldi	r26, 0x48	; 72
    2fe6:	b2 e4       	ldi	r27, 0x42	; 66
    2fe8:	8b 87       	std	Y+11, r24	; 0x0b
    2fea:	9c 87       	std	Y+12, r25	; 0x0c
    2fec:	ad 87       	std	Y+13, r26	; 0x0d
    2fee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4a ef       	ldi	r20, 0xFA	; 250
    2ffe:	54 e4       	ldi	r21, 0x44	; 68
    3000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	8f 83       	std	Y+7, r24	; 0x07
    300a:	98 87       	std	Y+8, r25	; 0x08
    300c:	a9 87       	std	Y+9, r26	; 0x09
    300e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3010:	6f 81       	ldd	r22, Y+7	; 0x07
    3012:	78 85       	ldd	r23, Y+8	; 0x08
    3014:	89 85       	ldd	r24, Y+9	; 0x09
    3016:	9a 85       	ldd	r25, Y+10	; 0x0a
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3024:	88 23       	and	r24, r24
    3026:	2c f4       	brge	.+10     	; 0x3032 <__vector_16+0x16c>
		__ticks = 1;
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	3f c0       	rjmp	.+126    	; 0x30b0 <__vector_16+0x1ea>
	else if (__tmp > 65535)
    3032:	6f 81       	ldd	r22, Y+7	; 0x07
    3034:	78 85       	ldd	r23, Y+8	; 0x08
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	3f ef       	ldi	r19, 0xFF	; 255
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	57 e4       	ldi	r21, 0x47	; 71
    3042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3046:	18 16       	cp	r1, r24
    3048:	4c f5       	brge	.+82     	; 0x309c <__vector_16+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304a:	6b 85       	ldd	r22, Y+11	; 0x0b
    304c:	7c 85       	ldd	r23, Y+12	; 0x0c
    304e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3050:	9e 85       	ldd	r25, Y+14	; 0x0e
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e2       	ldi	r20, 0x20	; 32
    3058:	51 e4       	ldi	r21, 0x41	; 65
    305a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
    3072:	0f c0       	rjmp	.+30     	; 0x3092 <__vector_16+0x1cc>
    3074:	88 ec       	ldi	r24, 0xC8	; 200
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9c 83       	std	Y+4, r25	; 0x04
    307a:	8b 83       	std	Y+3, r24	; 0x03
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	9c 81       	ldd	r25, Y+4	; 0x04
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <__vector_16+0x1ba>
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3088:	8d 81       	ldd	r24, Y+5	; 0x05
    308a:	9e 81       	ldd	r25, Y+6	; 0x06
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	69 f7       	brne	.-38     	; 0x3074 <__vector_16+0x1ae>
    309a:	14 c0       	rjmp	.+40     	; 0x30c4 <__vector_16+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309c:	6f 81       	ldd	r22, Y+7	; 0x07
    309e:	78 85       	ldd	r23, Y+8	; 0x08
    30a0:	89 85       	ldd	r24, Y+9	; 0x09
    30a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
    30b0:	8d 81       	ldd	r24, Y+5	; 0x05
    30b2:	9e 81       	ldd	r25, Y+6	; 0x06
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <__vector_16+0x1f6>
    30c0:	9a 83       	std	Y+2, r25	; 0x02
    30c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	flag_finish=1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	90 93 99 02 	sts	0x0299, r25
    30cc:	80 93 98 02 	sts	0x0298, r24

	//temp is the variable i want send for tmepreature

}
}
    30d0:	2e 96       	adiw	r28, 0x0e	; 14
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	ff 91       	pop	r31
    30dc:	ef 91       	pop	r30
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	7f 91       	pop	r23
    30e8:	6f 91       	pop	r22
    30ea:	5f 91       	pop	r21
    30ec:	4f 91       	pop	r20
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	0f 90       	pop	r0
    30f8:	1f 90       	pop	r1
    30fa:	18 95       	reti

000030fc <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    30fc:	1f 92       	push	r1
    30fe:	0f 92       	push	r0
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	0f 92       	push	r0
    3104:	11 24       	eor	r1, r1
    3106:	2f 93       	push	r18
    3108:	3f 93       	push	r19
    310a:	4f 93       	push	r20
    310c:	5f 93       	push	r21
    310e:	6f 93       	push	r22
    3110:	7f 93       	push	r23
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	ef 93       	push	r30
    311c:	ff 93       	push	r31
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
	flag10++;
    3126:	80 91 92 02 	lds	r24, 0x0292
    312a:	90 91 93 02 	lds	r25, 0x0293
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	90 93 93 02 	sts	0x0293, r25
    3134:	80 93 92 02 	sts	0x0292, r24
	if (flag10<5000)
    3138:	80 91 92 02 	lds	r24, 0x0292
    313c:	90 91 93 02 	lds	r25, 0x0293
    3140:	23 e1       	ldi	r18, 0x13	; 19
    3142:	88 38       	cpi	r24, 0x88	; 136
    3144:	92 07       	cpc	r25, r18
    3146:	b4 f5       	brge	.+108    	; 0x31b4 <__vector_11+0xb8>
	{
		if (temp_flag==1 && heart_flag==0)
    3148:	80 91 94 02 	lds	r24, 0x0294
    314c:	90 91 95 02 	lds	r25, 0x0295
    3150:	81 30       	cpi	r24, 0x01	; 1
    3152:	91 05       	cpc	r25, r1
    3154:	41 f4       	brne	.+16     	; 0x3166 <__vector_11+0x6a>
    3156:	80 91 96 02 	lds	r24, 0x0296
    315a:	90 91 97 02 	lds	r25, 0x0297
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	11 f4       	brne	.+4      	; 0x3166 <__vector_11+0x6a>
		{
			ADC_Init();      //changing temp initlization to heart intilization
    3162:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <ADC_Init>

		}
		if (counter==100)
    3166:	80 91 90 02 	lds	r24, 0x0290
    316a:	90 91 91 02 	lds	r25, 0x0291
    316e:	84 36       	cpi	r24, 0x64	; 100
    3170:	91 05       	cpc	r25, r1
    3172:	b1 f4       	brne	.+44     	; 0x31a0 <__vector_11+0xa4>
		{
			counter=0;
    3174:	10 92 91 02 	sts	0x0291, r1
    3178:	10 92 90 02 	sts	0x0290, r1
			temp_flag=0;
    317c:	10 92 95 02 	sts	0x0295, r1
    3180:	10 92 94 02 	sts	0x0294, r1
			heart_flag=1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	90 93 97 02 	sts	0x0297, r25
    318c:	80 93 96 02 	sts	0x0296, r24
			SetBit(ADCSRA,ADSC);
    3190:	a6 e2       	ldi	r26, 0x26	; 38
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	e6 e2       	ldi	r30, 0x26	; 38
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	80 64       	ori	r24, 0x40	; 64
    319c:	8c 93       	st	X, r24
    319e:	25 c0       	rjmp	.+74     	; 0x31ea <__vector_11+0xee>

		}
		else
		{
			counter++;
    31a0:	80 91 90 02 	lds	r24, 0x0290
    31a4:	90 91 91 02 	lds	r25, 0x0291
    31a8:	01 96       	adiw	r24, 0x01	; 1
    31aa:	90 93 91 02 	sts	0x0291, r25
    31ae:	80 93 90 02 	sts	0x0290, r24
    31b2:	1b c0       	rjmp	.+54     	; 0x31ea <__vector_11+0xee>
		}
	}
	else
	{
		ADC_Temp_Init();
    31b4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <ADC_Temp_Init>
		temp_flag=1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	90 93 95 02 	sts	0x0295, r25
    31c0:	80 93 94 02 	sts	0x0294, r24
		heart_flag=0;
    31c4:	10 92 97 02 	sts	0x0297, r1
    31c8:	10 92 96 02 	sts	0x0296, r1
		SetBit(ADCSRA,ADSC);
    31cc:	a6 e2       	ldi	r26, 0x26	; 38
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e6 e2       	ldi	r30, 0x26	; 38
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	80 64       	ori	r24, 0x40	; 64
    31d8:	8c 93       	st	X, r24
		LCD_vidCmd(CMD_CLEAR);
		LCD_vidCmd(CMD_HOME);
		itoa(bpm,test,10);
		LCD_vidDispString((uint8*) test);
		LCD_vidDispString((uint8*) " Finish");*/
		flag=0;
    31da:	10 92 88 02 	sts	0x0288, r1
    31de:	10 92 87 02 	sts	0x0287, r1

		flag10=0;
    31e2:	10 92 93 02 	sts	0x0293, r1
    31e6:	10 92 92 02 	sts	0x0292, r1
	}
}
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	ff 91       	pop	r31
    31f0:	ef 91       	pop	r30
    31f2:	bf 91       	pop	r27
    31f4:	af 91       	pop	r26
    31f6:	9f 91       	pop	r25
    31f8:	8f 91       	pop	r24
    31fa:	7f 91       	pop	r23
    31fc:	6f 91       	pop	r22
    31fe:	5f 91       	pop	r21
    3200:	4f 91       	pop	r20
    3202:	3f 91       	pop	r19
    3204:	2f 91       	pop	r18
    3206:	0f 90       	pop	r0
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	0f 90       	pop	r0
    320c:	1f 90       	pop	r1
    320e:	18 95       	reti

00003210 <ESP8266_VidInit>:

//the function of wifi---------------------
void ESP8266_VidInit()
{
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	c6 54       	subi	r28, 0x46	; 70
    321e:	d0 40       	sbci	r29, 0x00	; 0
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
	//disable echo
	USART_SendStr( (u8 *)"ATE0\r\n" );
    322a:	84 e7       	ldi	r24, 0x74	; 116
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    3232:	fe 01       	movw	r30, r28
    3234:	ed 5b       	subi	r30, 0xBD	; 189
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	aa e7       	ldi	r26, 0x7A	; 122
    323e:	b4 e4       	ldi	r27, 0x44	; 68
    3240:	80 83       	st	Z, r24
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	a2 83       	std	Z+2, r26	; 0x02
    3246:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3248:	8e 01       	movw	r16, r28
    324a:	01 5c       	subi	r16, 0xC1	; 193
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	fe 01       	movw	r30, r28
    3250:	ed 5b       	subi	r30, 0xBD	; 189
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4a ef       	ldi	r20, 0xFA	; 250
    3262:	54 e4       	ldi	r21, 0x44	; 68
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	80 83       	st	Z, r24
    3270:	91 83       	std	Z+1, r25	; 0x01
    3272:	a2 83       	std	Z+2, r26	; 0x02
    3274:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3276:	fe 01       	movw	r30, r28
    3278:	ff 96       	adiw	r30, 0x3f	; 63
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	93 81       	ldd	r25, Z+3	; 0x03
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	2c f4       	brge	.+10     	; 0x329c <ESP8266_VidInit+0x8c>
		__ticks = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	9e af       	std	Y+62, r25	; 0x3e
    3298:	8d af       	std	Y+61, r24	; 0x3d
    329a:	46 c0       	rjmp	.+140    	; 0x3328 <ESP8266_VidInit+0x118>
	else if (__tmp > 65535)
    329c:	fe 01       	movw	r30, r28
    329e:	ff 96       	adiw	r30, 0x3f	; 63
    32a0:	60 81       	ld	r22, Z
    32a2:	71 81       	ldd	r23, Z+1	; 0x01
    32a4:	82 81       	ldd	r24, Z+2	; 0x02
    32a6:	93 81       	ldd	r25, Z+3	; 0x03
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	3f ef       	ldi	r19, 0xFF	; 255
    32ac:	4f e7       	ldi	r20, 0x7F	; 127
    32ae:	57 e4       	ldi	r21, 0x47	; 71
    32b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b4:	18 16       	cp	r1, r24
    32b6:	64 f5       	brge	.+88     	; 0x3310 <ESP8266_VidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b8:	fe 01       	movw	r30, r28
    32ba:	ed 5b       	subi	r30, 0xBD	; 189
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	60 81       	ld	r22, Z
    32c0:	71 81       	ldd	r23, Z+1	; 0x01
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	93 81       	ldd	r25, Z+3	; 0x03
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e2       	ldi	r20, 0x20	; 32
    32cc:	51 e4       	ldi	r21, 0x41	; 65
    32ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9e af       	std	Y+62, r25	; 0x3e
    32e4:	8d af       	std	Y+61, r24	; 0x3d
    32e6:	0f c0       	rjmp	.+30     	; 0x3306 <ESP8266_VidInit+0xf6>
    32e8:	88 ec       	ldi	r24, 0xC8	; 200
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9c af       	std	Y+60, r25	; 0x3c
    32ee:	8b af       	std	Y+59, r24	; 0x3b
    32f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    32f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	f1 f7       	brne	.-4      	; 0x32f4 <ESP8266_VidInit+0xe4>
    32f8:	9c af       	std	Y+60, r25	; 0x3c
    32fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    32fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	9e af       	std	Y+62, r25	; 0x3e
    3304:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3306:	8d ad       	ldd	r24, Y+61	; 0x3d
    3308:	9e ad       	ldd	r25, Y+62	; 0x3e
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	69 f7       	brne	.-38     	; 0x32e8 <ESP8266_VidInit+0xd8>
    330e:	16 c0       	rjmp	.+44     	; 0x333c <ESP8266_VidInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3310:	fe 01       	movw	r30, r28
    3312:	ff 96       	adiw	r30, 0x3f	; 63
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	9e af       	std	Y+62, r25	; 0x3e
    3326:	8d af       	std	Y+61, r24	; 0x3d
    3328:	8d ad       	ldd	r24, Y+61	; 0x3d
    332a:	9e ad       	ldd	r25, Y+62	; 0x3e
    332c:	9a af       	std	Y+58, r25	; 0x3a
    332e:	89 af       	std	Y+57, r24	; 0x39
    3330:	89 ad       	ldd	r24, Y+57	; 0x39
    3332:	9a ad       	ldd	r25, Y+58	; 0x3a
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <ESP8266_VidInit+0x124>
    3338:	9a af       	std	Y+58, r25	; 0x3a
    333a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms( 1000 );

	/* Sending AT Command To Check ESP8266 Is Working Or Not  */
	USART_SendStr( (u8 *)"AT\r\n" );
    333c:	8b e7       	ldi	r24, 0x7B	; 123
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	aa e7       	ldi	r26, 0x7A	; 122
    334a:	b4 e4       	ldi	r27, 0x44	; 68
    334c:	8d ab       	std	Y+53, r24	; 0x35
    334e:	9e ab       	std	Y+54, r25	; 0x36
    3350:	af ab       	std	Y+55, r26	; 0x37
    3352:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3354:	6d a9       	ldd	r22, Y+53	; 0x35
    3356:	7e a9       	ldd	r23, Y+54	; 0x36
    3358:	8f a9       	ldd	r24, Y+55	; 0x37
    335a:	98 ad       	ldd	r25, Y+56	; 0x38
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a ef       	ldi	r20, 0xFA	; 250
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	89 ab       	std	Y+49, r24	; 0x31
    336e:	9a ab       	std	Y+50, r25	; 0x32
    3370:	ab ab       	std	Y+51, r26	; 0x33
    3372:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3374:	69 a9       	ldd	r22, Y+49	; 0x31
    3376:	7a a9       	ldd	r23, Y+50	; 0x32
    3378:	8b a9       	ldd	r24, Y+51	; 0x33
    337a:	9c a9       	ldd	r25, Y+52	; 0x34
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	2c f4       	brge	.+10     	; 0x3396 <ESP8266_VidInit+0x186>
		__ticks = 1;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	98 ab       	std	Y+48, r25	; 0x30
    3392:	8f a7       	std	Y+47, r24	; 0x2f
    3394:	3f c0       	rjmp	.+126    	; 0x3414 <ESP8266_VidInit+0x204>
	else if (__tmp > 65535)
    3396:	69 a9       	ldd	r22, Y+49	; 0x31
    3398:	7a a9       	ldd	r23, Y+50	; 0x32
    339a:	8b a9       	ldd	r24, Y+51	; 0x33
    339c:	9c a9       	ldd	r25, Y+52	; 0x34
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	3f ef       	ldi	r19, 0xFF	; 255
    33a2:	4f e7       	ldi	r20, 0x7F	; 127
    33a4:	57 e4       	ldi	r21, 0x47	; 71
    33a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33aa:	18 16       	cp	r1, r24
    33ac:	4c f5       	brge	.+82     	; 0x3400 <ESP8266_VidInit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ae:	6d a9       	ldd	r22, Y+53	; 0x35
    33b0:	7e a9       	ldd	r23, Y+54	; 0x36
    33b2:	8f a9       	ldd	r24, Y+55	; 0x37
    33b4:	98 ad       	ldd	r25, Y+56	; 0x38
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e2       	ldi	r20, 0x20	; 32
    33bc:	51 e4       	ldi	r21, 0x41	; 65
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	98 ab       	std	Y+48, r25	; 0x30
    33d4:	8f a7       	std	Y+47, r24	; 0x2f
    33d6:	0f c0       	rjmp	.+30     	; 0x33f6 <ESP8266_VidInit+0x1e6>
    33d8:	88 ec       	ldi	r24, 0xC8	; 200
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9e a7       	std	Y+46, r25	; 0x2e
    33de:	8d a7       	std	Y+45, r24	; 0x2d
    33e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    33e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <ESP8266_VidInit+0x1d4>
    33e8:	9e a7       	std	Y+46, r25	; 0x2e
    33ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ee:	98 a9       	ldd	r25, Y+48	; 0x30
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	98 ab       	std	Y+48, r25	; 0x30
    33f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f8:	98 a9       	ldd	r25, Y+48	; 0x30
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	69 f7       	brne	.-38     	; 0x33d8 <ESP8266_VidInit+0x1c8>
    33fe:	14 c0       	rjmp	.+40     	; 0x3428 <ESP8266_VidInit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3400:	69 a9       	ldd	r22, Y+49	; 0x31
    3402:	7a a9       	ldd	r23, Y+50	; 0x32
    3404:	8b a9       	ldd	r24, Y+51	; 0x33
    3406:	9c a9       	ldd	r25, Y+52	; 0x34
    3408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	98 ab       	std	Y+48, r25	; 0x30
    3412:	8f a7       	std	Y+47, r24	; 0x2f
    3414:	8f a5       	ldd	r24, Y+47	; 0x2f
    3416:	98 a9       	ldd	r25, Y+48	; 0x30
    3418:	9c a7       	std	Y+44, r25	; 0x2c
    341a:	8b a7       	std	Y+43, r24	; 0x2b
    341c:	8b a5       	ldd	r24, Y+43	; 0x2b
    341e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <ESP8266_VidInit+0x210>
    3424:	9c a7       	std	Y+44, r25	; 0x2c
    3426:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms( 1000 );

	USART_SendStr( (u8 *)"AT+CWMODE=1\r\n" );
    3428:	80 e8       	ldi	r24, 0x80	; 128
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	aa e7       	ldi	r26, 0x7A	; 122
    3436:	b4 e4       	ldi	r27, 0x44	; 68
    3438:	8f a3       	std	Y+39, r24	; 0x27
    343a:	98 a7       	std	Y+40, r25	; 0x28
    343c:	a9 a7       	std	Y+41, r26	; 0x29
    343e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3440:	6f a1       	ldd	r22, Y+39	; 0x27
    3442:	78 a5       	ldd	r23, Y+40	; 0x28
    3444:	89 a5       	ldd	r24, Y+41	; 0x29
    3446:	9a a5       	ldd	r25, Y+42	; 0x2a
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	4a ef       	ldi	r20, 0xFA	; 250
    344e:	54 e4       	ldi	r21, 0x44	; 68
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	8b a3       	std	Y+35, r24	; 0x23
    345a:	9c a3       	std	Y+36, r25	; 0x24
    345c:	ad a3       	std	Y+37, r26	; 0x25
    345e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3460:	6b a1       	ldd	r22, Y+35	; 0x23
    3462:	7c a1       	ldd	r23, Y+36	; 0x24
    3464:	8d a1       	ldd	r24, Y+37	; 0x25
    3466:	9e a1       	ldd	r25, Y+38	; 0x26
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e8       	ldi	r20, 0x80	; 128
    346e:	5f e3       	ldi	r21, 0x3F	; 63
    3470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3474:	88 23       	and	r24, r24
    3476:	2c f4       	brge	.+10     	; 0x3482 <ESP8266_VidInit+0x272>
		__ticks = 1;
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	9a a3       	std	Y+34, r25	; 0x22
    347e:	89 a3       	std	Y+33, r24	; 0x21
    3480:	3f c0       	rjmp	.+126    	; 0x3500 <ESP8266_VidInit+0x2f0>
	else if (__tmp > 65535)
    3482:	6b a1       	ldd	r22, Y+35	; 0x23
    3484:	7c a1       	ldd	r23, Y+36	; 0x24
    3486:	8d a1       	ldd	r24, Y+37	; 0x25
    3488:	9e a1       	ldd	r25, Y+38	; 0x26
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	3f ef       	ldi	r19, 0xFF	; 255
    348e:	4f e7       	ldi	r20, 0x7F	; 127
    3490:	57 e4       	ldi	r21, 0x47	; 71
    3492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3496:	18 16       	cp	r1, r24
    3498:	4c f5       	brge	.+82     	; 0x34ec <ESP8266_VidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349a:	6f a1       	ldd	r22, Y+39	; 0x27
    349c:	78 a5       	ldd	r23, Y+40	; 0x28
    349e:	89 a5       	ldd	r24, Y+41	; 0x29
    34a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e2       	ldi	r20, 0x20	; 32
    34a8:	51 e4       	ldi	r21, 0x41	; 65
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	bc 01       	movw	r22, r24
    34b4:	cd 01       	movw	r24, r26
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9a a3       	std	Y+34, r25	; 0x22
    34c0:	89 a3       	std	Y+33, r24	; 0x21
    34c2:	0f c0       	rjmp	.+30     	; 0x34e2 <ESP8266_VidInit+0x2d2>
    34c4:	88 ec       	ldi	r24, 0xC8	; 200
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	98 a3       	std	Y+32, r25	; 0x20
    34ca:	8f 8f       	std	Y+31, r24	; 0x1f
    34cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ce:	98 a1       	ldd	r25, Y+32	; 0x20
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <ESP8266_VidInit+0x2c0>
    34d4:	98 a3       	std	Y+32, r25	; 0x20
    34d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d8:	89 a1       	ldd	r24, Y+33	; 0x21
    34da:	9a a1       	ldd	r25, Y+34	; 0x22
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	9a a3       	std	Y+34, r25	; 0x22
    34e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e2:	89 a1       	ldd	r24, Y+33	; 0x21
    34e4:	9a a1       	ldd	r25, Y+34	; 0x22
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	69 f7       	brne	.-38     	; 0x34c4 <ESP8266_VidInit+0x2b4>
    34ea:	14 c0       	rjmp	.+40     	; 0x3514 <ESP8266_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ec:	6b a1       	ldd	r22, Y+35	; 0x23
    34ee:	7c a1       	ldd	r23, Y+36	; 0x24
    34f0:	8d a1       	ldd	r24, Y+37	; 0x25
    34f2:	9e a1       	ldd	r25, Y+38	; 0x26
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	9a a3       	std	Y+34, r25	; 0x22
    34fe:	89 a3       	std	Y+33, r24	; 0x21
    3500:	89 a1       	ldd	r24, Y+33	; 0x21
    3502:	9a a1       	ldd	r25, Y+34	; 0x22
    3504:	9e 8f       	std	Y+30, r25	; 0x1e
    3506:	8d 8f       	std	Y+29, r24	; 0x1d
    3508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    350a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <ESP8266_VidInit+0x2fc>
    3510:	9e 8f       	std	Y+30, r25	; 0x1e
    3512:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms( 1000 );

	USART_SendStr( (u8 *) "AT+CIPMODE=0\r\n" );
    3514:	8e e8       	ldi	r24, 0x8E	; 142
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	aa e7       	ldi	r26, 0x7A	; 122
    3522:	b4 e4       	ldi	r27, 0x44	; 68
    3524:	89 8f       	std	Y+25, r24	; 0x19
    3526:	9a 8f       	std	Y+26, r25	; 0x1a
    3528:	ab 8f       	std	Y+27, r26	; 0x1b
    352a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352c:	69 8d       	ldd	r22, Y+25	; 0x19
    352e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	4a ef       	ldi	r20, 0xFA	; 250
    353a:	54 e4       	ldi	r21, 0x44	; 68
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	8d 8b       	std	Y+21, r24	; 0x15
    3546:	9e 8b       	std	Y+22, r25	; 0x16
    3548:	af 8b       	std	Y+23, r26	; 0x17
    354a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    354c:	6d 89       	ldd	r22, Y+21	; 0x15
    354e:	7e 89       	ldd	r23, Y+22	; 0x16
    3550:	8f 89       	ldd	r24, Y+23	; 0x17
    3552:	98 8d       	ldd	r25, Y+24	; 0x18
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e8       	ldi	r20, 0x80	; 128
    355a:	5f e3       	ldi	r21, 0x3F	; 63
    355c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3560:	88 23       	and	r24, r24
    3562:	2c f4       	brge	.+10     	; 0x356e <ESP8266_VidInit+0x35e>
		__ticks = 1;
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	9c 8b       	std	Y+20, r25	; 0x14
    356a:	8b 8b       	std	Y+19, r24	; 0x13
    356c:	3f c0       	rjmp	.+126    	; 0x35ec <ESP8266_VidInit+0x3dc>
	else if (__tmp > 65535)
    356e:	6d 89       	ldd	r22, Y+21	; 0x15
    3570:	7e 89       	ldd	r23, Y+22	; 0x16
    3572:	8f 89       	ldd	r24, Y+23	; 0x17
    3574:	98 8d       	ldd	r25, Y+24	; 0x18
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	3f ef       	ldi	r19, 0xFF	; 255
    357a:	4f e7       	ldi	r20, 0x7F	; 127
    357c:	57 e4       	ldi	r21, 0x47	; 71
    357e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3582:	18 16       	cp	r1, r24
    3584:	4c f5       	brge	.+82     	; 0x35d8 <ESP8266_VidInit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3586:	69 8d       	ldd	r22, Y+25	; 0x19
    3588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    358a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	9c 8b       	std	Y+20, r25	; 0x14
    35ac:	8b 8b       	std	Y+19, r24	; 0x13
    35ae:	0f c0       	rjmp	.+30     	; 0x35ce <ESP8266_VidInit+0x3be>
    35b0:	88 ec       	ldi	r24, 0xC8	; 200
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	9a 8b       	std	Y+18, r25	; 0x12
    35b6:	89 8b       	std	Y+17, r24	; 0x11
    35b8:	89 89       	ldd	r24, Y+17	; 0x11
    35ba:	9a 89       	ldd	r25, Y+18	; 0x12
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <ESP8266_VidInit+0x3ac>
    35c0:	9a 8b       	std	Y+18, r25	; 0x12
    35c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c4:	8b 89       	ldd	r24, Y+19	; 0x13
    35c6:	9c 89       	ldd	r25, Y+20	; 0x14
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	9c 8b       	std	Y+20, r25	; 0x14
    35cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ce:	8b 89       	ldd	r24, Y+19	; 0x13
    35d0:	9c 89       	ldd	r25, Y+20	; 0x14
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	69 f7       	brne	.-38     	; 0x35b0 <ESP8266_VidInit+0x3a0>
    35d6:	14 c0       	rjmp	.+40     	; 0x3600 <ESP8266_VidInit+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d8:	6d 89       	ldd	r22, Y+21	; 0x15
    35da:	7e 89       	ldd	r23, Y+22	; 0x16
    35dc:	8f 89       	ldd	r24, Y+23	; 0x17
    35de:	98 8d       	ldd	r25, Y+24	; 0x18
    35e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	9c 8b       	std	Y+20, r25	; 0x14
    35ea:	8b 8b       	std	Y+19, r24	; 0x13
    35ec:	8b 89       	ldd	r24, Y+19	; 0x13
    35ee:	9c 89       	ldd	r25, Y+20	; 0x14
    35f0:	98 8b       	std	Y+16, r25	; 0x10
    35f2:	8f 87       	std	Y+15, r24	; 0x0f
    35f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f6:	98 89       	ldd	r25, Y+16	; 0x10
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <ESP8266_VidInit+0x3e8>
    35fc:	98 8b       	std	Y+16, r25	; 0x10
    35fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms( 1000 );

	USART_SendStr( (u8 *) "AT+CIPMUX=0\r\n" );
    3600:	8d e9       	ldi	r24, 0x9D	; 157
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	aa e7       	ldi	r26, 0x7A	; 122
    360e:	b4 e4       	ldi	r27, 0x44	; 68
    3610:	8b 87       	std	Y+11, r24	; 0x0b
    3612:	9c 87       	std	Y+12, r25	; 0x0c
    3614:	ad 87       	std	Y+13, r26	; 0x0d
    3616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	6b 85       	ldd	r22, Y+11	; 0x0b
    361a:	7c 85       	ldd	r23, Y+12	; 0x0c
    361c:	8d 85       	ldd	r24, Y+13	; 0x0d
    361e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a ef       	ldi	r20, 0xFA	; 250
    3626:	54 e4       	ldi	r21, 0x44	; 68
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	8f 83       	std	Y+7, r24	; 0x07
    3632:	98 87       	std	Y+8, r25	; 0x08
    3634:	a9 87       	std	Y+9, r26	; 0x09
    3636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <ESP8266_VidInit+0x44a>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <ESP8266_VidInit+0x4c8>
	else if (__tmp > 65535)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <ESP8266_VidInit+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	6b 85       	ldd	r22, Y+11	; 0x0b
    3674:	7c 85       	ldd	r23, Y+12	; 0x0c
    3676:	8d 85       	ldd	r24, Y+13	; 0x0d
    3678:	9e 85       	ldd	r25, Y+14	; 0x0e
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <ESP8266_VidInit+0x4aa>
    369c:	88 ec       	ldi	r24, 0xC8	; 200
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9c 83       	std	Y+4, r25	; 0x04
    36a2:	8b 83       	std	Y+3, r24	; 0x03
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <ESP8266_VidInit+0x498>
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <ESP8266_VidInit+0x48c>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <ESP8266_VidInit+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	6f 81       	ldd	r22, Y+7	; 0x07
    36c6:	78 85       	ldd	r23, Y+8	; 0x08
    36c8:	89 85       	ldd	r24, Y+9	; 0x09
    36ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9e 83       	std	Y+6, r25	; 0x06
    36d6:	8d 83       	std	Y+5, r24	; 0x05
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	9a 83       	std	Y+2, r25	; 0x02
    36de:	89 83       	std	Y+1, r24	; 0x01
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <ESP8266_VidInit+0x4d4>
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    36ec:	ca 5b       	subi	r28, 0xBA	; 186
    36ee:	df 4f       	sbci	r29, 0xFF	; 255
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	1f 91       	pop	r17
    3700:	0f 91       	pop	r16
    3702:	08 95       	ret

00003704 <ESP8266_VidConnectToWiFi>:

void ESP8266_VidConnectToWiFi(u8* SSID, u8* Password)
{
    3704:	0f 93       	push	r16
    3706:	1f 93       	push	r17
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	ca 5b       	subi	r28, 0xBA	; 186
    3712:	d0 40       	sbci	r29, 0x00	; 0
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	de bf       	out	0x3e, r29	; 62
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	cd bf       	out	0x3d, r28	; 61
    371e:	fe 01       	movw	r30, r28
    3720:	e9 54       	subi	r30, 0x49	; 73
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	80 83       	st	Z, r24
    3728:	fe 01       	movw	r30, r28
    372a:	e7 54       	subi	r30, 0x47	; 71
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	71 83       	std	Z+1, r23	; 0x01
    3730:	60 83       	st	Z, r22
	USART_SendStr( (u8 *) "AT+CWJAP_CUR=\"" );
    3732:	8b ea       	ldi	r24, 0xAB	; 171
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) SSID );
    373a:	fe 01       	movw	r30, r28
    373c:	e9 54       	subi	r30, 0x49	; 73
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) "\",\"" );
    3748:	8a eb       	ldi	r24, 0xBA	; 186
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) Password);
    3750:	fe 01       	movw	r30, r28
    3752:	e7 54       	subi	r30, 0x47	; 71
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) "\"\r\n");
    375e:	8e eb       	ldi	r24, 0xBE	; 190
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    3766:	fe 01       	movw	r30, r28
    3768:	ed 54       	subi	r30, 0x4D	; 77
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	aa e7       	ldi	r26, 0x7A	; 122
    3772:	b4 e4       	ldi	r27, 0x44	; 68
    3774:	80 83       	st	Z, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	a2 83       	std	Z+2, r26	; 0x02
    377a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377c:	8e 01       	movw	r16, r28
    377e:	01 55       	subi	r16, 0x51	; 81
    3780:	1f 4f       	sbci	r17, 0xFF	; 255
    3782:	fe 01       	movw	r30, r28
    3784:	ed 54       	subi	r30, 0x4D	; 77
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	60 81       	ld	r22, Z
    378a:	71 81       	ldd	r23, Z+1	; 0x01
    378c:	82 81       	ldd	r24, Z+2	; 0x02
    378e:	93 81       	ldd	r25, Z+3	; 0x03
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4a ef       	ldi	r20, 0xFA	; 250
    3796:	54 e4       	ldi	r21, 0x44	; 68
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	a2 83       	std	Z+2, r26	; 0x02
    37a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37aa:	fe 01       	movw	r30, r28
    37ac:	e1 55       	subi	r30, 0x51	; 81
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	44 f4       	brge	.+16     	; 0x37d8 <ESP8266_VidConnectToWiFi+0xd4>
		__ticks = 1;
    37c8:	fe 01       	movw	r30, r28
    37ca:	e3 55       	subi	r30, 0x53	; 83
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	80 83       	st	Z, r24
    37d6:	64 c0       	rjmp	.+200    	; 0x38a0 <ESP8266_VidConnectToWiFi+0x19c>
	else if (__tmp > 65535)
    37d8:	fe 01       	movw	r30, r28
    37da:	e1 55       	subi	r30, 0x51	; 81
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	3f ef       	ldi	r19, 0xFF	; 255
    37ea:	4f e7       	ldi	r20, 0x7F	; 127
    37ec:	57 e4       	ldi	r21, 0x47	; 71
    37ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37f2:	18 16       	cp	r1, r24
    37f4:	0c f0       	brlt	.+2      	; 0x37f8 <ESP8266_VidConnectToWiFi+0xf4>
    37f6:	43 c0       	rjmp	.+134    	; 0x387e <ESP8266_VidConnectToWiFi+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f8:	fe 01       	movw	r30, r28
    37fa:	ed 54       	subi	r30, 0x4D	; 77
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	60 81       	ld	r22, Z
    3800:	71 81       	ldd	r23, Z+1	; 0x01
    3802:	82 81       	ldd	r24, Z+2	; 0x02
    3804:	93 81       	ldd	r25, Z+3	; 0x03
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	8e 01       	movw	r16, r28
    3818:	03 55       	subi	r16, 0x53	; 83
    381a:	1f 4f       	sbci	r17, 0xFF	; 255
    381c:	bc 01       	movw	r22, r24
    381e:	cd 01       	movw	r24, r26
    3820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	f8 01       	movw	r30, r16
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
    382e:	1f c0       	rjmp	.+62     	; 0x386e <ESP8266_VidConnectToWiFi+0x16a>
    3830:	fe 01       	movw	r30, r28
    3832:	e5 55       	subi	r30, 0x55	; 85
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	88 ec       	ldi	r24, 0xC8	; 200
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
    383e:	fe 01       	movw	r30, r28
    3840:	e5 55       	subi	r30, 0x55	; 85
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	91 81       	ldd	r25, Z+1	; 0x01
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <ESP8266_VidConnectToWiFi+0x144>
    384c:	fe 01       	movw	r30, r28
    384e:	e5 55       	subi	r30, 0x55	; 85
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	de 01       	movw	r26, r28
    3858:	a3 55       	subi	r26, 0x53	; 83
    385a:	bf 4f       	sbci	r27, 0xFF	; 255
    385c:	fe 01       	movw	r30, r28
    385e:	e3 55       	subi	r30, 0x53	; 83
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	11 96       	adiw	r26, 0x01	; 1
    386a:	9c 93       	st	X, r25
    386c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386e:	fe 01       	movw	r30, r28
    3870:	e3 55       	subi	r30, 0x53	; 83
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	d1 f6       	brne	.-76     	; 0x3830 <ESP8266_VidConnectToWiFi+0x12c>
    387c:	27 c0       	rjmp	.+78     	; 0x38cc <ESP8266_VidConnectToWiFi+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387e:	8e 01       	movw	r16, r28
    3880:	03 55       	subi	r16, 0x53	; 83
    3882:	1f 4f       	sbci	r17, 0xFF	; 255
    3884:	fe 01       	movw	r30, r28
    3886:	e1 55       	subi	r30, 0x51	; 81
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	82 81       	ldd	r24, Z+2	; 0x02
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	f8 01       	movw	r30, r16
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	80 83       	st	Z, r24
    38a0:	de 01       	movw	r26, r28
    38a2:	a7 55       	subi	r26, 0x57	; 87
    38a4:	bf 4f       	sbci	r27, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	e3 55       	subi	r30, 0x53	; 83
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	8d 93       	st	X+, r24
    38b2:	9c 93       	st	X, r25
    38b4:	fe 01       	movw	r30, r28
    38b6:	e7 55       	subi	r30, 0x57	; 87
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	80 81       	ld	r24, Z
    38bc:	91 81       	ldd	r25, Z+1	; 0x01
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <ESP8266_VidConnectToWiFi+0x1ba>
    38c2:	fe 01       	movw	r30, r28
    38c4:	e7 55       	subi	r30, 0x57	; 87
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	91 83       	std	Z+1, r25	; 0x01
    38ca:	80 83       	st	Z, r24
    38cc:	fe 01       	movw	r30, r28
    38ce:	eb 55       	subi	r30, 0x5B	; 91
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	aa e7       	ldi	r26, 0x7A	; 122
    38d8:	b4 e4       	ldi	r27, 0x44	; 68
    38da:	80 83       	st	Z, r24
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	a2 83       	std	Z+2, r26	; 0x02
    38e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	8e 01       	movw	r16, r28
    38e4:	0f 55       	subi	r16, 0x5F	; 95
    38e6:	1f 4f       	sbci	r17, 0xFF	; 255
    38e8:	fe 01       	movw	r30, r28
    38ea:	eb 55       	subi	r30, 0x5B	; 91
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	4a ef       	ldi	r20, 0xFA	; 250
    38fc:	54 e4       	ldi	r21, 0x44	; 68
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	f8 01       	movw	r30, r16
    3908:	80 83       	st	Z, r24
    390a:	91 83       	std	Z+1, r25	; 0x01
    390c:	a2 83       	std	Z+2, r26	; 0x02
    390e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3910:	fe 01       	movw	r30, r28
    3912:	ef 55       	subi	r30, 0x5F	; 95
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	60 81       	ld	r22, Z
    3918:	71 81       	ldd	r23, Z+1	; 0x01
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	93 81       	ldd	r25, Z+3	; 0x03
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e8       	ldi	r20, 0x80	; 128
    3924:	5f e3       	ldi	r21, 0x3F	; 63
    3926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    392a:	88 23       	and	r24, r24
    392c:	44 f4       	brge	.+16     	; 0x393e <ESP8266_VidConnectToWiFi+0x23a>
		__ticks = 1;
    392e:	fe 01       	movw	r30, r28
    3930:	e1 56       	subi	r30, 0x61	; 97
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	91 83       	std	Z+1, r25	; 0x01
    393a:	80 83       	st	Z, r24
    393c:	64 c0       	rjmp	.+200    	; 0x3a06 <ESP8266_VidConnectToWiFi+0x302>
	else if (__tmp > 65535)
    393e:	fe 01       	movw	r30, r28
    3940:	ef 55       	subi	r30, 0x5F	; 95
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	93 81       	ldd	r25, Z+3	; 0x03
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	3f ef       	ldi	r19, 0xFF	; 255
    3950:	4f e7       	ldi	r20, 0x7F	; 127
    3952:	57 e4       	ldi	r21, 0x47	; 71
    3954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3958:	18 16       	cp	r1, r24
    395a:	0c f0       	brlt	.+2      	; 0x395e <ESP8266_VidConnectToWiFi+0x25a>
    395c:	43 c0       	rjmp	.+134    	; 0x39e4 <ESP8266_VidConnectToWiFi+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395e:	fe 01       	movw	r30, r28
    3960:	eb 55       	subi	r30, 0x5B	; 91
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	60 81       	ld	r22, Z
    3966:	71 81       	ldd	r23, Z+1	; 0x01
    3968:	82 81       	ldd	r24, Z+2	; 0x02
    396a:	93 81       	ldd	r25, Z+3	; 0x03
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e2       	ldi	r20, 0x20	; 32
    3972:	51 e4       	ldi	r21, 0x41	; 65
    3974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	8e 01       	movw	r16, r28
    397e:	01 56       	subi	r16, 0x61	; 97
    3980:	1f 4f       	sbci	r17, 0xFF	; 255
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	f8 01       	movw	r30, r16
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	1f c0       	rjmp	.+62     	; 0x39d4 <ESP8266_VidConnectToWiFi+0x2d0>
    3996:	fe 01       	movw	r30, r28
    3998:	e3 56       	subi	r30, 0x63	; 99
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	88 ec       	ldi	r24, 0xC8	; 200
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	80 83       	st	Z, r24
    39a4:	fe 01       	movw	r30, r28
    39a6:	e3 56       	subi	r30, 0x63	; 99
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 81       	ld	r24, Z
    39ac:	91 81       	ldd	r25, Z+1	; 0x01
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <ESP8266_VidConnectToWiFi+0x2aa>
    39b2:	fe 01       	movw	r30, r28
    39b4:	e3 56       	subi	r30, 0x63	; 99
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39bc:	de 01       	movw	r26, r28
    39be:	a1 56       	subi	r26, 0x61	; 97
    39c0:	bf 4f       	sbci	r27, 0xFF	; 255
    39c2:	fe 01       	movw	r30, r28
    39c4:	e1 56       	subi	r30, 0x61	; 97
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	80 81       	ld	r24, Z
    39ca:	91 81       	ldd	r25, Z+1	; 0x01
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	11 96       	adiw	r26, 0x01	; 1
    39d0:	9c 93       	st	X, r25
    39d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d4:	fe 01       	movw	r30, r28
    39d6:	e1 56       	subi	r30, 0x61	; 97
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	80 81       	ld	r24, Z
    39dc:	91 81       	ldd	r25, Z+1	; 0x01
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	d1 f6       	brne	.-76     	; 0x3996 <ESP8266_VidConnectToWiFi+0x292>
    39e2:	27 c0       	rjmp	.+78     	; 0x3a32 <ESP8266_VidConnectToWiFi+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e4:	8e 01       	movw	r16, r28
    39e6:	01 56       	subi	r16, 0x61	; 97
    39e8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ea:	fe 01       	movw	r30, r28
    39ec:	ef 55       	subi	r30, 0x5F	; 95
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	60 81       	ld	r22, Z
    39f2:	71 81       	ldd	r23, Z+1	; 0x01
    39f4:	82 81       	ldd	r24, Z+2	; 0x02
    39f6:	93 81       	ldd	r25, Z+3	; 0x03
    39f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	f8 01       	movw	r30, r16
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	80 83       	st	Z, r24
    3a06:	de 01       	movw	r26, r28
    3a08:	a5 56       	subi	r26, 0x65	; 101
    3a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	e1 56       	subi	r30, 0x61	; 97
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	80 81       	ld	r24, Z
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	8d 93       	st	X+, r24
    3a18:	9c 93       	st	X, r25
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e5 56       	subi	r30, 0x65	; 101
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <ESP8266_VidConnectToWiFi+0x320>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e5 56       	subi	r30, 0x65	; 101
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	91 83       	std	Z+1, r25	; 0x01
    3a30:	80 83       	st	Z, r24
    3a32:	fe 01       	movw	r30, r28
    3a34:	e9 56       	subi	r30, 0x69	; 105
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	aa e7       	ldi	r26, 0x7A	; 122
    3a3e:	b4 e4       	ldi	r27, 0x44	; 68
    3a40:	80 83       	st	Z, r24
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	a2 83       	std	Z+2, r26	; 0x02
    3a46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a48:	8e 01       	movw	r16, r28
    3a4a:	0d 56       	subi	r16, 0x6D	; 109
    3a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e9 56       	subi	r30, 0x69	; 105
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	60 81       	ld	r22, Z
    3a56:	71 81       	ldd	r23, Z+1	; 0x01
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	93 81       	ldd	r25, Z+3	; 0x03
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	4a ef       	ldi	r20, 0xFA	; 250
    3a62:	54 e4       	ldi	r21, 0x44	; 68
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	80 83       	st	Z, r24
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	a2 83       	std	Z+2, r26	; 0x02
    3a74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a76:	fe 01       	movw	r30, r28
    3a78:	ed 56       	subi	r30, 0x6D	; 109
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	60 81       	ld	r22, Z
    3a7e:	71 81       	ldd	r23, Z+1	; 0x01
    3a80:	82 81       	ldd	r24, Z+2	; 0x02
    3a82:	93 81       	ldd	r25, Z+3	; 0x03
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e8       	ldi	r20, 0x80	; 128
    3a8a:	5f e3       	ldi	r21, 0x3F	; 63
    3a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a90:	88 23       	and	r24, r24
    3a92:	44 f4       	brge	.+16     	; 0x3aa4 <ESP8266_VidConnectToWiFi+0x3a0>
		__ticks = 1;
    3a94:	fe 01       	movw	r30, r28
    3a96:	ef 56       	subi	r30, 0x6F	; 111
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	80 83       	st	Z, r24
    3aa2:	64 c0       	rjmp	.+200    	; 0x3b6c <ESP8266_VidConnectToWiFi+0x468>
	else if (__tmp > 65535)
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	ed 56       	subi	r30, 0x6D	; 109
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	60 81       	ld	r22, Z
    3aac:	71 81       	ldd	r23, Z+1	; 0x01
    3aae:	82 81       	ldd	r24, Z+2	; 0x02
    3ab0:	93 81       	ldd	r25, Z+3	; 0x03
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	3f ef       	ldi	r19, 0xFF	; 255
    3ab6:	4f e7       	ldi	r20, 0x7F	; 127
    3ab8:	57 e4       	ldi	r21, 0x47	; 71
    3aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3abe:	18 16       	cp	r1, r24
    3ac0:	0c f0       	brlt	.+2      	; 0x3ac4 <ESP8266_VidConnectToWiFi+0x3c0>
    3ac2:	43 c0       	rjmp	.+134    	; 0x3b4a <ESP8266_VidConnectToWiFi+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac4:	fe 01       	movw	r30, r28
    3ac6:	e9 56       	subi	r30, 0x69	; 105
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	60 81       	ld	r22, Z
    3acc:	71 81       	ldd	r23, Z+1	; 0x01
    3ace:	82 81       	ldd	r24, Z+2	; 0x02
    3ad0:	93 81       	ldd	r25, Z+3	; 0x03
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e2       	ldi	r20, 0x20	; 32
    3ad8:	51 e4       	ldi	r21, 0x41	; 65
    3ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	8e 01       	movw	r16, r28
    3ae4:	0f 56       	subi	r16, 0x6F	; 111
    3ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae8:	bc 01       	movw	r22, r24
    3aea:	cd 01       	movw	r24, r26
    3aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	f8 01       	movw	r30, r16
    3af6:	91 83       	std	Z+1, r25	; 0x01
    3af8:	80 83       	st	Z, r24
    3afa:	1f c0       	rjmp	.+62     	; 0x3b3a <ESP8266_VidConnectToWiFi+0x436>
    3afc:	fe 01       	movw	r30, r28
    3afe:	e1 57       	subi	r30, 0x71	; 113
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	88 ec       	ldi	r24, 0xC8	; 200
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	91 83       	std	Z+1, r25	; 0x01
    3b08:	80 83       	st	Z, r24
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e1 57       	subi	r30, 0x71	; 113
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 81       	ld	r24, Z
    3b12:	91 81       	ldd	r25, Z+1	; 0x01
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <ESP8266_VidConnectToWiFi+0x410>
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e1 57       	subi	r30, 0x71	; 113
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	91 83       	std	Z+1, r25	; 0x01
    3b20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b22:	de 01       	movw	r26, r28
    3b24:	af 56       	subi	r26, 0x6F	; 111
    3b26:	bf 4f       	sbci	r27, 0xFF	; 255
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ef 56       	subi	r30, 0x6F	; 111
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	11 96       	adiw	r26, 0x01	; 1
    3b36:	9c 93       	st	X, r25
    3b38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	ef 56       	subi	r30, 0x6F	; 111
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 81       	ld	r24, Z
    3b42:	91 81       	ldd	r25, Z+1	; 0x01
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	d1 f6       	brne	.-76     	; 0x3afc <ESP8266_VidConnectToWiFi+0x3f8>
    3b48:	27 c0       	rjmp	.+78     	; 0x3b98 <ESP8266_VidConnectToWiFi+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4a:	8e 01       	movw	r16, r28
    3b4c:	0f 56       	subi	r16, 0x6F	; 111
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	fe 01       	movw	r30, r28
    3b52:	ed 56       	subi	r30, 0x6D	; 109
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	f8 01       	movw	r30, r16
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	80 83       	st	Z, r24
    3b6c:	de 01       	movw	r26, r28
    3b6e:	a3 57       	subi	r26, 0x73	; 115
    3b70:	bf 4f       	sbci	r27, 0xFF	; 255
    3b72:	fe 01       	movw	r30, r28
    3b74:	ef 56       	subi	r30, 0x6F	; 111
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	8d 93       	st	X+, r24
    3b7e:	9c 93       	st	X, r25
    3b80:	fe 01       	movw	r30, r28
    3b82:	e3 57       	subi	r30, 0x73	; 115
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	80 81       	ld	r24, Z
    3b88:	91 81       	ldd	r25, Z+1	; 0x01
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <ESP8266_VidConnectToWiFi+0x486>
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e3 57       	subi	r30, 0x73	; 115
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	91 83       	std	Z+1, r25	; 0x01
    3b96:	80 83       	st	Z, r24
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e7 57       	subi	r30, 0x77	; 119
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	aa e7       	ldi	r26, 0x7A	; 122
    3ba4:	b4 e4       	ldi	r27, 0x44	; 68
    3ba6:	80 83       	st	Z, r24
    3ba8:	91 83       	std	Z+1, r25	; 0x01
    3baa:	a2 83       	std	Z+2, r26	; 0x02
    3bac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bae:	8e 01       	movw	r16, r28
    3bb0:	0b 57       	subi	r16, 0x7B	; 123
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e7 57       	subi	r30, 0x77	; 119
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	60 81       	ld	r22, Z
    3bbc:	71 81       	ldd	r23, Z+1	; 0x01
    3bbe:	82 81       	ldd	r24, Z+2	; 0x02
    3bc0:	93 81       	ldd	r25, Z+3	; 0x03
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a ef       	ldi	r20, 0xFA	; 250
    3bc8:	54 e4       	ldi	r21, 0x44	; 68
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	80 83       	st	Z, r24
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	a2 83       	std	Z+2, r26	; 0x02
    3bda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bdc:	fe 01       	movw	r30, r28
    3bde:	eb 57       	subi	r30, 0x7B	; 123
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e8       	ldi	r20, 0x80	; 128
    3bf0:	5f e3       	ldi	r21, 0x3F	; 63
    3bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf6:	88 23       	and	r24, r24
    3bf8:	44 f4       	brge	.+16     	; 0x3c0a <ESP8266_VidConnectToWiFi+0x506>
		__ticks = 1;
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	ed 57       	subi	r30, 0x7D	; 125
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	80 83       	st	Z, r24
    3c08:	64 c0       	rjmp	.+200    	; 0x3cd2 <ESP8266_VidConnectToWiFi+0x5ce>
	else if (__tmp > 65535)
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	eb 57       	subi	r30, 0x7B	; 123
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	60 81       	ld	r22, Z
    3c12:	71 81       	ldd	r23, Z+1	; 0x01
    3c14:	82 81       	ldd	r24, Z+2	; 0x02
    3c16:	93 81       	ldd	r25, Z+3	; 0x03
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	3f ef       	ldi	r19, 0xFF	; 255
    3c1c:	4f e7       	ldi	r20, 0x7F	; 127
    3c1e:	57 e4       	ldi	r21, 0x47	; 71
    3c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c24:	18 16       	cp	r1, r24
    3c26:	0c f0       	brlt	.+2      	; 0x3c2a <ESP8266_VidConnectToWiFi+0x526>
    3c28:	43 c0       	rjmp	.+134    	; 0x3cb0 <ESP8266_VidConnectToWiFi+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	e7 57       	subi	r30, 0x77	; 119
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e2       	ldi	r20, 0x20	; 32
    3c3e:	51 e4       	ldi	r21, 0x41	; 65
    3c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	8e 01       	movw	r16, r28
    3c4a:	0d 57       	subi	r16, 0x7D	; 125
    3c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	91 83       	std	Z+1, r25	; 0x01
    3c5e:	80 83       	st	Z, r24
    3c60:	1f c0       	rjmp	.+62     	; 0x3ca0 <ESP8266_VidConnectToWiFi+0x59c>
    3c62:	fe 01       	movw	r30, r28
    3c64:	ef 57       	subi	r30, 0x7F	; 127
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	88 ec       	ldi	r24, 0xC8	; 200
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	80 83       	st	Z, r24
    3c70:	fe 01       	movw	r30, r28
    3c72:	ef 57       	subi	r30, 0x7F	; 127
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	80 81       	ld	r24, Z
    3c78:	91 81       	ldd	r25, Z+1	; 0x01
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <ESP8266_VidConnectToWiFi+0x576>
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ef 57       	subi	r30, 0x7F	; 127
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	91 83       	std	Z+1, r25	; 0x01
    3c86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c88:	de 01       	movw	r26, r28
    3c8a:	ad 57       	subi	r26, 0x7D	; 125
    3c8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ed 57       	subi	r30, 0x7D	; 125
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	11 96       	adiw	r26, 0x01	; 1
    3c9c:	9c 93       	st	X, r25
    3c9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	ed 57       	subi	r30, 0x7D	; 125
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	d1 f6       	brne	.-76     	; 0x3c62 <ESP8266_VidConnectToWiFi+0x55e>
    3cae:	27 c0       	rjmp	.+78     	; 0x3cfe <ESP8266_VidConnectToWiFi+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb0:	8e 01       	movw	r16, r28
    3cb2:	0d 57       	subi	r16, 0x7D	; 125
    3cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	eb 57       	subi	r30, 0x7B	; 123
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	60 81       	ld	r22, Z
    3cbe:	71 81       	ldd	r23, Z+1	; 0x01
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	93 81       	ldd	r25, Z+3	; 0x03
    3cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	f8 01       	movw	r30, r16
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    3cd2:	de 01       	movw	r26, r28
    3cd4:	a1 58       	subi	r26, 0x81	; 129
    3cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd8:	fe 01       	movw	r30, r28
    3cda:	ed 57       	subi	r30, 0x7D	; 125
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	80 81       	ld	r24, Z
    3ce0:	91 81       	ldd	r25, Z+1	; 0x01
    3ce2:	8d 93       	st	X+, r24
    3ce4:	9c 93       	st	X, r25
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e1 58       	subi	r30, 0x81	; 129
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	f1 f7       	brne	.-4      	; 0x3cf0 <ESP8266_VidConnectToWiFi+0x5ec>
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e1 58       	subi	r30, 0x81	; 129
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e5 58       	subi	r30, 0x85	; 133
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	aa e7       	ldi	r26, 0x7A	; 122
    3d0a:	b4 e4       	ldi	r27, 0x44	; 68
    3d0c:	80 83       	st	Z, r24
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	a2 83       	std	Z+2, r26	; 0x02
    3d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d14:	8e 01       	movw	r16, r28
    3d16:	09 58       	subi	r16, 0x89	; 137
    3d18:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e5 58       	subi	r30, 0x85	; 133
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	4a ef       	ldi	r20, 0xFA	; 250
    3d2e:	54 e4       	ldi	r21, 0x44	; 68
    3d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	f8 01       	movw	r30, r16
    3d3a:	80 83       	st	Z, r24
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	a2 83       	std	Z+2, r26	; 0x02
    3d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d42:	fe 01       	movw	r30, r28
    3d44:	e9 58       	subi	r30, 0x89	; 137
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	60 81       	ld	r22, Z
    3d4a:	71 81       	ldd	r23, Z+1	; 0x01
    3d4c:	82 81       	ldd	r24, Z+2	; 0x02
    3d4e:	93 81       	ldd	r25, Z+3	; 0x03
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e8       	ldi	r20, 0x80	; 128
    3d56:	5f e3       	ldi	r21, 0x3F	; 63
    3d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d5c:	88 23       	and	r24, r24
    3d5e:	44 f4       	brge	.+16     	; 0x3d70 <ESP8266_VidConnectToWiFi+0x66c>
		__ticks = 1;
    3d60:	fe 01       	movw	r30, r28
    3d62:	eb 58       	subi	r30, 0x8B	; 139
    3d64:	ff 4f       	sbci	r31, 0xFF	; 255
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	91 83       	std	Z+1, r25	; 0x01
    3d6c:	80 83       	st	Z, r24
    3d6e:	64 c0       	rjmp	.+200    	; 0x3e38 <ESP8266_VidConnectToWiFi+0x734>
	else if (__tmp > 65535)
    3d70:	fe 01       	movw	r30, r28
    3d72:	e9 58       	subi	r30, 0x89	; 137
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	3f ef       	ldi	r19, 0xFF	; 255
    3d82:	4f e7       	ldi	r20, 0x7F	; 127
    3d84:	57 e4       	ldi	r21, 0x47	; 71
    3d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d8a:	18 16       	cp	r1, r24
    3d8c:	0c f0       	brlt	.+2      	; 0x3d90 <ESP8266_VidConnectToWiFi+0x68c>
    3d8e:	43 c0       	rjmp	.+134    	; 0x3e16 <ESP8266_VidConnectToWiFi+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d90:	fe 01       	movw	r30, r28
    3d92:	e5 58       	subi	r30, 0x85	; 133
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	40 e2       	ldi	r20, 0x20	; 32
    3da4:	51 e4       	ldi	r21, 0x41	; 65
    3da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	8e 01       	movw	r16, r28
    3db0:	0b 58       	subi	r16, 0x8B	; 139
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	80 83       	st	Z, r24
    3dc6:	1f c0       	rjmp	.+62     	; 0x3e06 <ESP8266_VidConnectToWiFi+0x702>
    3dc8:	fe 01       	movw	r30, r28
    3dca:	ed 58       	subi	r30, 0x8D	; 141
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	88 ec       	ldi	r24, 0xC8	; 200
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	80 83       	st	Z, r24
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ed 58       	subi	r30, 0x8D	; 141
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	80 81       	ld	r24, Z
    3dde:	91 81       	ldd	r25, Z+1	; 0x01
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	f1 f7       	brne	.-4      	; 0x3de0 <ESP8266_VidConnectToWiFi+0x6dc>
    3de4:	fe 01       	movw	r30, r28
    3de6:	ed 58       	subi	r30, 0x8D	; 141
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dee:	de 01       	movw	r26, r28
    3df0:	ab 58       	subi	r26, 0x8B	; 139
    3df2:	bf 4f       	sbci	r27, 0xFF	; 255
    3df4:	fe 01       	movw	r30, r28
    3df6:	eb 58       	subi	r30, 0x8B	; 139
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	91 81       	ldd	r25, Z+1	; 0x01
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	11 96       	adiw	r26, 0x01	; 1
    3e02:	9c 93       	st	X, r25
    3e04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e06:	fe 01       	movw	r30, r28
    3e08:	eb 58       	subi	r30, 0x8B	; 139
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 81       	ld	r24, Z
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	00 97       	sbiw	r24, 0x00	; 0
    3e12:	d1 f6       	brne	.-76     	; 0x3dc8 <ESP8266_VidConnectToWiFi+0x6c4>
    3e14:	27 c0       	rjmp	.+78     	; 0x3e64 <ESP8266_VidConnectToWiFi+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e16:	8e 01       	movw	r16, r28
    3e18:	0b 58       	subi	r16, 0x8B	; 139
    3e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e9 58       	subi	r30, 0x89	; 137
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	60 81       	ld	r22, Z
    3e24:	71 81       	ldd	r23, Z+1	; 0x01
    3e26:	82 81       	ldd	r24, Z+2	; 0x02
    3e28:	93 81       	ldd	r25, Z+3	; 0x03
    3e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	f8 01       	movw	r30, r16
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	80 83       	st	Z, r24
    3e38:	de 01       	movw	r26, r28
    3e3a:	af 58       	subi	r26, 0x8F	; 143
    3e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e3e:	fe 01       	movw	r30, r28
    3e40:	eb 58       	subi	r30, 0x8B	; 139
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	80 81       	ld	r24, Z
    3e46:	91 81       	ldd	r25, Z+1	; 0x01
    3e48:	8d 93       	st	X+, r24
    3e4a:	9c 93       	st	X, r25
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ef 58       	subi	r30, 0x8F	; 143
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 81       	ld	r24, Z
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <ESP8266_VidConnectToWiFi+0x752>
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	ef 58       	subi	r30, 0x8F	; 143
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	80 83       	st	Z, r24
    3e64:	fe 01       	movw	r30, r28
    3e66:	e3 59       	subi	r30, 0x93	; 147
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	aa e7       	ldi	r26, 0x7A	; 122
    3e70:	b4 e4       	ldi	r27, 0x44	; 68
    3e72:	80 83       	st	Z, r24
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	a2 83       	std	Z+2, r26	; 0x02
    3e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e7a:	8e 01       	movw	r16, r28
    3e7c:	07 59       	subi	r16, 0x97	; 151
    3e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e80:	fe 01       	movw	r30, r28
    3e82:	e3 59       	subi	r30, 0x93	; 147
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	4a ef       	ldi	r20, 0xFA	; 250
    3e94:	54 e4       	ldi	r21, 0x44	; 68
    3e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	f8 01       	movw	r30, r16
    3ea0:	80 83       	st	Z, r24
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	a2 83       	std	Z+2, r26	; 0x02
    3ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e7 59       	subi	r30, 0x97	; 151
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e8       	ldi	r20, 0x80	; 128
    3ebc:	5f e3       	ldi	r21, 0x3F	; 63
    3ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ec2:	88 23       	and	r24, r24
    3ec4:	44 f4       	brge	.+16     	; 0x3ed6 <ESP8266_VidConnectToWiFi+0x7d2>
		__ticks = 1;
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e9 59       	subi	r30, 0x99	; 153
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24
    3ed4:	64 c0       	rjmp	.+200    	; 0x3f9e <ESP8266_VidConnectToWiFi+0x89a>
	else if (__tmp > 65535)
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e7 59       	subi	r30, 0x97	; 151
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	60 81       	ld	r22, Z
    3ede:	71 81       	ldd	r23, Z+1	; 0x01
    3ee0:	82 81       	ldd	r24, Z+2	; 0x02
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	3f ef       	ldi	r19, 0xFF	; 255
    3ee8:	4f e7       	ldi	r20, 0x7F	; 127
    3eea:	57 e4       	ldi	r21, 0x47	; 71
    3eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ef0:	18 16       	cp	r1, r24
    3ef2:	0c f0       	brlt	.+2      	; 0x3ef6 <ESP8266_VidConnectToWiFi+0x7f2>
    3ef4:	43 c0       	rjmp	.+134    	; 0x3f7c <ESP8266_VidConnectToWiFi+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e3 59       	subi	r30, 0x93	; 147
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	60 81       	ld	r22, Z
    3efe:	71 81       	ldd	r23, Z+1	; 0x01
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e2       	ldi	r20, 0x20	; 32
    3f0a:	51 e4       	ldi	r21, 0x41	; 65
    3f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	8e 01       	movw	r16, r28
    3f16:	09 59       	subi	r16, 0x99	; 153
    3f18:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	f8 01       	movw	r30, r16
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24
    3f2c:	1f c0       	rjmp	.+62     	; 0x3f6c <ESP8266_VidConnectToWiFi+0x868>
    3f2e:	fe 01       	movw	r30, r28
    3f30:	eb 59       	subi	r30, 0x9B	; 155
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	88 ec       	ldi	r24, 0xC8	; 200
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	eb 59       	subi	r30, 0x9B	; 155
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	80 81       	ld	r24, Z
    3f44:	91 81       	ldd	r25, Z+1	; 0x01
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	f1 f7       	brne	.-4      	; 0x3f46 <ESP8266_VidConnectToWiFi+0x842>
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	eb 59       	subi	r30, 0x9B	; 155
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f54:	de 01       	movw	r26, r28
    3f56:	a9 59       	subi	r26, 0x99	; 153
    3f58:	bf 4f       	sbci	r27, 0xFF	; 255
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e9 59       	subi	r30, 0x99	; 153
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	80 81       	ld	r24, Z
    3f62:	91 81       	ldd	r25, Z+1	; 0x01
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	11 96       	adiw	r26, 0x01	; 1
    3f68:	9c 93       	st	X, r25
    3f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e9 59       	subi	r30, 0x99	; 153
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	d1 f6       	brne	.-76     	; 0x3f2e <ESP8266_VidConnectToWiFi+0x82a>
    3f7a:	27 c0       	rjmp	.+78     	; 0x3fca <ESP8266_VidConnectToWiFi+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7c:	8e 01       	movw	r16, r28
    3f7e:	09 59       	subi	r16, 0x99	; 153
    3f80:	1f 4f       	sbci	r17, 0xFF	; 255
    3f82:	fe 01       	movw	r30, r28
    3f84:	e7 59       	subi	r30, 0x97	; 151
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	60 81       	ld	r22, Z
    3f8a:	71 81       	ldd	r23, Z+1	; 0x01
    3f8c:	82 81       	ldd	r24, Z+2	; 0x02
    3f8e:	93 81       	ldd	r25, Z+3	; 0x03
    3f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	f8 01       	movw	r30, r16
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	de 01       	movw	r26, r28
    3fa0:	ad 59       	subi	r26, 0x9D	; 157
    3fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e9 59       	subi	r30, 0x99	; 153
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	8d 93       	st	X+, r24
    3fb0:	9c 93       	st	X, r25
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	ed 59       	subi	r30, 0x9D	; 157
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	80 81       	ld	r24, Z
    3fba:	91 81       	ldd	r25, Z+1	; 0x01
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <ESP8266_VidConnectToWiFi+0x8b8>
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	ed 59       	subi	r30, 0x9D	; 157
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	91 83       	std	Z+1, r25	; 0x01
    3fc8:	80 83       	st	Z, r24
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e1 5a       	subi	r30, 0xA1	; 161
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	aa e7       	ldi	r26, 0x7A	; 122
    3fd6:	b4 e4       	ldi	r27, 0x44	; 68
    3fd8:	80 83       	st	Z, r24
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	a2 83       	std	Z+2, r26	; 0x02
    3fde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe0:	8e 01       	movw	r16, r28
    3fe2:	05 5a       	subi	r16, 0xA5	; 165
    3fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e1 5a       	subi	r30, 0xA1	; 161
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	4a ef       	ldi	r20, 0xFA	; 250
    3ffa:	54 e4       	ldi	r21, 0x44	; 68
    3ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	f8 01       	movw	r30, r16
    4006:	80 83       	st	Z, r24
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	a2 83       	std	Z+2, r26	; 0x02
    400c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    400e:	fe 01       	movw	r30, r28
    4010:	e5 5a       	subi	r30, 0xA5	; 165
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	44 f4       	brge	.+16     	; 0x403c <ESP8266_VidConnectToWiFi+0x938>
		__ticks = 1;
    402c:	fe 01       	movw	r30, r28
    402e:	e7 5a       	subi	r30, 0xA7	; 167
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	80 83       	st	Z, r24
    403a:	64 c0       	rjmp	.+200    	; 0x4104 <ESP8266_VidConnectToWiFi+0xa00>
	else if (__tmp > 65535)
    403c:	fe 01       	movw	r30, r28
    403e:	e5 5a       	subi	r30, 0xA5	; 165
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	60 81       	ld	r22, Z
    4044:	71 81       	ldd	r23, Z+1	; 0x01
    4046:	82 81       	ldd	r24, Z+2	; 0x02
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	3f ef       	ldi	r19, 0xFF	; 255
    404e:	4f e7       	ldi	r20, 0x7F	; 127
    4050:	57 e4       	ldi	r21, 0x47	; 71
    4052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4056:	18 16       	cp	r1, r24
    4058:	0c f0       	brlt	.+2      	; 0x405c <ESP8266_VidConnectToWiFi+0x958>
    405a:	43 c0       	rjmp	.+134    	; 0x40e2 <ESP8266_VidConnectToWiFi+0x9de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405c:	fe 01       	movw	r30, r28
    405e:	e1 5a       	subi	r30, 0xA1	; 161
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	60 81       	ld	r22, Z
    4064:	71 81       	ldd	r23, Z+1	; 0x01
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	93 81       	ldd	r25, Z+3	; 0x03
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	40 e2       	ldi	r20, 0x20	; 32
    4070:	51 e4       	ldi	r21, 0x41	; 65
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	8e 01       	movw	r16, r28
    407c:	07 5a       	subi	r16, 0xA7	; 167
    407e:	1f 4f       	sbci	r17, 0xFF	; 255
    4080:	bc 01       	movw	r22, r24
    4082:	cd 01       	movw	r24, r26
    4084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	f8 01       	movw	r30, r16
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
    4092:	1f c0       	rjmp	.+62     	; 0x40d2 <ESP8266_VidConnectToWiFi+0x9ce>
    4094:	fe 01       	movw	r30, r28
    4096:	e9 5a       	subi	r30, 0xA9	; 169
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	88 ec       	ldi	r24, 0xC8	; 200
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	80 83       	st	Z, r24
    40a2:	fe 01       	movw	r30, r28
    40a4:	e9 5a       	subi	r30, 0xA9	; 169
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	f1 f7       	brne	.-4      	; 0x40ac <ESP8266_VidConnectToWiFi+0x9a8>
    40b0:	fe 01       	movw	r30, r28
    40b2:	e9 5a       	subi	r30, 0xA9	; 169
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	91 83       	std	Z+1, r25	; 0x01
    40b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ba:	de 01       	movw	r26, r28
    40bc:	a7 5a       	subi	r26, 0xA7	; 167
    40be:	bf 4f       	sbci	r27, 0xFF	; 255
    40c0:	fe 01       	movw	r30, r28
    40c2:	e7 5a       	subi	r30, 0xA7	; 167
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	80 81       	ld	r24, Z
    40c8:	91 81       	ldd	r25, Z+1	; 0x01
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	11 96       	adiw	r26, 0x01	; 1
    40ce:	9c 93       	st	X, r25
    40d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	fe 01       	movw	r30, r28
    40d4:	e7 5a       	subi	r30, 0xA7	; 167
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	80 81       	ld	r24, Z
    40da:	91 81       	ldd	r25, Z+1	; 0x01
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	d1 f6       	brne	.-76     	; 0x4094 <ESP8266_VidConnectToWiFi+0x990>
    40e0:	27 c0       	rjmp	.+78     	; 0x4130 <ESP8266_VidConnectToWiFi+0xa2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e2:	8e 01       	movw	r16, r28
    40e4:	07 5a       	subi	r16, 0xA7	; 167
    40e6:	1f 4f       	sbci	r17, 0xFF	; 255
    40e8:	fe 01       	movw	r30, r28
    40ea:	e5 5a       	subi	r30, 0xA5	; 165
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	60 81       	ld	r22, Z
    40f0:	71 81       	ldd	r23, Z+1	; 0x01
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	f8 01       	movw	r30, r16
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	de 01       	movw	r26, r28
    4106:	ab 5a       	subi	r26, 0xAB	; 171
    4108:	bf 4f       	sbci	r27, 0xFF	; 255
    410a:	fe 01       	movw	r30, r28
    410c:	e7 5a       	subi	r30, 0xA7	; 167
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	80 81       	ld	r24, Z
    4112:	91 81       	ldd	r25, Z+1	; 0x01
    4114:	8d 93       	st	X+, r24
    4116:	9c 93       	st	X, r25
    4118:	fe 01       	movw	r30, r28
    411a:	eb 5a       	subi	r30, 0xAB	; 171
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <ESP8266_VidConnectToWiFi+0xa1e>
    4126:	fe 01       	movw	r30, r28
    4128:	eb 5a       	subi	r30, 0xAB	; 171
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	91 83       	std	Z+1, r25	; 0x01
    412e:	80 83       	st	Z, r24
    4130:	fe 01       	movw	r30, r28
    4132:	ef 5a       	subi	r30, 0xAF	; 175
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	aa e7       	ldi	r26, 0x7A	; 122
    413c:	b4 e4       	ldi	r27, 0x44	; 68
    413e:	80 83       	st	Z, r24
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	a2 83       	std	Z+2, r26	; 0x02
    4144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4146:	8e 01       	movw	r16, r28
    4148:	03 5b       	subi	r16, 0xB3	; 179
    414a:	1f 4f       	sbci	r17, 0xFF	; 255
    414c:	fe 01       	movw	r30, r28
    414e:	ef 5a       	subi	r30, 0xAF	; 175
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	60 81       	ld	r22, Z
    4154:	71 81       	ldd	r23, Z+1	; 0x01
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	93 81       	ldd	r25, Z+3	; 0x03
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	4a ef       	ldi	r20, 0xFA	; 250
    4160:	54 e4       	ldi	r21, 0x44	; 68
    4162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	f8 01       	movw	r30, r16
    416c:	80 83       	st	Z, r24
    416e:	91 83       	std	Z+1, r25	; 0x01
    4170:	a2 83       	std	Z+2, r26	; 0x02
    4172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4174:	fe 01       	movw	r30, r28
    4176:	e3 5b       	subi	r30, 0xB3	; 179
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	60 81       	ld	r22, Z
    417c:	71 81       	ldd	r23, Z+1	; 0x01
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	93 81       	ldd	r25, Z+3	; 0x03
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	44 f4       	brge	.+16     	; 0x41a2 <ESP8266_VidConnectToWiFi+0xa9e>
		__ticks = 1;
    4192:	fe 01       	movw	r30, r28
    4194:	e5 5b       	subi	r30, 0xB5	; 181
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	91 83       	std	Z+1, r25	; 0x01
    419e:	80 83       	st	Z, r24
    41a0:	64 c0       	rjmp	.+200    	; 0x426a <ESP8266_VidConnectToWiFi+0xb66>
	else if (__tmp > 65535)
    41a2:	fe 01       	movw	r30, r28
    41a4:	e3 5b       	subi	r30, 0xB3	; 179
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	60 81       	ld	r22, Z
    41aa:	71 81       	ldd	r23, Z+1	; 0x01
    41ac:	82 81       	ldd	r24, Z+2	; 0x02
    41ae:	93 81       	ldd	r25, Z+3	; 0x03
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	3f ef       	ldi	r19, 0xFF	; 255
    41b4:	4f e7       	ldi	r20, 0x7F	; 127
    41b6:	57 e4       	ldi	r21, 0x47	; 71
    41b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41bc:	18 16       	cp	r1, r24
    41be:	0c f0       	brlt	.+2      	; 0x41c2 <ESP8266_VidConnectToWiFi+0xabe>
    41c0:	43 c0       	rjmp	.+134    	; 0x4248 <ESP8266_VidConnectToWiFi+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c2:	fe 01       	movw	r30, r28
    41c4:	ef 5a       	subi	r30, 0xAF	; 175
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	60 81       	ld	r22, Z
    41ca:	71 81       	ldd	r23, Z+1	; 0x01
    41cc:	82 81       	ldd	r24, Z+2	; 0x02
    41ce:	93 81       	ldd	r25, Z+3	; 0x03
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	40 e2       	ldi	r20, 0x20	; 32
    41d6:	51 e4       	ldi	r21, 0x41	; 65
    41d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	8e 01       	movw	r16, r28
    41e2:	05 5b       	subi	r16, 0xB5	; 181
    41e4:	1f 4f       	sbci	r17, 0xFF	; 255
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	f8 01       	movw	r30, r16
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	80 83       	st	Z, r24
    41f8:	1f c0       	rjmp	.+62     	; 0x4238 <ESP8266_VidConnectToWiFi+0xb34>
    41fa:	fe 01       	movw	r30, r28
    41fc:	e7 5b       	subi	r30, 0xB7	; 183
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	88 ec       	ldi	r24, 0xC8	; 200
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	91 83       	std	Z+1, r25	; 0x01
    4206:	80 83       	st	Z, r24
    4208:	fe 01       	movw	r30, r28
    420a:	e7 5b       	subi	r30, 0xB7	; 183
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	80 81       	ld	r24, Z
    4210:	91 81       	ldd	r25, Z+1	; 0x01
    4212:	01 97       	sbiw	r24, 0x01	; 1
    4214:	f1 f7       	brne	.-4      	; 0x4212 <ESP8266_VidConnectToWiFi+0xb0e>
    4216:	fe 01       	movw	r30, r28
    4218:	e7 5b       	subi	r30, 0xB7	; 183
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	91 83       	std	Z+1, r25	; 0x01
    421e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4220:	de 01       	movw	r26, r28
    4222:	a5 5b       	subi	r26, 0xB5	; 181
    4224:	bf 4f       	sbci	r27, 0xFF	; 255
    4226:	fe 01       	movw	r30, r28
    4228:	e5 5b       	subi	r30, 0xB5	; 181
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 81       	ld	r24, Z
    422e:	91 81       	ldd	r25, Z+1	; 0x01
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	11 96       	adiw	r26, 0x01	; 1
    4234:	9c 93       	st	X, r25
    4236:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4238:	fe 01       	movw	r30, r28
    423a:	e5 5b       	subi	r30, 0xB5	; 181
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	80 81       	ld	r24, Z
    4240:	91 81       	ldd	r25, Z+1	; 0x01
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	d1 f6       	brne	.-76     	; 0x41fa <ESP8266_VidConnectToWiFi+0xaf6>
    4246:	27 c0       	rjmp	.+78     	; 0x4296 <ESP8266_VidConnectToWiFi+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4248:	8e 01       	movw	r16, r28
    424a:	05 5b       	subi	r16, 0xB5	; 181
    424c:	1f 4f       	sbci	r17, 0xFF	; 255
    424e:	fe 01       	movw	r30, r28
    4250:	e3 5b       	subi	r30, 0xB3	; 179
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	60 81       	ld	r22, Z
    4256:	71 81       	ldd	r23, Z+1	; 0x01
    4258:	82 81       	ldd	r24, Z+2	; 0x02
    425a:	93 81       	ldd	r25, Z+3	; 0x03
    425c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	f8 01       	movw	r30, r16
    4266:	91 83       	std	Z+1, r25	; 0x01
    4268:	80 83       	st	Z, r24
    426a:	de 01       	movw	r26, r28
    426c:	a9 5b       	subi	r26, 0xB9	; 185
    426e:	bf 4f       	sbci	r27, 0xFF	; 255
    4270:	fe 01       	movw	r30, r28
    4272:	e5 5b       	subi	r30, 0xB5	; 181
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	80 81       	ld	r24, Z
    4278:	91 81       	ldd	r25, Z+1	; 0x01
    427a:	8d 93       	st	X+, r24
    427c:	9c 93       	st	X, r25
    427e:	fe 01       	movw	r30, r28
    4280:	e9 5b       	subi	r30, 0xB9	; 185
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	80 81       	ld	r24, Z
    4286:	91 81       	ldd	r25, Z+1	; 0x01
    4288:	01 97       	sbiw	r24, 0x01	; 1
    428a:	f1 f7       	brne	.-4      	; 0x4288 <ESP8266_VidConnectToWiFi+0xb84>
    428c:	fe 01       	movw	r30, r28
    428e:	e9 5b       	subi	r30, 0xB9	; 185
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
    4296:	fe 01       	movw	r30, r28
    4298:	ed 5b       	subi	r30, 0xBD	; 189
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	aa e7       	ldi	r26, 0x7A	; 122
    42a2:	b4 e4       	ldi	r27, 0x44	; 68
    42a4:	80 83       	st	Z, r24
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	a2 83       	std	Z+2, r26	; 0x02
    42aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ac:	8e 01       	movw	r16, r28
    42ae:	01 5c       	subi	r16, 0xC1	; 193
    42b0:	1f 4f       	sbci	r17, 0xFF	; 255
    42b2:	fe 01       	movw	r30, r28
    42b4:	ed 5b       	subi	r30, 0xBD	; 189
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	60 81       	ld	r22, Z
    42ba:	71 81       	ldd	r23, Z+1	; 0x01
    42bc:	82 81       	ldd	r24, Z+2	; 0x02
    42be:	93 81       	ldd	r25, Z+3	; 0x03
    42c0:	20 e0       	ldi	r18, 0x00	; 0
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	4a ef       	ldi	r20, 0xFA	; 250
    42c6:	54 e4       	ldi	r21, 0x44	; 68
    42c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42cc:	dc 01       	movw	r26, r24
    42ce:	cb 01       	movw	r24, r22
    42d0:	f8 01       	movw	r30, r16
    42d2:	80 83       	st	Z, r24
    42d4:	91 83       	std	Z+1, r25	; 0x01
    42d6:	a2 83       	std	Z+2, r26	; 0x02
    42d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42da:	fe 01       	movw	r30, r28
    42dc:	ff 96       	adiw	r30, 0x3f	; 63
    42de:	60 81       	ld	r22, Z
    42e0:	71 81       	ldd	r23, Z+1	; 0x01
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	93 81       	ldd	r25, Z+3	; 0x03
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	40 e8       	ldi	r20, 0x80	; 128
    42ec:	5f e3       	ldi	r21, 0x3F	; 63
    42ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42f2:	88 23       	and	r24, r24
    42f4:	2c f4       	brge	.+10     	; 0x4300 <ESP8266_VidConnectToWiFi+0xbfc>
		__ticks = 1;
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	9e af       	std	Y+62, r25	; 0x3e
    42fc:	8d af       	std	Y+61, r24	; 0x3d
    42fe:	46 c0       	rjmp	.+140    	; 0x438c <ESP8266_VidConnectToWiFi+0xc88>
	else if (__tmp > 65535)
    4300:	fe 01       	movw	r30, r28
    4302:	ff 96       	adiw	r30, 0x3f	; 63
    4304:	60 81       	ld	r22, Z
    4306:	71 81       	ldd	r23, Z+1	; 0x01
    4308:	82 81       	ldd	r24, Z+2	; 0x02
    430a:	93 81       	ldd	r25, Z+3	; 0x03
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	3f ef       	ldi	r19, 0xFF	; 255
    4310:	4f e7       	ldi	r20, 0x7F	; 127
    4312:	57 e4       	ldi	r21, 0x47	; 71
    4314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4318:	18 16       	cp	r1, r24
    431a:	64 f5       	brge	.+88     	; 0x4374 <ESP8266_VidConnectToWiFi+0xc70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431c:	fe 01       	movw	r30, r28
    431e:	ed 5b       	subi	r30, 0xBD	; 189
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	60 81       	ld	r22, Z
    4324:	71 81       	ldd	r23, Z+1	; 0x01
    4326:	82 81       	ldd	r24, Z+2	; 0x02
    4328:	93 81       	ldd	r25, Z+3	; 0x03
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e2       	ldi	r20, 0x20	; 32
    4330:	51 e4       	ldi	r21, 0x41	; 65
    4332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4336:	dc 01       	movw	r26, r24
    4338:	cb 01       	movw	r24, r22
    433a:	bc 01       	movw	r22, r24
    433c:	cd 01       	movw	r24, r26
    433e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	9e af       	std	Y+62, r25	; 0x3e
    4348:	8d af       	std	Y+61, r24	; 0x3d
    434a:	0f c0       	rjmp	.+30     	; 0x436a <ESP8266_VidConnectToWiFi+0xc66>
    434c:	88 ec       	ldi	r24, 0xC8	; 200
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	9c af       	std	Y+60, r25	; 0x3c
    4352:	8b af       	std	Y+59, r24	; 0x3b
    4354:	8b ad       	ldd	r24, Y+59	; 0x3b
    4356:	9c ad       	ldd	r25, Y+60	; 0x3c
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <ESP8266_VidConnectToWiFi+0xc54>
    435c:	9c af       	std	Y+60, r25	; 0x3c
    435e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4360:	8d ad       	ldd	r24, Y+61	; 0x3d
    4362:	9e ad       	ldd	r25, Y+62	; 0x3e
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	9e af       	std	Y+62, r25	; 0x3e
    4368:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436a:	8d ad       	ldd	r24, Y+61	; 0x3d
    436c:	9e ad       	ldd	r25, Y+62	; 0x3e
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	69 f7       	brne	.-38     	; 0x434c <ESP8266_VidConnectToWiFi+0xc48>
    4372:	16 c0       	rjmp	.+44     	; 0x43a0 <ESP8266_VidConnectToWiFi+0xc9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4374:	fe 01       	movw	r30, r28
    4376:	ff 96       	adiw	r30, 0x3f	; 63
    4378:	60 81       	ld	r22, Z
    437a:	71 81       	ldd	r23, Z+1	; 0x01
    437c:	82 81       	ldd	r24, Z+2	; 0x02
    437e:	93 81       	ldd	r25, Z+3	; 0x03
    4380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4384:	dc 01       	movw	r26, r24
    4386:	cb 01       	movw	r24, r22
    4388:	9e af       	std	Y+62, r25	; 0x3e
    438a:	8d af       	std	Y+61, r24	; 0x3d
    438c:	8d ad       	ldd	r24, Y+61	; 0x3d
    438e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4390:	9a af       	std	Y+58, r25	; 0x3a
    4392:	89 af       	std	Y+57, r24	; 0x39
    4394:	89 ad       	ldd	r24, Y+57	; 0x39
    4396:	9a ad       	ldd	r25, Y+58	; 0x3a
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	f1 f7       	brne	.-4      	; 0x4398 <ESP8266_VidConnectToWiFi+0xc94>
    439c:	9a af       	std	Y+58, r25	; 0x3a
    439e:	89 af       	std	Y+57, r24	; 0x39
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	aa e7       	ldi	r26, 0x7A	; 122
    43a6:	b4 e4       	ldi	r27, 0x44	; 68
    43a8:	8d ab       	std	Y+53, r24	; 0x35
    43aa:	9e ab       	std	Y+54, r25	; 0x36
    43ac:	af ab       	std	Y+55, r26	; 0x37
    43ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43b0:	6d a9       	ldd	r22, Y+53	; 0x35
    43b2:	7e a9       	ldd	r23, Y+54	; 0x36
    43b4:	8f a9       	ldd	r24, Y+55	; 0x37
    43b6:	98 ad       	ldd	r25, Y+56	; 0x38
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	4a ef       	ldi	r20, 0xFA	; 250
    43be:	54 e4       	ldi	r21, 0x44	; 68
    43c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	89 ab       	std	Y+49, r24	; 0x31
    43ca:	9a ab       	std	Y+50, r25	; 0x32
    43cc:	ab ab       	std	Y+51, r26	; 0x33
    43ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43d0:	69 a9       	ldd	r22, Y+49	; 0x31
    43d2:	7a a9       	ldd	r23, Y+50	; 0x32
    43d4:	8b a9       	ldd	r24, Y+51	; 0x33
    43d6:	9c a9       	ldd	r25, Y+52	; 0x34
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	40 e8       	ldi	r20, 0x80	; 128
    43de:	5f e3       	ldi	r21, 0x3F	; 63
    43e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43e4:	88 23       	and	r24, r24
    43e6:	2c f4       	brge	.+10     	; 0x43f2 <ESP8266_VidConnectToWiFi+0xcee>
		__ticks = 1;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	98 ab       	std	Y+48, r25	; 0x30
    43ee:	8f a7       	std	Y+47, r24	; 0x2f
    43f0:	3f c0       	rjmp	.+126    	; 0x4470 <ESP8266_VidConnectToWiFi+0xd6c>
	else if (__tmp > 65535)
    43f2:	69 a9       	ldd	r22, Y+49	; 0x31
    43f4:	7a a9       	ldd	r23, Y+50	; 0x32
    43f6:	8b a9       	ldd	r24, Y+51	; 0x33
    43f8:	9c a9       	ldd	r25, Y+52	; 0x34
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	3f ef       	ldi	r19, 0xFF	; 255
    43fe:	4f e7       	ldi	r20, 0x7F	; 127
    4400:	57 e4       	ldi	r21, 0x47	; 71
    4402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4406:	18 16       	cp	r1, r24
    4408:	4c f5       	brge	.+82     	; 0x445c <ESP8266_VidConnectToWiFi+0xd58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    440a:	6d a9       	ldd	r22, Y+53	; 0x35
    440c:	7e a9       	ldd	r23, Y+54	; 0x36
    440e:	8f a9       	ldd	r24, Y+55	; 0x37
    4410:	98 ad       	ldd	r25, Y+56	; 0x38
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	40 e2       	ldi	r20, 0x20	; 32
    4418:	51 e4       	ldi	r21, 0x41	; 65
    441a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	bc 01       	movw	r22, r24
    4424:	cd 01       	movw	r24, r26
    4426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	98 ab       	std	Y+48, r25	; 0x30
    4430:	8f a7       	std	Y+47, r24	; 0x2f
    4432:	0f c0       	rjmp	.+30     	; 0x4452 <ESP8266_VidConnectToWiFi+0xd4e>
    4434:	88 ec       	ldi	r24, 0xC8	; 200
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	9e a7       	std	Y+46, r25	; 0x2e
    443a:	8d a7       	std	Y+45, r24	; 0x2d
    443c:	8d a5       	ldd	r24, Y+45	; 0x2d
    443e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	f1 f7       	brne	.-4      	; 0x4440 <ESP8266_VidConnectToWiFi+0xd3c>
    4444:	9e a7       	std	Y+46, r25	; 0x2e
    4446:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4448:	8f a5       	ldd	r24, Y+47	; 0x2f
    444a:	98 a9       	ldd	r25, Y+48	; 0x30
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	98 ab       	std	Y+48, r25	; 0x30
    4450:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4452:	8f a5       	ldd	r24, Y+47	; 0x2f
    4454:	98 a9       	ldd	r25, Y+48	; 0x30
    4456:	00 97       	sbiw	r24, 0x00	; 0
    4458:	69 f7       	brne	.-38     	; 0x4434 <ESP8266_VidConnectToWiFi+0xd30>
    445a:	14 c0       	rjmp	.+40     	; 0x4484 <ESP8266_VidConnectToWiFi+0xd80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445c:	69 a9       	ldd	r22, Y+49	; 0x31
    445e:	7a a9       	ldd	r23, Y+50	; 0x32
    4460:	8b a9       	ldd	r24, Y+51	; 0x33
    4462:	9c a9       	ldd	r25, Y+52	; 0x34
    4464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	98 ab       	std	Y+48, r25	; 0x30
    446e:	8f a7       	std	Y+47, r24	; 0x2f
    4470:	8f a5       	ldd	r24, Y+47	; 0x2f
    4472:	98 a9       	ldd	r25, Y+48	; 0x30
    4474:	9c a7       	std	Y+44, r25	; 0x2c
    4476:	8b a7       	std	Y+43, r24	; 0x2b
    4478:	8b a5       	ldd	r24, Y+43	; 0x2b
    447a:	9c a5       	ldd	r25, Y+44	; 0x2c
    447c:	01 97       	sbiw	r24, 0x01	; 1
    447e:	f1 f7       	brne	.-4      	; 0x447c <ESP8266_VidConnectToWiFi+0xd78>
    4480:	9c a7       	std	Y+44, r25	; 0x2c
    4482:	8b a7       	std	Y+43, r24	; 0x2b
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	aa e7       	ldi	r26, 0x7A	; 122
    448a:	b4 e4       	ldi	r27, 0x44	; 68
    448c:	8f a3       	std	Y+39, r24	; 0x27
    448e:	98 a7       	std	Y+40, r25	; 0x28
    4490:	a9 a7       	std	Y+41, r26	; 0x29
    4492:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4494:	6f a1       	ldd	r22, Y+39	; 0x27
    4496:	78 a5       	ldd	r23, Y+40	; 0x28
    4498:	89 a5       	ldd	r24, Y+41	; 0x29
    449a:	9a a5       	ldd	r25, Y+42	; 0x2a
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	4a ef       	ldi	r20, 0xFA	; 250
    44a2:	54 e4       	ldi	r21, 0x44	; 68
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	8b a3       	std	Y+35, r24	; 0x23
    44ae:	9c a3       	std	Y+36, r25	; 0x24
    44b0:	ad a3       	std	Y+37, r26	; 0x25
    44b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44b4:	6b a1       	ldd	r22, Y+35	; 0x23
    44b6:	7c a1       	ldd	r23, Y+36	; 0x24
    44b8:	8d a1       	ldd	r24, Y+37	; 0x25
    44ba:	9e a1       	ldd	r25, Y+38	; 0x26
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e8       	ldi	r20, 0x80	; 128
    44c2:	5f e3       	ldi	r21, 0x3F	; 63
    44c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44c8:	88 23       	and	r24, r24
    44ca:	2c f4       	brge	.+10     	; 0x44d6 <ESP8266_VidConnectToWiFi+0xdd2>
		__ticks = 1;
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	9a a3       	std	Y+34, r25	; 0x22
    44d2:	89 a3       	std	Y+33, r24	; 0x21
    44d4:	3f c0       	rjmp	.+126    	; 0x4554 <ESP8266_VidConnectToWiFi+0xe50>
	else if (__tmp > 65535)
    44d6:	6b a1       	ldd	r22, Y+35	; 0x23
    44d8:	7c a1       	ldd	r23, Y+36	; 0x24
    44da:	8d a1       	ldd	r24, Y+37	; 0x25
    44dc:	9e a1       	ldd	r25, Y+38	; 0x26
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	3f ef       	ldi	r19, 0xFF	; 255
    44e2:	4f e7       	ldi	r20, 0x7F	; 127
    44e4:	57 e4       	ldi	r21, 0x47	; 71
    44e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44ea:	18 16       	cp	r1, r24
    44ec:	4c f5       	brge	.+82     	; 0x4540 <ESP8266_VidConnectToWiFi+0xe3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ee:	6f a1       	ldd	r22, Y+39	; 0x27
    44f0:	78 a5       	ldd	r23, Y+40	; 0x28
    44f2:	89 a5       	ldd	r24, Y+41	; 0x29
    44f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	40 e2       	ldi	r20, 0x20	; 32
    44fc:	51 e4       	ldi	r21, 0x41	; 65
    44fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	9a a3       	std	Y+34, r25	; 0x22
    4514:	89 a3       	std	Y+33, r24	; 0x21
    4516:	0f c0       	rjmp	.+30     	; 0x4536 <ESP8266_VidConnectToWiFi+0xe32>
    4518:	88 ec       	ldi	r24, 0xC8	; 200
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	98 a3       	std	Y+32, r25	; 0x20
    451e:	8f 8f       	std	Y+31, r24	; 0x1f
    4520:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4522:	98 a1       	ldd	r25, Y+32	; 0x20
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	f1 f7       	brne	.-4      	; 0x4524 <ESP8266_VidConnectToWiFi+0xe20>
    4528:	98 a3       	std	Y+32, r25	; 0x20
    452a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452c:	89 a1       	ldd	r24, Y+33	; 0x21
    452e:	9a a1       	ldd	r25, Y+34	; 0x22
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	9a a3       	std	Y+34, r25	; 0x22
    4534:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4536:	89 a1       	ldd	r24, Y+33	; 0x21
    4538:	9a a1       	ldd	r25, Y+34	; 0x22
    453a:	00 97       	sbiw	r24, 0x00	; 0
    453c:	69 f7       	brne	.-38     	; 0x4518 <ESP8266_VidConnectToWiFi+0xe14>
    453e:	14 c0       	rjmp	.+40     	; 0x4568 <ESP8266_VidConnectToWiFi+0xe64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4540:	6b a1       	ldd	r22, Y+35	; 0x23
    4542:	7c a1       	ldd	r23, Y+36	; 0x24
    4544:	8d a1       	ldd	r24, Y+37	; 0x25
    4546:	9e a1       	ldd	r25, Y+38	; 0x26
    4548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	9a a3       	std	Y+34, r25	; 0x22
    4552:	89 a3       	std	Y+33, r24	; 0x21
    4554:	89 a1       	ldd	r24, Y+33	; 0x21
    4556:	9a a1       	ldd	r25, Y+34	; 0x22
    4558:	9e 8f       	std	Y+30, r25	; 0x1e
    455a:	8d 8f       	std	Y+29, r24	; 0x1d
    455c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    455e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4560:	01 97       	sbiw	r24, 0x01	; 1
    4562:	f1 f7       	brne	.-4      	; 0x4560 <ESP8266_VidConnectToWiFi+0xe5c>
    4564:	9e 8f       	std	Y+30, r25	; 0x1e
    4566:	8d 8f       	std	Y+29, r24	; 0x1d
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	aa e7       	ldi	r26, 0x7A	; 122
    456e:	b4 e4       	ldi	r27, 0x44	; 68
    4570:	89 8f       	std	Y+25, r24	; 0x19
    4572:	9a 8f       	std	Y+26, r25	; 0x1a
    4574:	ab 8f       	std	Y+27, r26	; 0x1b
    4576:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4578:	69 8d       	ldd	r22, Y+25	; 0x19
    457a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    457c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    457e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	4a ef       	ldi	r20, 0xFA	; 250
    4586:	54 e4       	ldi	r21, 0x44	; 68
    4588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	8d 8b       	std	Y+21, r24	; 0x15
    4592:	9e 8b       	std	Y+22, r25	; 0x16
    4594:	af 8b       	std	Y+23, r26	; 0x17
    4596:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4598:	6d 89       	ldd	r22, Y+21	; 0x15
    459a:	7e 89       	ldd	r23, Y+22	; 0x16
    459c:	8f 89       	ldd	r24, Y+23	; 0x17
    459e:	98 8d       	ldd	r25, Y+24	; 0x18
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	40 e8       	ldi	r20, 0x80	; 128
    45a6:	5f e3       	ldi	r21, 0x3F	; 63
    45a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45ac:	88 23       	and	r24, r24
    45ae:	2c f4       	brge	.+10     	; 0x45ba <ESP8266_VidConnectToWiFi+0xeb6>
		__ticks = 1;
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	9c 8b       	std	Y+20, r25	; 0x14
    45b6:	8b 8b       	std	Y+19, r24	; 0x13
    45b8:	3f c0       	rjmp	.+126    	; 0x4638 <ESP8266_VidConnectToWiFi+0xf34>
	else if (__tmp > 65535)
    45ba:	6d 89       	ldd	r22, Y+21	; 0x15
    45bc:	7e 89       	ldd	r23, Y+22	; 0x16
    45be:	8f 89       	ldd	r24, Y+23	; 0x17
    45c0:	98 8d       	ldd	r25, Y+24	; 0x18
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	3f ef       	ldi	r19, 0xFF	; 255
    45c6:	4f e7       	ldi	r20, 0x7F	; 127
    45c8:	57 e4       	ldi	r21, 0x47	; 71
    45ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45ce:	18 16       	cp	r1, r24
    45d0:	4c f5       	brge	.+82     	; 0x4624 <ESP8266_VidConnectToWiFi+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d2:	69 8d       	ldd	r22, Y+25	; 0x19
    45d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e2       	ldi	r20, 0x20	; 32
    45e0:	51 e4       	ldi	r21, 0x41	; 65
    45e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	bc 01       	movw	r22, r24
    45ec:	cd 01       	movw	r24, r26
    45ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	9c 8b       	std	Y+20, r25	; 0x14
    45f8:	8b 8b       	std	Y+19, r24	; 0x13
    45fa:	0f c0       	rjmp	.+30     	; 0x461a <ESP8266_VidConnectToWiFi+0xf16>
    45fc:	88 ec       	ldi	r24, 0xC8	; 200
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	9a 8b       	std	Y+18, r25	; 0x12
    4602:	89 8b       	std	Y+17, r24	; 0x11
    4604:	89 89       	ldd	r24, Y+17	; 0x11
    4606:	9a 89       	ldd	r25, Y+18	; 0x12
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	f1 f7       	brne	.-4      	; 0x4608 <ESP8266_VidConnectToWiFi+0xf04>
    460c:	9a 8b       	std	Y+18, r25	; 0x12
    460e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4610:	8b 89       	ldd	r24, Y+19	; 0x13
    4612:	9c 89       	ldd	r25, Y+20	; 0x14
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	9c 8b       	std	Y+20, r25	; 0x14
    4618:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    461a:	8b 89       	ldd	r24, Y+19	; 0x13
    461c:	9c 89       	ldd	r25, Y+20	; 0x14
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	69 f7       	brne	.-38     	; 0x45fc <ESP8266_VidConnectToWiFi+0xef8>
    4622:	14 c0       	rjmp	.+40     	; 0x464c <ESP8266_VidConnectToWiFi+0xf48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4624:	6d 89       	ldd	r22, Y+21	; 0x15
    4626:	7e 89       	ldd	r23, Y+22	; 0x16
    4628:	8f 89       	ldd	r24, Y+23	; 0x17
    462a:	98 8d       	ldd	r25, Y+24	; 0x18
    462c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	9c 8b       	std	Y+20, r25	; 0x14
    4636:	8b 8b       	std	Y+19, r24	; 0x13
    4638:	8b 89       	ldd	r24, Y+19	; 0x13
    463a:	9c 89       	ldd	r25, Y+20	; 0x14
    463c:	98 8b       	std	Y+16, r25	; 0x10
    463e:	8f 87       	std	Y+15, r24	; 0x0f
    4640:	8f 85       	ldd	r24, Y+15	; 0x0f
    4642:	98 89       	ldd	r25, Y+16	; 0x10
    4644:	01 97       	sbiw	r24, 0x01	; 1
    4646:	f1 f7       	brne	.-4      	; 0x4644 <ESP8266_VidConnectToWiFi+0xf40>
    4648:	98 8b       	std	Y+16, r25	; 0x10
    464a:	8f 87       	std	Y+15, r24	; 0x0f
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	aa e7       	ldi	r26, 0x7A	; 122
    4652:	b4 e4       	ldi	r27, 0x44	; 68
    4654:	8b 87       	std	Y+11, r24	; 0x0b
    4656:	9c 87       	std	Y+12, r25	; 0x0c
    4658:	ad 87       	std	Y+13, r26	; 0x0d
    465a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465c:	6b 85       	ldd	r22, Y+11	; 0x0b
    465e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4660:	8d 85       	ldd	r24, Y+13	; 0x0d
    4662:	9e 85       	ldd	r25, Y+14	; 0x0e
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	4a ef       	ldi	r20, 0xFA	; 250
    466a:	54 e4       	ldi	r21, 0x44	; 68
    466c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	8f 83       	std	Y+7, r24	; 0x07
    4676:	98 87       	std	Y+8, r25	; 0x08
    4678:	a9 87       	std	Y+9, r26	; 0x09
    467a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    467c:	6f 81       	ldd	r22, Y+7	; 0x07
    467e:	78 85       	ldd	r23, Y+8	; 0x08
    4680:	89 85       	ldd	r24, Y+9	; 0x09
    4682:	9a 85       	ldd	r25, Y+10	; 0x0a
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e8       	ldi	r20, 0x80	; 128
    468a:	5f e3       	ldi	r21, 0x3F	; 63
    468c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4690:	88 23       	and	r24, r24
    4692:	2c f4       	brge	.+10     	; 0x469e <ESP8266_VidConnectToWiFi+0xf9a>
		__ticks = 1;
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	9e 83       	std	Y+6, r25	; 0x06
    469a:	8d 83       	std	Y+5, r24	; 0x05
    469c:	3f c0       	rjmp	.+126    	; 0x471c <ESP8266_VidConnectToWiFi+0x1018>
	else if (__tmp > 65535)
    469e:	6f 81       	ldd	r22, Y+7	; 0x07
    46a0:	78 85       	ldd	r23, Y+8	; 0x08
    46a2:	89 85       	ldd	r24, Y+9	; 0x09
    46a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	3f ef       	ldi	r19, 0xFF	; 255
    46aa:	4f e7       	ldi	r20, 0x7F	; 127
    46ac:	57 e4       	ldi	r21, 0x47	; 71
    46ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46b2:	18 16       	cp	r1, r24
    46b4:	4c f5       	brge	.+82     	; 0x4708 <ESP8266_VidConnectToWiFi+0x1004>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    46bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	40 e2       	ldi	r20, 0x20	; 32
    46c4:	51 e4       	ldi	r21, 0x41	; 65
    46c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ca:	dc 01       	movw	r26, r24
    46cc:	cb 01       	movw	r24, r22
    46ce:	bc 01       	movw	r22, r24
    46d0:	cd 01       	movw	r24, r26
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	9e 83       	std	Y+6, r25	; 0x06
    46dc:	8d 83       	std	Y+5, r24	; 0x05
    46de:	0f c0       	rjmp	.+30     	; 0x46fe <ESP8266_VidConnectToWiFi+0xffa>
    46e0:	88 ec       	ldi	r24, 0xC8	; 200
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	9c 83       	std	Y+4, r25	; 0x04
    46e6:	8b 83       	std	Y+3, r24	; 0x03
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	f1 f7       	brne	.-4      	; 0x46ec <ESP8266_VidConnectToWiFi+0xfe8>
    46f0:	9c 83       	std	Y+4, r25	; 0x04
    46f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	9e 81       	ldd	r25, Y+6	; 0x06
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	9e 83       	std	Y+6, r25	; 0x06
    46fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4700:	9e 81       	ldd	r25, Y+6	; 0x06
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	69 f7       	brne	.-38     	; 0x46e0 <ESP8266_VidConnectToWiFi+0xfdc>
    4706:	14 c0       	rjmp	.+40     	; 0x4730 <ESP8266_VidConnectToWiFi+0x102c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	6f 81       	ldd	r22, Y+7	; 0x07
    470a:	78 85       	ldd	r23, Y+8	; 0x08
    470c:	89 85       	ldd	r24, Y+9	; 0x09
    470e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	9e 83       	std	Y+6, r25	; 0x06
    471a:	8d 83       	std	Y+5, r24	; 0x05
    471c:	8d 81       	ldd	r24, Y+5	; 0x05
    471e:	9e 81       	ldd	r25, Y+6	; 0x06
    4720:	9a 83       	std	Y+2, r25	; 0x02
    4722:	89 83       	std	Y+1, r24	; 0x01
    4724:	89 81       	ldd	r24, Y+1	; 0x01
    4726:	9a 81       	ldd	r25, Y+2	; 0x02
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <ESP8266_VidConnectToWiFi+0x1024>
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	_delay_ms( 1000 );
	_delay_ms( 1000 );
	_delay_ms( 1000 );

}
    4730:	c6 54       	subi	r28, 0x46	; 70
    4732:	df 4f       	sbci	r29, 0xFF	; 255
    4734:	0f b6       	in	r0, 0x3f	; 63
    4736:	f8 94       	cli
    4738:	de bf       	out	0x3e, r29	; 62
    473a:	0f be       	out	0x3f, r0	; 63
    473c:	cd bf       	out	0x3d, r28	; 61
    473e:	cf 91       	pop	r28
    4740:	df 91       	pop	r29
    4742:	1f 91       	pop	r17
    4744:	0f 91       	pop	r16
    4746:	08 95       	ret

00004748 <ESP8266_VidConnectToSrvTcp>:

void ESP8266_VidConnectToSrvTcp(u8* Copy_u8Domain, u8* Copy_u8Port)
{
    4748:	df 93       	push	r29
    474a:	cf 93       	push	r28
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	62 97       	sbiw	r28, 0x12	; 18
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	98 8b       	std	Y+16, r25	; 0x10
    475e:	8f 87       	std	Y+15, r24	; 0x0f
    4760:	7a 8b       	std	Y+18, r23	; 0x12
    4762:	69 8b       	std	Y+17, r22	; 0x11
	USART_SendStr( (u8 *) "AT+CIPSTART=\"TCP\",\"" );
    4764:	82 ec       	ldi	r24, 0xC2	; 194
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) Copy_u8Domain );
    476c:	8f 85       	ldd	r24, Y+15	; 0x0f
    476e:	98 89       	ldd	r25, Y+16	; 0x10
    4770:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) "\"," );
    4774:	86 ed       	ldi	r24, 0xD6	; 214
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) Copy_u8Port );
    477c:	89 89       	ldd	r24, Y+17	; 0x11
    477e:	9a 89       	ldd	r25, Y+18	; 0x12
    4780:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendStr( (u8 *) "\r\n" );
    4784:	89 ed       	ldi	r24, 0xD9	; 217
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	aa e7       	ldi	r26, 0x7A	; 122
    4792:	b4 e4       	ldi	r27, 0x44	; 68
    4794:	8b 87       	std	Y+11, r24	; 0x0b
    4796:	9c 87       	std	Y+12, r25	; 0x0c
    4798:	ad 87       	std	Y+13, r26	; 0x0d
    479a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479c:	6b 85       	ldd	r22, Y+11	; 0x0b
    479e:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	4a ef       	ldi	r20, 0xFA	; 250
    47aa:	54 e4       	ldi	r21, 0x44	; 68
    47ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	8f 83       	std	Y+7, r24	; 0x07
    47b6:	98 87       	std	Y+8, r25	; 0x08
    47b8:	a9 87       	std	Y+9, r26	; 0x09
    47ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47bc:	6f 81       	ldd	r22, Y+7	; 0x07
    47be:	78 85       	ldd	r23, Y+8	; 0x08
    47c0:	89 85       	ldd	r24, Y+9	; 0x09
    47c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	40 e8       	ldi	r20, 0x80	; 128
    47ca:	5f e3       	ldi	r21, 0x3F	; 63
    47cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47d0:	88 23       	and	r24, r24
    47d2:	2c f4       	brge	.+10     	; 0x47de <ESP8266_VidConnectToSrvTcp+0x96>
		__ticks = 1;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	9e 83       	std	Y+6, r25	; 0x06
    47da:	8d 83       	std	Y+5, r24	; 0x05
    47dc:	3f c0       	rjmp	.+126    	; 0x485c <ESP8266_VidConnectToSrvTcp+0x114>
	else if (__tmp > 65535)
    47de:	6f 81       	ldd	r22, Y+7	; 0x07
    47e0:	78 85       	ldd	r23, Y+8	; 0x08
    47e2:	89 85       	ldd	r24, Y+9	; 0x09
    47e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	3f ef       	ldi	r19, 0xFF	; 255
    47ea:	4f e7       	ldi	r20, 0x7F	; 127
    47ec:	57 e4       	ldi	r21, 0x47	; 71
    47ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47f2:	18 16       	cp	r1, r24
    47f4:	4c f5       	brge	.+82     	; 0x4848 <ESP8266_VidConnectToSrvTcp+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	40 e2       	ldi	r20, 0x20	; 32
    4804:	51 e4       	ldi	r21, 0x41	; 65
    4806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	bc 01       	movw	r22, r24
    4810:	cd 01       	movw	r24, r26
    4812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	9e 83       	std	Y+6, r25	; 0x06
    481c:	8d 83       	std	Y+5, r24	; 0x05
    481e:	0f c0       	rjmp	.+30     	; 0x483e <ESP8266_VidConnectToSrvTcp+0xf6>
    4820:	88 ec       	ldi	r24, 0xC8	; 200
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	9c 83       	std	Y+4, r25	; 0x04
    4826:	8b 83       	std	Y+3, r24	; 0x03
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	9c 81       	ldd	r25, Y+4	; 0x04
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	f1 f7       	brne	.-4      	; 0x482c <ESP8266_VidConnectToSrvTcp+0xe4>
    4830:	9c 83       	std	Y+4, r25	; 0x04
    4832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4834:	8d 81       	ldd	r24, Y+5	; 0x05
    4836:	9e 81       	ldd	r25, Y+6	; 0x06
    4838:	01 97       	sbiw	r24, 0x01	; 1
    483a:	9e 83       	std	Y+6, r25	; 0x06
    483c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483e:	8d 81       	ldd	r24, Y+5	; 0x05
    4840:	9e 81       	ldd	r25, Y+6	; 0x06
    4842:	00 97       	sbiw	r24, 0x00	; 0
    4844:	69 f7       	brne	.-38     	; 0x4820 <ESP8266_VidConnectToSrvTcp+0xd8>
    4846:	14 c0       	rjmp	.+40     	; 0x4870 <ESP8266_VidConnectToSrvTcp+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4848:	6f 81       	ldd	r22, Y+7	; 0x07
    484a:	78 85       	ldd	r23, Y+8	; 0x08
    484c:	89 85       	ldd	r24, Y+9	; 0x09
    484e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	9e 83       	std	Y+6, r25	; 0x06
    485a:	8d 83       	std	Y+5, r24	; 0x05
    485c:	8d 81       	ldd	r24, Y+5	; 0x05
    485e:	9e 81       	ldd	r25, Y+6	; 0x06
    4860:	9a 83       	std	Y+2, r25	; 0x02
    4862:	89 83       	std	Y+1, r24	; 0x01
    4864:	89 81       	ldd	r24, Y+1	; 0x01
    4866:	9a 81       	ldd	r25, Y+2	; 0x02
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <ESP8266_VidConnectToSrvTcp+0x120>
    486c:	9a 83       	std	Y+2, r25	; 0x02
    486e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );

}
    4870:	62 96       	adiw	r28, 0x12	; 18
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	08 95       	ret

00004882 <ESP8266_VidSendHB>:

void ESP8266_VidSendHB(u8 Copy_u8HB)
{
    4882:	df 93       	push	r29
    4884:	cf 93       	push	r28
    4886:	cd b7       	in	r28, 0x3d	; 61
    4888:	de b7       	in	r29, 0x3e	; 62
    488a:	ab 97       	sbiw	r28, 0x2b	; 43
    488c:	0f b6       	in	r0, 0x3f	; 63
    488e:	f8 94       	cli
    4890:	de bf       	out	0x3e, r29	; 62
    4892:	0f be       	out	0x3f, r0	; 63
    4894:	cd bf       	out	0x3d, r28	; 61
    4896:	8b a7       	std	Y+43, r24	; 0x2b
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    4898:	8c ed       	ldi	r24, 0xDC	; 220
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	2c ee       	ldi	r18, 0xEC	; 236
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	b9 01       	movw	r22, r18
    48a2:	0e 94 a4 23 	call	0x4748	; 0x4748 <ESP8266_VidConnectToSrvTcp>
	if(((Copy_u8HB/10)/10)==0)
    48a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    48a8:	84 36       	cpi	r24, 0x64	; 100
    48aa:	28 f4       	brcc	.+10     	; 0x48b6 <ESP8266_VidSendHB+0x34>
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=59\r\n" );
    48ac:	8f ee       	ldi	r24, 0xEF	; 239
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <ESP8266_VidSendHB+0x3c>
	}
	else
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=60\r\n" );
    48b6:	8f ef       	ldi	r24, 0xFF	; 255
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    48be:	80 e0       	ldi	r24, 0x00	; 0
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	a8 ec       	ldi	r26, 0xC8	; 200
    48c4:	b2 e4       	ldi	r27, 0x42	; 66
    48c6:	8f a3       	std	Y+39, r24	; 0x27
    48c8:	98 a7       	std	Y+40, r25	; 0x28
    48ca:	a9 a7       	std	Y+41, r26	; 0x29
    48cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ce:	6f a1       	ldd	r22, Y+39	; 0x27
    48d0:	78 a5       	ldd	r23, Y+40	; 0x28
    48d2:	89 a5       	ldd	r24, Y+41	; 0x29
    48d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	4a ef       	ldi	r20, 0xFA	; 250
    48dc:	54 e4       	ldi	r21, 0x44	; 68
    48de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	8b a3       	std	Y+35, r24	; 0x23
    48e8:	9c a3       	std	Y+36, r25	; 0x24
    48ea:	ad a3       	std	Y+37, r26	; 0x25
    48ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48ee:	6b a1       	ldd	r22, Y+35	; 0x23
    48f0:	7c a1       	ldd	r23, Y+36	; 0x24
    48f2:	8d a1       	ldd	r24, Y+37	; 0x25
    48f4:	9e a1       	ldd	r25, Y+38	; 0x26
    48f6:	20 e0       	ldi	r18, 0x00	; 0
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	40 e8       	ldi	r20, 0x80	; 128
    48fc:	5f e3       	ldi	r21, 0x3F	; 63
    48fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4902:	88 23       	and	r24, r24
    4904:	2c f4       	brge	.+10     	; 0x4910 <ESP8266_VidSendHB+0x8e>
		__ticks = 1;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	9a a3       	std	Y+34, r25	; 0x22
    490c:	89 a3       	std	Y+33, r24	; 0x21
    490e:	3f c0       	rjmp	.+126    	; 0x498e <ESP8266_VidSendHB+0x10c>
	else if (__tmp > 65535)
    4910:	6b a1       	ldd	r22, Y+35	; 0x23
    4912:	7c a1       	ldd	r23, Y+36	; 0x24
    4914:	8d a1       	ldd	r24, Y+37	; 0x25
    4916:	9e a1       	ldd	r25, Y+38	; 0x26
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	3f ef       	ldi	r19, 0xFF	; 255
    491c:	4f e7       	ldi	r20, 0x7F	; 127
    491e:	57 e4       	ldi	r21, 0x47	; 71
    4920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4924:	18 16       	cp	r1, r24
    4926:	4c f5       	brge	.+82     	; 0x497a <ESP8266_VidSendHB+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4928:	6f a1       	ldd	r22, Y+39	; 0x27
    492a:	78 a5       	ldd	r23, Y+40	; 0x28
    492c:	89 a5       	ldd	r24, Y+41	; 0x29
    492e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	40 e2       	ldi	r20, 0x20	; 32
    4936:	51 e4       	ldi	r21, 0x41	; 65
    4938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    493c:	dc 01       	movw	r26, r24
    493e:	cb 01       	movw	r24, r22
    4940:	bc 01       	movw	r22, r24
    4942:	cd 01       	movw	r24, r26
    4944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	9a a3       	std	Y+34, r25	; 0x22
    494e:	89 a3       	std	Y+33, r24	; 0x21
    4950:	0f c0       	rjmp	.+30     	; 0x4970 <ESP8266_VidSendHB+0xee>
    4952:	88 ec       	ldi	r24, 0xC8	; 200
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	98 a3       	std	Y+32, r25	; 0x20
    4958:	8f 8f       	std	Y+31, r24	; 0x1f
    495a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    495c:	98 a1       	ldd	r25, Y+32	; 0x20
    495e:	01 97       	sbiw	r24, 0x01	; 1
    4960:	f1 f7       	brne	.-4      	; 0x495e <ESP8266_VidSendHB+0xdc>
    4962:	98 a3       	std	Y+32, r25	; 0x20
    4964:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4966:	89 a1       	ldd	r24, Y+33	; 0x21
    4968:	9a a1       	ldd	r25, Y+34	; 0x22
    496a:	01 97       	sbiw	r24, 0x01	; 1
    496c:	9a a3       	std	Y+34, r25	; 0x22
    496e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4970:	89 a1       	ldd	r24, Y+33	; 0x21
    4972:	9a a1       	ldd	r25, Y+34	; 0x22
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	69 f7       	brne	.-38     	; 0x4952 <ESP8266_VidSendHB+0xd0>
    4978:	14 c0       	rjmp	.+40     	; 0x49a2 <ESP8266_VidSendHB+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    497a:	6b a1       	ldd	r22, Y+35	; 0x23
    497c:	7c a1       	ldd	r23, Y+36	; 0x24
    497e:	8d a1       	ldd	r24, Y+37	; 0x25
    4980:	9e a1       	ldd	r25, Y+38	; 0x26
    4982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	9a a3       	std	Y+34, r25	; 0x22
    498c:	89 a3       	std	Y+33, r24	; 0x21
    498e:	89 a1       	ldd	r24, Y+33	; 0x21
    4990:	9a a1       	ldd	r25, Y+34	; 0x22
    4992:	9e 8f       	std	Y+30, r25	; 0x1e
    4994:	8d 8f       	std	Y+29, r24	; 0x1d
    4996:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4998:	9e 8d       	ldd	r25, Y+30	; 0x1e
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	f1 f7       	brne	.-4      	; 0x499a <ESP8266_VidSendHB+0x118>
    499e:	9e 8f       	std	Y+30, r25	; 0x1e
    49a0:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/TransmitterHB.php?data=");
    49a2:	8f e0       	ldi	r24, 0x0F	; 15
    49a4:	91 e0       	ldi	r25, 0x01	; 1
    49a6:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendInteger(Copy_u8HB);
    49aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    49ac:	88 2f       	mov	r24, r24
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 36 28 	call	0x506c	; 0x506c <USART_SendInteger>
	USART_SendStr((u8 *)"\r\n");
    49b4:	89 ed       	ldi	r24, 0xD9	; 217
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	aa e7       	ldi	r26, 0x7A	; 122
    49c2:	b4 e4       	ldi	r27, 0x44	; 68
    49c4:	89 8f       	std	Y+25, r24	; 0x19
    49c6:	9a 8f       	std	Y+26, r25	; 0x1a
    49c8:	ab 8f       	std	Y+27, r26	; 0x1b
    49ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49cc:	69 8d       	ldd	r22, Y+25	; 0x19
    49ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	4a ef       	ldi	r20, 0xFA	; 250
    49da:	54 e4       	ldi	r21, 0x44	; 68
    49dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e0:	dc 01       	movw	r26, r24
    49e2:	cb 01       	movw	r24, r22
    49e4:	8d 8b       	std	Y+21, r24	; 0x15
    49e6:	9e 8b       	std	Y+22, r25	; 0x16
    49e8:	af 8b       	std	Y+23, r26	; 0x17
    49ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49ec:	6d 89       	ldd	r22, Y+21	; 0x15
    49ee:	7e 89       	ldd	r23, Y+22	; 0x16
    49f0:	8f 89       	ldd	r24, Y+23	; 0x17
    49f2:	98 8d       	ldd	r25, Y+24	; 0x18
    49f4:	20 e0       	ldi	r18, 0x00	; 0
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	40 e8       	ldi	r20, 0x80	; 128
    49fa:	5f e3       	ldi	r21, 0x3F	; 63
    49fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a00:	88 23       	and	r24, r24
    4a02:	2c f4       	brge	.+10     	; 0x4a0e <ESP8266_VidSendHB+0x18c>
		__ticks = 1;
    4a04:	81 e0       	ldi	r24, 0x01	; 1
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	9c 8b       	std	Y+20, r25	; 0x14
    4a0a:	8b 8b       	std	Y+19, r24	; 0x13
    4a0c:	3f c0       	rjmp	.+126    	; 0x4a8c <ESP8266_VidSendHB+0x20a>
	else if (__tmp > 65535)
    4a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a10:	7e 89       	ldd	r23, Y+22	; 0x16
    4a12:	8f 89       	ldd	r24, Y+23	; 0x17
    4a14:	98 8d       	ldd	r25, Y+24	; 0x18
    4a16:	20 e0       	ldi	r18, 0x00	; 0
    4a18:	3f ef       	ldi	r19, 0xFF	; 255
    4a1a:	4f e7       	ldi	r20, 0x7F	; 127
    4a1c:	57 e4       	ldi	r21, 0x47	; 71
    4a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a22:	18 16       	cp	r1, r24
    4a24:	4c f5       	brge	.+82     	; 0x4a78 <ESP8266_VidSendHB+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a26:	69 8d       	ldd	r22, Y+25	; 0x19
    4a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e2       	ldi	r20, 0x20	; 32
    4a34:	51 e4       	ldi	r21, 0x41	; 65
    4a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	bc 01       	movw	r22, r24
    4a40:	cd 01       	movw	r24, r26
    4a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a46:	dc 01       	movw	r26, r24
    4a48:	cb 01       	movw	r24, r22
    4a4a:	9c 8b       	std	Y+20, r25	; 0x14
    4a4c:	8b 8b       	std	Y+19, r24	; 0x13
    4a4e:	0f c0       	rjmp	.+30     	; 0x4a6e <ESP8266_VidSendHB+0x1ec>
    4a50:	88 ec       	ldi	r24, 0xC8	; 200
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	9a 8b       	std	Y+18, r25	; 0x12
    4a56:	89 8b       	std	Y+17, r24	; 0x11
    4a58:	89 89       	ldd	r24, Y+17	; 0x11
    4a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a5c:	01 97       	sbiw	r24, 0x01	; 1
    4a5e:	f1 f7       	brne	.-4      	; 0x4a5c <ESP8266_VidSendHB+0x1da>
    4a60:	9a 8b       	std	Y+18, r25	; 0x12
    4a62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a64:	8b 89       	ldd	r24, Y+19	; 0x13
    4a66:	9c 89       	ldd	r25, Y+20	; 0x14
    4a68:	01 97       	sbiw	r24, 0x01	; 1
    4a6a:	9c 8b       	std	Y+20, r25	; 0x14
    4a6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a70:	9c 89       	ldd	r25, Y+20	; 0x14
    4a72:	00 97       	sbiw	r24, 0x00	; 0
    4a74:	69 f7       	brne	.-38     	; 0x4a50 <ESP8266_VidSendHB+0x1ce>
    4a76:	14 c0       	rjmp	.+40     	; 0x4aa0 <ESP8266_VidSendHB+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a78:	6d 89       	ldd	r22, Y+21	; 0x15
    4a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a84:	dc 01       	movw	r26, r24
    4a86:	cb 01       	movw	r24, r22
    4a88:	9c 8b       	std	Y+20, r25	; 0x14
    4a8a:	8b 8b       	std	Y+19, r24	; 0x13
    4a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a90:	98 8b       	std	Y+16, r25	; 0x10
    4a92:	8f 87       	std	Y+15, r24	; 0x0f
    4a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a96:	98 89       	ldd	r25, Y+16	; 0x10
    4a98:	01 97       	sbiw	r24, 0x01	; 1
    4a9a:	f1 f7       	brne	.-4      	; 0x4a98 <ESP8266_VidSendHB+0x216>
    4a9c:	98 8b       	std	Y+16, r25	; 0x10
    4a9e:	8f 87       	std	Y+15, r24	; 0x0f
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	aa e7       	ldi	r26, 0x7A	; 122
    4aa6:	b4 e4       	ldi	r27, 0x44	; 68
    4aa8:	8b 87       	std	Y+11, r24	; 0x0b
    4aaa:	9c 87       	std	Y+12, r25	; 0x0c
    4aac:	ad 87       	std	Y+13, r26	; 0x0d
    4aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	4a ef       	ldi	r20, 0xFA	; 250
    4abe:	54 e4       	ldi	r21, 0x44	; 68
    4ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	8f 83       	std	Y+7, r24	; 0x07
    4aca:	98 87       	std	Y+8, r25	; 0x08
    4acc:	a9 87       	std	Y+9, r26	; 0x09
    4ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad2:	78 85       	ldd	r23, Y+8	; 0x08
    4ad4:	89 85       	ldd	r24, Y+9	; 0x09
    4ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	40 e8       	ldi	r20, 0x80	; 128
    4ade:	5f e3       	ldi	r21, 0x3F	; 63
    4ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ae4:	88 23       	and	r24, r24
    4ae6:	2c f4       	brge	.+10     	; 0x4af2 <ESP8266_VidSendHB+0x270>
		__ticks = 1;
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	9e 83       	std	Y+6, r25	; 0x06
    4aee:	8d 83       	std	Y+5, r24	; 0x05
    4af0:	3f c0       	rjmp	.+126    	; 0x4b70 <ESP8266_VidSendHB+0x2ee>
	else if (__tmp > 65535)
    4af2:	6f 81       	ldd	r22, Y+7	; 0x07
    4af4:	78 85       	ldd	r23, Y+8	; 0x08
    4af6:	89 85       	ldd	r24, Y+9	; 0x09
    4af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	3f ef       	ldi	r19, 0xFF	; 255
    4afe:	4f e7       	ldi	r20, 0x7F	; 127
    4b00:	57 e4       	ldi	r21, 0x47	; 71
    4b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b06:	18 16       	cp	r1, r24
    4b08:	4c f5       	brge	.+82     	; 0x4b5c <ESP8266_VidSendHB+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e2       	ldi	r20, 0x20	; 32
    4b18:	51 e4       	ldi	r21, 0x41	; 65
    4b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	bc 01       	movw	r22, r24
    4b24:	cd 01       	movw	r24, r26
    4b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	9e 83       	std	Y+6, r25	; 0x06
    4b30:	8d 83       	std	Y+5, r24	; 0x05
    4b32:	0f c0       	rjmp	.+30     	; 0x4b52 <ESP8266_VidSendHB+0x2d0>
    4b34:	88 ec       	ldi	r24, 0xC8	; 200
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	9c 83       	std	Y+4, r25	; 0x04
    4b3a:	8b 83       	std	Y+3, r24	; 0x03
    4b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	f1 f7       	brne	.-4      	; 0x4b40 <ESP8266_VidSendHB+0x2be>
    4b44:	9c 83       	std	Y+4, r25	; 0x04
    4b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b48:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	9e 83       	std	Y+6, r25	; 0x06
    4b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b52:	8d 81       	ldd	r24, Y+5	; 0x05
    4b54:	9e 81       	ldd	r25, Y+6	; 0x06
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	69 f7       	brne	.-38     	; 0x4b34 <ESP8266_VidSendHB+0x2b2>
    4b5a:	14 c0       	rjmp	.+40     	; 0x4b84 <ESP8266_VidSendHB+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b5e:	78 85       	ldd	r23, Y+8	; 0x08
    4b60:	89 85       	ldd	r24, Y+9	; 0x09
    4b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	9e 83       	std	Y+6, r25	; 0x06
    4b6e:	8d 83       	std	Y+5, r24	; 0x05
    4b70:	8d 81       	ldd	r24, Y+5	; 0x05
    4b72:	9e 81       	ldd	r25, Y+6	; 0x06
    4b74:	9a 83       	std	Y+2, r25	; 0x02
    4b76:	89 83       	std	Y+1, r24	; 0x01
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7c:	01 97       	sbiw	r24, 0x01	; 1
    4b7e:	f1 f7       	brne	.-4      	; 0x4b7c <ESP8266_VidSendHB+0x2fa>
    4b80:	9a 83       	std	Y+2, r25	; 0x02
    4b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	_delay_ms( 1000 );


}
    4b84:	ab 96       	adiw	r28, 0x2b	; 43
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	cd bf       	out	0x3d, r28	; 61
    4b90:	cf 91       	pop	r28
    4b92:	df 91       	pop	r29
    4b94:	08 95       	ret

00004b96 <ESP8266_VidSendPR>:
void ESP8266_VidSendPR(u8 Copy_u8PR)
{
    4b96:	df 93       	push	r29
    4b98:	cf 93       	push	r28
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
    4b9e:	ab 97       	sbiw	r28, 0x2b	; 43
    4ba0:	0f b6       	in	r0, 0x3f	; 63
    4ba2:	f8 94       	cli
    4ba4:	de bf       	out	0x3e, r29	; 62
    4ba6:	0f be       	out	0x3f, r0	; 63
    4ba8:	cd bf       	out	0x3d, r28	; 61
    4baa:	8b a7       	std	Y+43, r24	; 0x2b
	ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    4bac:	8c ed       	ldi	r24, 0xDC	; 220
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	2c ee       	ldi	r18, 0xEC	; 236
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	b9 01       	movw	r22, r18
    4bb6:	0e 94 a4 23 	call	0x4748	; 0x4748 <ESP8266_VidConnectToSrvTcp>
	if(((Copy_u8PR/10)/10)==0)
    4bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bbc:	84 36       	cpi	r24, 0x64	; 100
    4bbe:	28 f4       	brcc	.+10     	; 0x4bca <ESP8266_VidSendPR+0x34>
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=59\r\n" );
    4bc0:	8f ee       	ldi	r24, 0xEF	; 239
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    4bc8:	04 c0       	rjmp	.+8      	; 0x4bd2 <ESP8266_VidSendPR+0x3c>
	}
	else
	{
		USART_SendStr( (u8 *) "AT+CIPSEND=60\r\n" );
    4bca:	8f ef       	ldi	r24, 0xFF	; 255
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    4bd2:	80 e0       	ldi	r24, 0x00	; 0
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	a8 ec       	ldi	r26, 0xC8	; 200
    4bd8:	b2 e4       	ldi	r27, 0x42	; 66
    4bda:	8f a3       	std	Y+39, r24	; 0x27
    4bdc:	98 a7       	std	Y+40, r25	; 0x28
    4bde:	a9 a7       	std	Y+41, r26	; 0x29
    4be0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be2:	6f a1       	ldd	r22, Y+39	; 0x27
    4be4:	78 a5       	ldd	r23, Y+40	; 0x28
    4be6:	89 a5       	ldd	r24, Y+41	; 0x29
    4be8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	4a ef       	ldi	r20, 0xFA	; 250
    4bf0:	54 e4       	ldi	r21, 0x44	; 68
    4bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf6:	dc 01       	movw	r26, r24
    4bf8:	cb 01       	movw	r24, r22
    4bfa:	8b a3       	std	Y+35, r24	; 0x23
    4bfc:	9c a3       	std	Y+36, r25	; 0x24
    4bfe:	ad a3       	std	Y+37, r26	; 0x25
    4c00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c02:	6b a1       	ldd	r22, Y+35	; 0x23
    4c04:	7c a1       	ldd	r23, Y+36	; 0x24
    4c06:	8d a1       	ldd	r24, Y+37	; 0x25
    4c08:	9e a1       	ldd	r25, Y+38	; 0x26
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	40 e8       	ldi	r20, 0x80	; 128
    4c10:	5f e3       	ldi	r21, 0x3F	; 63
    4c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c16:	88 23       	and	r24, r24
    4c18:	2c f4       	brge	.+10     	; 0x4c24 <ESP8266_VidSendPR+0x8e>
		__ticks = 1;
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	9a a3       	std	Y+34, r25	; 0x22
    4c20:	89 a3       	std	Y+33, r24	; 0x21
    4c22:	3f c0       	rjmp	.+126    	; 0x4ca2 <ESP8266_VidSendPR+0x10c>
	else if (__tmp > 65535)
    4c24:	6b a1       	ldd	r22, Y+35	; 0x23
    4c26:	7c a1       	ldd	r23, Y+36	; 0x24
    4c28:	8d a1       	ldd	r24, Y+37	; 0x25
    4c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	3f ef       	ldi	r19, 0xFF	; 255
    4c30:	4f e7       	ldi	r20, 0x7F	; 127
    4c32:	57 e4       	ldi	r21, 0x47	; 71
    4c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c38:	18 16       	cp	r1, r24
    4c3a:	4c f5       	brge	.+82     	; 0x4c8e <ESP8266_VidSendPR+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c3c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c3e:	78 a5       	ldd	r23, Y+40	; 0x28
    4c40:	89 a5       	ldd	r24, Y+41	; 0x29
    4c42:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	40 e2       	ldi	r20, 0x20	; 32
    4c4a:	51 e4       	ldi	r21, 0x41	; 65
    4c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	bc 01       	movw	r22, r24
    4c56:	cd 01       	movw	r24, r26
    4c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	cb 01       	movw	r24, r22
    4c60:	9a a3       	std	Y+34, r25	; 0x22
    4c62:	89 a3       	std	Y+33, r24	; 0x21
    4c64:	0f c0       	rjmp	.+30     	; 0x4c84 <ESP8266_VidSendPR+0xee>
    4c66:	88 ec       	ldi	r24, 0xC8	; 200
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	98 a3       	std	Y+32, r25	; 0x20
    4c6c:	8f 8f       	std	Y+31, r24	; 0x1f
    4c6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c70:	98 a1       	ldd	r25, Y+32	; 0x20
    4c72:	01 97       	sbiw	r24, 0x01	; 1
    4c74:	f1 f7       	brne	.-4      	; 0x4c72 <ESP8266_VidSendPR+0xdc>
    4c76:	98 a3       	std	Y+32, r25	; 0x20
    4c78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c7e:	01 97       	sbiw	r24, 0x01	; 1
    4c80:	9a a3       	std	Y+34, r25	; 0x22
    4c82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c84:	89 a1       	ldd	r24, Y+33	; 0x21
    4c86:	9a a1       	ldd	r25, Y+34	; 0x22
    4c88:	00 97       	sbiw	r24, 0x00	; 0
    4c8a:	69 f7       	brne	.-38     	; 0x4c66 <ESP8266_VidSendPR+0xd0>
    4c8c:	14 c0       	rjmp	.+40     	; 0x4cb6 <ESP8266_VidSendPR+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    4c90:	7c a1       	ldd	r23, Y+36	; 0x24
    4c92:	8d a1       	ldd	r24, Y+37	; 0x25
    4c94:	9e a1       	ldd	r25, Y+38	; 0x26
    4c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	9a a3       	std	Y+34, r25	; 0x22
    4ca0:	89 a3       	std	Y+33, r24	; 0x21
    4ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ca8:	8d 8f       	std	Y+29, r24	; 0x1d
    4caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cae:	01 97       	sbiw	r24, 0x01	; 1
    4cb0:	f1 f7       	brne	.-4      	; 0x4cae <ESP8266_VidSendPR+0x118>
    4cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    4cb4:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	_delay_ms( 100 );

	USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/TransmitterPR.php?data=");
    4cb6:	87 e4       	ldi	r24, 0x47	; 71
    4cb8:	91 e0       	ldi	r25, 0x01	; 1
    4cba:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
	USART_SendInteger(Copy_u8PR);
    4cbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cc0:	88 2f       	mov	r24, r24
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 36 28 	call	0x506c	; 0x506c <USART_SendInteger>
	USART_SendStr((u8 *)"\r\n");
    4cc8:	89 ed       	ldi	r24, 0xD9	; 217
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	0e 94 0d 28 	call	0x501a	; 0x501a <USART_SendStr>
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	aa e7       	ldi	r26, 0x7A	; 122
    4cd6:	b4 e4       	ldi	r27, 0x44	; 68
    4cd8:	89 8f       	std	Y+25, r24	; 0x19
    4cda:	9a 8f       	std	Y+26, r25	; 0x1a
    4cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    4cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    4ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	4a ef       	ldi	r20, 0xFA	; 250
    4cee:	54 e4       	ldi	r21, 0x44	; 68
    4cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	8d 8b       	std	Y+21, r24	; 0x15
    4cfa:	9e 8b       	std	Y+22, r25	; 0x16
    4cfc:	af 8b       	std	Y+23, r26	; 0x17
    4cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d00:	6d 89       	ldd	r22, Y+21	; 0x15
    4d02:	7e 89       	ldd	r23, Y+22	; 0x16
    4d04:	8f 89       	ldd	r24, Y+23	; 0x17
    4d06:	98 8d       	ldd	r25, Y+24	; 0x18
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e8       	ldi	r20, 0x80	; 128
    4d0e:	5f e3       	ldi	r21, 0x3F	; 63
    4d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d14:	88 23       	and	r24, r24
    4d16:	2c f4       	brge	.+10     	; 0x4d22 <ESP8266_VidSendPR+0x18c>
		__ticks = 1;
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	9c 8b       	std	Y+20, r25	; 0x14
    4d1e:	8b 8b       	std	Y+19, r24	; 0x13
    4d20:	3f c0       	rjmp	.+126    	; 0x4da0 <ESP8266_VidSendPR+0x20a>
	else if (__tmp > 65535)
    4d22:	6d 89       	ldd	r22, Y+21	; 0x15
    4d24:	7e 89       	ldd	r23, Y+22	; 0x16
    4d26:	8f 89       	ldd	r24, Y+23	; 0x17
    4d28:	98 8d       	ldd	r25, Y+24	; 0x18
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	3f ef       	ldi	r19, 0xFF	; 255
    4d2e:	4f e7       	ldi	r20, 0x7F	; 127
    4d30:	57 e4       	ldi	r21, 0x47	; 71
    4d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d36:	18 16       	cp	r1, r24
    4d38:	4c f5       	brge	.+82     	; 0x4d8c <ESP8266_VidSendPR+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	40 e2       	ldi	r20, 0x20	; 32
    4d48:	51 e4       	ldi	r21, 0x41	; 65
    4d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d4e:	dc 01       	movw	r26, r24
    4d50:	cb 01       	movw	r24, r22
    4d52:	bc 01       	movw	r22, r24
    4d54:	cd 01       	movw	r24, r26
    4d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	cb 01       	movw	r24, r22
    4d5e:	9c 8b       	std	Y+20, r25	; 0x14
    4d60:	8b 8b       	std	Y+19, r24	; 0x13
    4d62:	0f c0       	rjmp	.+30     	; 0x4d82 <ESP8266_VidSendPR+0x1ec>
    4d64:	88 ec       	ldi	r24, 0xC8	; 200
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	9a 8b       	std	Y+18, r25	; 0x12
    4d6a:	89 8b       	std	Y+17, r24	; 0x11
    4d6c:	89 89       	ldd	r24, Y+17	; 0x11
    4d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    4d70:	01 97       	sbiw	r24, 0x01	; 1
    4d72:	f1 f7       	brne	.-4      	; 0x4d70 <ESP8266_VidSendPR+0x1da>
    4d74:	9a 8b       	std	Y+18, r25	; 0x12
    4d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d78:	8b 89       	ldd	r24, Y+19	; 0x13
    4d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	9c 8b       	std	Y+20, r25	; 0x14
    4d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d82:	8b 89       	ldd	r24, Y+19	; 0x13
    4d84:	9c 89       	ldd	r25, Y+20	; 0x14
    4d86:	00 97       	sbiw	r24, 0x00	; 0
    4d88:	69 f7       	brne	.-38     	; 0x4d64 <ESP8266_VidSendPR+0x1ce>
    4d8a:	14 c0       	rjmp	.+40     	; 0x4db4 <ESP8266_VidSendPR+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d90:	8f 89       	ldd	r24, Y+23	; 0x17
    4d92:	98 8d       	ldd	r25, Y+24	; 0x18
    4d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	9c 8b       	std	Y+20, r25	; 0x14
    4d9e:	8b 8b       	std	Y+19, r24	; 0x13
    4da0:	8b 89       	ldd	r24, Y+19	; 0x13
    4da2:	9c 89       	ldd	r25, Y+20	; 0x14
    4da4:	98 8b       	std	Y+16, r25	; 0x10
    4da6:	8f 87       	std	Y+15, r24	; 0x0f
    4da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4daa:	98 89       	ldd	r25, Y+16	; 0x10
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	f1 f7       	brne	.-4      	; 0x4dac <ESP8266_VidSendPR+0x216>
    4db0:	98 8b       	std	Y+16, r25	; 0x10
    4db2:	8f 87       	std	Y+15, r24	; 0x0f
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	aa e7       	ldi	r26, 0x7A	; 122
    4dba:	b4 e4       	ldi	r27, 0x44	; 68
    4dbc:	8b 87       	std	Y+11, r24	; 0x0b
    4dbe:	9c 87       	std	Y+12, r25	; 0x0c
    4dc0:	ad 87       	std	Y+13, r26	; 0x0d
    4dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	4a ef       	ldi	r20, 0xFA	; 250
    4dd2:	54 e4       	ldi	r21, 0x44	; 68
    4dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	8f 83       	std	Y+7, r24	; 0x07
    4dde:	98 87       	std	Y+8, r25	; 0x08
    4de0:	a9 87       	std	Y+9, r26	; 0x09
    4de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4de4:	6f 81       	ldd	r22, Y+7	; 0x07
    4de6:	78 85       	ldd	r23, Y+8	; 0x08
    4de8:	89 85       	ldd	r24, Y+9	; 0x09
    4dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e8       	ldi	r20, 0x80	; 128
    4df2:	5f e3       	ldi	r21, 0x3F	; 63
    4df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4df8:	88 23       	and	r24, r24
    4dfa:	2c f4       	brge	.+10     	; 0x4e06 <ESP8266_VidSendPR+0x270>
		__ticks = 1;
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	9e 83       	std	Y+6, r25	; 0x06
    4e02:	8d 83       	std	Y+5, r24	; 0x05
    4e04:	3f c0       	rjmp	.+126    	; 0x4e84 <ESP8266_VidSendPR+0x2ee>
	else if (__tmp > 65535)
    4e06:	6f 81       	ldd	r22, Y+7	; 0x07
    4e08:	78 85       	ldd	r23, Y+8	; 0x08
    4e0a:	89 85       	ldd	r24, Y+9	; 0x09
    4e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	3f ef       	ldi	r19, 0xFF	; 255
    4e12:	4f e7       	ldi	r20, 0x7F	; 127
    4e14:	57 e4       	ldi	r21, 0x47	; 71
    4e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e1a:	18 16       	cp	r1, r24
    4e1c:	4c f5       	brge	.+82     	; 0x4e70 <ESP8266_VidSendPR+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e2       	ldi	r20, 0x20	; 32
    4e2c:	51 e4       	ldi	r21, 0x41	; 65
    4e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e32:	dc 01       	movw	r26, r24
    4e34:	cb 01       	movw	r24, r22
    4e36:	bc 01       	movw	r22, r24
    4e38:	cd 01       	movw	r24, r26
    4e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3e:	dc 01       	movw	r26, r24
    4e40:	cb 01       	movw	r24, r22
    4e42:	9e 83       	std	Y+6, r25	; 0x06
    4e44:	8d 83       	std	Y+5, r24	; 0x05
    4e46:	0f c0       	rjmp	.+30     	; 0x4e66 <ESP8266_VidSendPR+0x2d0>
    4e48:	88 ec       	ldi	r24, 0xC8	; 200
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	9c 83       	std	Y+4, r25	; 0x04
    4e4e:	8b 83       	std	Y+3, r24	; 0x03
    4e50:	8b 81       	ldd	r24, Y+3	; 0x03
    4e52:	9c 81       	ldd	r25, Y+4	; 0x04
    4e54:	01 97       	sbiw	r24, 0x01	; 1
    4e56:	f1 f7       	brne	.-4      	; 0x4e54 <ESP8266_VidSendPR+0x2be>
    4e58:	9c 83       	std	Y+4, r25	; 0x04
    4e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e60:	01 97       	sbiw	r24, 0x01	; 1
    4e62:	9e 83       	std	Y+6, r25	; 0x06
    4e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e66:	8d 81       	ldd	r24, Y+5	; 0x05
    4e68:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6a:	00 97       	sbiw	r24, 0x00	; 0
    4e6c:	69 f7       	brne	.-38     	; 0x4e48 <ESP8266_VidSendPR+0x2b2>
    4e6e:	14 c0       	rjmp	.+40     	; 0x4e98 <ESP8266_VidSendPR+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e70:	6f 81       	ldd	r22, Y+7	; 0x07
    4e72:	78 85       	ldd	r23, Y+8	; 0x08
    4e74:	89 85       	ldd	r24, Y+9	; 0x09
    4e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	9e 83       	std	Y+6, r25	; 0x06
    4e82:	8d 83       	std	Y+5, r24	; 0x05
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	9e 81       	ldd	r25, Y+6	; 0x06
    4e88:	9a 83       	std	Y+2, r25	; 0x02
    4e8a:	89 83       	std	Y+1, r24	; 0x01
    4e8c:	89 81       	ldd	r24, Y+1	; 0x01
    4e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e90:	01 97       	sbiw	r24, 0x01	; 1
    4e92:	f1 f7       	brne	.-4      	; 0x4e90 <ESP8266_VidSendPR+0x2fa>
    4e94:	9a 83       	std	Y+2, r25	; 0x02
    4e96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms( 1000 );
	_delay_ms( 1000 );


}
    4e98:	ab 96       	adiw	r28, 0x2b	; 43
    4e9a:	0f b6       	in	r0, 0x3f	; 63
    4e9c:	f8 94       	cli
    4e9e:	de bf       	out	0x3e, r29	; 62
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	cd bf       	out	0x3d, r28	; 61
    4ea4:	cf 91       	pop	r28
    4ea6:	df 91       	pop	r29
    4ea8:	08 95       	ret

00004eaa <USART_inti>:
#include "USART_interface.h"
#include "USART_config.h"
#include "USART_priv.h"

void USART_inti() //initialization of USART com. protocol
{
    4eaa:	df 93       	push	r29
    4eac:	cf 93       	push	r28
    4eae:	0f 92       	push	r0
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_val=0;
    4eb4:	19 82       	std	Y+1, r1	; 0x01
		CLEAR_BIT(UCSRB,UCSZ2);
		SET_BIT(UCSRC_val,UCSZ1);
		CLEAR_BIT(UCSRC_val,UCSZ0);
		CLEAR_BIT(UCSRC_val,URSEL);
	#elif (DATA_BITS == 8)
		CLEAR_BIT(UCSRB,UCSZ2);
    4eb6:	aa e2       	ldi	r26, 0x2A	; 42
    4eb8:	b0 e0       	ldi	r27, 0x00	; 0
    4eba:	ea e2       	ldi	r30, 0x2A	; 42
    4ebc:	f0 e0       	ldi	r31, 0x00	; 0
    4ebe:	80 81       	ld	r24, Z
    4ec0:	8b 7f       	andi	r24, 0xFB	; 251
    4ec2:	8c 93       	st	X, r24
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    4ec4:	89 81       	ldd	r24, Y+1	; 0x01
    4ec6:	86 68       	ori	r24, 0x86	; 134
    4ec8:	89 83       	std	Y+1, r24	; 0x01
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	#endif

	//choosing stop bits
	#if (STOP_BITS == 1)
		CLEAR_BIT(UCSRC_val,USBS);
    4eca:	89 81       	ldd	r24, Y+1	; 0x01
    4ecc:	87 7f       	andi	r24, 0xF7	; 247
    4ece:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,USBS);
	#endif

	//choosing parity bit
	#if(PARITY_BITS == DISABLED)
		CLEAR_BIT(UCSRC_val,UPM1);
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	8f 7d       	andi	r24, 0xDF	; 223
    4ed4:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,UPM0);
    4ed6:	89 81       	ldd	r24, Y+1	; 0x01
    4ed8:	8f 7e       	andi	r24, 0xEF	; 239
    4eda:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//choosing asynchronous or synchronous
	#if SYNC_MODE
		SET_BIT(UCSRC_val,UMSEL);
	#else
		CLEAR_BIT(UCSRC_val,UMSEL);
    4edc:	89 81       	ldd	r24, Y+1	; 0x01
    4ede:	8f 7b       	andi	r24, 0xBF	; 191
    4ee0:	89 83       	std	Y+1, r24	; 0x01

	//choosing interrupts
	#if (RX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,RXCIE);
	#else
		CLEAR_BIT(UCSRB,RXCIE);
    4ee2:	aa e2       	ldi	r26, 0x2A	; 42
    4ee4:	b0 e0       	ldi	r27, 0x00	; 0
    4ee6:	ea e2       	ldi	r30, 0x2A	; 42
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	80 81       	ld	r24, Z
    4eec:	8f 77       	andi	r24, 0x7F	; 127
    4eee:	8c 93       	st	X, r24
	#endif

	#if(TX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,TXCIE);
	#else
		CLEAR_BIT(UCSRB,TXCIE);
    4ef0:	aa e2       	ldi	r26, 0x2A	; 42
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
    4ef4:	ea e2       	ldi	r30, 0x2A	; 42
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	80 81       	ld	r24, Z
    4efa:	8f 7b       	andi	r24, 0xBF	; 191
    4efc:	8c 93       	st	X, r24
	#endif

	#if(UDR_EMPTY_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,UDRIE);
	#else
		CLEAR_BIT(UCSRB,UDRIE);
    4efe:	aa e2       	ldi	r26, 0x2A	; 42
    4f00:	b0 e0       	ldi	r27, 0x00	; 0
    4f02:	ea e2       	ldi	r30, 0x2A	; 42
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	80 81       	ld	r24, Z
    4f08:	8f 7d       	andi	r24, 0xDF	; 223
    4f0a:	8c 93       	st	X, r24
	#endif

	//enabling Tx and Rx
	#if(RX_ENABLE)
		SET_BIT(UCSRB,RXEN);
    4f0c:	aa e2       	ldi	r26, 0x2A	; 42
    4f0e:	b0 e0       	ldi	r27, 0x00	; 0
    4f10:	ea e2       	ldi	r30, 0x2A	; 42
    4f12:	f0 e0       	ldi	r31, 0x00	; 0
    4f14:	80 81       	ld	r24, Z
    4f16:	80 61       	ori	r24, 0x10	; 16
    4f18:	8c 93       	st	X, r24
	#else
		CLEAR_BIT(UCSRB,RXEN);
	#endif

	#if(TX_ENABLE)
		SET_BIT(UCSRB,TXEN);
    4f1a:	aa e2       	ldi	r26, 0x2A	; 42
    4f1c:	b0 e0       	ldi	r27, 0x00	; 0
    4f1e:	ea e2       	ldi	r30, 0x2A	; 42
    4f20:	f0 e0       	ldi	r31, 0x00	; 0
    4f22:	80 81       	ld	r24, Z
    4f24:	88 60       	ori	r24, 0x08	; 8
    4f26:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,TXEN);
	#endif

	//choosing baud rate

	UBRRL=51;
    4f28:	e9 e2       	ldi	r30, 0x29	; 41
    4f2a:	f0 e0       	ldi	r31, 0x00	; 0
    4f2c:	83 e3       	ldi	r24, 0x33	; 51
    4f2e:	80 83       	st	Z, r24
	UBRRH=0;
    4f30:	e0 e4       	ldi	r30, 0x40	; 64
    4f32:	f0 e0       	ldi	r31, 0x00	; 0
    4f34:	10 82       	st	Z, r1

	//assigning UCSRC value into UCSRC register
	UCSRC=UCSRC_val;
    4f36:	e0 e4       	ldi	r30, 0x40	; 64
    4f38:	f0 e0       	ldi	r31, 0x00	; 0
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
    4f3c:	80 83       	st	Z, r24
}
    4f3e:	0f 90       	pop	r0
    4f40:	cf 91       	pop	r28
    4f42:	df 91       	pop	r29
    4f44:	08 95       	ret

00004f46 <USART_ReceiveDataPolling>:


u8 USART_ReceiveDataPolling() // receive data polling on RXC flag
{
    4f46:	df 93       	push	r29
    4f48:	cf 93       	push	r28
    4f4a:	cd b7       	in	r28, 0x3d	; 61
    4f4c:	de b7       	in	r29, 0x3e	; 62
	//waiting for data to be sent and UDR Rx buffer to be filled
	while((GET_BIT(UCSRA,RXC))==0);
    4f4e:	eb e2       	ldi	r30, 0x2B	; 43
    4f50:	f0 e0       	ldi	r31, 0x00	; 0
    4f52:	80 81       	ld	r24, Z
    4f54:	88 23       	and	r24, r24
    4f56:	dc f7       	brge	.-10     	; 0x4f4e <USART_ReceiveDataPolling+0x8>

	//returning data
	return UDR;
    4f58:	ec e2       	ldi	r30, 0x2C	; 44
    4f5a:	f0 e0       	ldi	r31, 0x00	; 0
    4f5c:	80 81       	ld	r24, Z
}
    4f5e:	cf 91       	pop	r28
    4f60:	df 91       	pop	r29
    4f62:	08 95       	ret

00004f64 <USART_ReceiveDataINT>:

u8 USART_ReceiveDataINT() // receive data with RXC interrupt, WARNING ENABLE RXC INT
{
    4f64:	df 93       	push	r29
    4f66:	cf 93       	push	r28
    4f68:	cd b7       	in	r28, 0x3d	; 61
    4f6a:	de b7       	in	r29, 0x3e	; 62
	//returning data
	return UDR;
    4f6c:	ec e2       	ldi	r30, 0x2C	; 44
    4f6e:	f0 e0       	ldi	r31, 0x00	; 0
    4f70:	80 81       	ld	r24, Z
}
    4f72:	cf 91       	pop	r28
    4f74:	df 91       	pop	r29
    4f76:	08 95       	ret

00004f78 <USART_SendDataPolling>:


void USART_SendDataPolling(u8 data) // send data polling on UDRE flag
{
    4f78:	df 93       	push	r29
    4f7a:	cf 93       	push	r28
    4f7c:	0f 92       	push	r0
    4f7e:	cd b7       	in	r28, 0x3d	; 61
    4f80:	de b7       	in	r29, 0x3e	; 62
    4f82:	89 83       	std	Y+1, r24	; 0x01
	//waiting to UDR Tx buffer to be empty
	while((GET_BIT(UCSRA,UDRE))==0);
    4f84:	eb e2       	ldi	r30, 0x2B	; 43
    4f86:	f0 e0       	ldi	r31, 0x00	; 0
    4f88:	80 81       	ld	r24, Z
    4f8a:	82 95       	swap	r24
    4f8c:	86 95       	lsr	r24
    4f8e:	87 70       	andi	r24, 0x07	; 7
    4f90:	88 2f       	mov	r24, r24
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	81 70       	andi	r24, 0x01	; 1
    4f96:	90 70       	andi	r25, 0x00	; 0
    4f98:	00 97       	sbiw	r24, 0x00	; 0
    4f9a:	a1 f3       	breq	.-24     	; 0x4f84 <USART_SendDataPolling+0xc>

	//sending data
	UDR=data;
    4f9c:	ec e2       	ldi	r30, 0x2C	; 44
    4f9e:	f0 e0       	ldi	r31, 0x00	; 0
    4fa0:	89 81       	ldd	r24, Y+1	; 0x01
    4fa2:	80 83       	st	Z, r24
}
    4fa4:	0f 90       	pop	r0
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	08 95       	ret

00004fac <USART_ReceieveStr>:

void USART_ReceieveStr(u8* str_data, u8 number) // receive number of elements
{
    4fac:	0f 93       	push	r16
    4fae:	1f 93       	push	r17
    4fb0:	df 93       	push	r29
    4fb2:	cf 93       	push	r28
    4fb4:	00 d0       	rcall	.+0      	; 0x4fb6 <USART_ReceieveStr+0xa>
    4fb6:	00 d0       	rcall	.+0      	; 0x4fb8 <USART_ReceieveStr+0xc>
    4fb8:	cd b7       	in	r28, 0x3d	; 61
    4fba:	de b7       	in	r29, 0x3e	; 62
    4fbc:	9b 83       	std	Y+3, r25	; 0x03
    4fbe:	8a 83       	std	Y+2, r24	; 0x02
    4fc0:	6c 83       	std	Y+4, r22	; 0x04
	u8 counter;
	for(counter=0;counter<number;counter++)
    4fc2:	19 82       	std	Y+1, r1	; 0x01
    4fc4:	0f c0       	rjmp	.+30     	; 0x4fe4 <USART_ReceieveStr+0x38>
	{
		str_data[counter]=USART_ReceiveDataPolling();
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
    4fc8:	28 2f       	mov	r18, r24
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fce:	9b 81       	ldd	r25, Y+3	; 0x03
    4fd0:	8c 01       	movw	r16, r24
    4fd2:	02 0f       	add	r16, r18
    4fd4:	13 1f       	adc	r17, r19
    4fd6:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <USART_ReceiveDataPolling>
    4fda:	f8 01       	movw	r30, r16
    4fdc:	80 83       	st	Z, r24
}

void USART_ReceieveStr(u8* str_data, u8 number) // receive number of elements
{
	u8 counter;
	for(counter=0;counter<number;counter++)
    4fde:	89 81       	ldd	r24, Y+1	; 0x01
    4fe0:	8f 5f       	subi	r24, 0xFF	; 255
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	99 81       	ldd	r25, Y+1	; 0x01
    4fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe8:	98 17       	cp	r25, r24
    4fea:	68 f3       	brcs	.-38     	; 0x4fc6 <USART_ReceieveStr+0x1a>
	{
		str_data[counter]=USART_ReceiveDataPolling();
	}
}
    4fec:	0f 90       	pop	r0
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	0f 90       	pop	r0
    4ff4:	cf 91       	pop	r28
    4ff6:	df 91       	pop	r29
    4ff8:	1f 91       	pop	r17
    4ffa:	0f 91       	pop	r16
    4ffc:	08 95       	ret

00004ffe <USART_SendDataINT>:

void USART_SendDataINT(u8 data) // send data with UDRE interrupt, WARNING ENABLE UDRE INT
{
    4ffe:	df 93       	push	r29
    5000:	cf 93       	push	r28
    5002:	0f 92       	push	r0
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	89 83       	std	Y+1, r24	; 0x01
	//sending data
	UDR=data;
    500a:	ec e2       	ldi	r30, 0x2C	; 44
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	89 81       	ldd	r24, Y+1	; 0x01
    5010:	80 83       	st	Z, r24
}
    5012:	0f 90       	pop	r0
    5014:	cf 91       	pop	r28
    5016:	df 91       	pop	r29
    5018:	08 95       	ret

0000501a <USART_SendStr>:

void USART_SendStr(u8* str_data)
{
    501a:	df 93       	push	r29
    501c:	cf 93       	push	r28
    501e:	00 d0       	rcall	.+0      	; 0x5020 <USART_SendStr+0x6>
    5020:	0f 92       	push	r0
    5022:	cd b7       	in	r28, 0x3d	; 61
    5024:	de b7       	in	r29, 0x3e	; 62
    5026:	9b 83       	std	Y+3, r25	; 0x03
    5028:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    502a:	19 82       	std	Y+1, r1	; 0x01
    502c:	0e c0       	rjmp	.+28     	; 0x504a <USART_SendStr+0x30>
	while(str_data[counter]!='\0')
	{
		USART_SendDataPolling(str_data[counter]);
    502e:	89 81       	ldd	r24, Y+1	; 0x01
    5030:	28 2f       	mov	r18, r24
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	8a 81       	ldd	r24, Y+2	; 0x02
    5036:	9b 81       	ldd	r25, Y+3	; 0x03
    5038:	fc 01       	movw	r30, r24
    503a:	e2 0f       	add	r30, r18
    503c:	f3 1f       	adc	r31, r19
    503e:	80 81       	ld	r24, Z
    5040:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <USART_SendDataPolling>
		counter++;
    5044:	89 81       	ldd	r24, Y+1	; 0x01
    5046:	8f 5f       	subi	r24, 0xFF	; 255
    5048:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendStr(u8* str_data)
{
	u8 counter=0;
	while(str_data[counter]!='\0')
    504a:	89 81       	ldd	r24, Y+1	; 0x01
    504c:	28 2f       	mov	r18, r24
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	8a 81       	ldd	r24, Y+2	; 0x02
    5052:	9b 81       	ldd	r25, Y+3	; 0x03
    5054:	fc 01       	movw	r30, r24
    5056:	e2 0f       	add	r30, r18
    5058:	f3 1f       	adc	r31, r19
    505a:	80 81       	ld	r24, Z
    505c:	88 23       	and	r24, r24
    505e:	39 f7       	brne	.-50     	; 0x502e <USART_SendStr+0x14>
	{
		USART_SendDataPolling(str_data[counter]);
		counter++;
	}
}
    5060:	0f 90       	pop	r0
    5062:	0f 90       	pop	r0
    5064:	0f 90       	pop	r0
    5066:	cf 91       	pop	r28
    5068:	df 91       	pop	r29
    506a:	08 95       	ret

0000506c <USART_SendInteger>:

void USART_SendInteger(volatile u16 Copy_u16Number) //this function to print direct integer number
{
    506c:	df 93       	push	r29
    506e:	cf 93       	push	r28
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
    5074:	2d 97       	sbiw	r28, 0x0d	; 13
    5076:	0f b6       	in	r0, 0x3f	; 63
    5078:	f8 94       	cli
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	cd bf       	out	0x3d, r28	; 61
    5080:	98 87       	std	Y+8, r25	; 0x08
    5082:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8arrStrNumber[5]={10,10,10,10,10};
    5084:	ce 01       	movw	r24, r28
    5086:	02 96       	adiw	r24, 0x02	; 2
    5088:	9a 87       	std	Y+10, r25	; 0x0a
    508a:	89 87       	std	Y+9, r24	; 0x09
    508c:	e9 e8       	ldi	r30, 0x89	; 137
    508e:	f2 e0       	ldi	r31, 0x02	; 2
    5090:	fc 87       	std	Y+12, r31	; 0x0c
    5092:	eb 87       	std	Y+11, r30	; 0x0b
    5094:	f5 e0       	ldi	r31, 0x05	; 5
    5096:	fd 87       	std	Y+13, r31	; 0x0d
    5098:	eb 85       	ldd	r30, Y+11	; 0x0b
    509a:	fc 85       	ldd	r31, Y+12	; 0x0c
    509c:	00 80       	ld	r0, Z
    509e:	8b 85       	ldd	r24, Y+11	; 0x0b
    50a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    50a2:	01 96       	adiw	r24, 0x01	; 1
    50a4:	9c 87       	std	Y+12, r25	; 0x0c
    50a6:	8b 87       	std	Y+11, r24	; 0x0b
    50a8:	e9 85       	ldd	r30, Y+9	; 0x09
    50aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    50ac:	00 82       	st	Z, r0
    50ae:	89 85       	ldd	r24, Y+9	; 0x09
    50b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b2:	01 96       	adiw	r24, 0x01	; 1
    50b4:	9a 87       	std	Y+10, r25	; 0x0a
    50b6:	89 87       	std	Y+9, r24	; 0x09
    50b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    50ba:	91 50       	subi	r25, 0x01	; 1
    50bc:	9d 87       	std	Y+13, r25	; 0x0d
    50be:	ed 85       	ldd	r30, Y+13	; 0x0d
    50c0:	ee 23       	and	r30, r30
    50c2:	51 f7       	brne	.-44     	; 0x5098 <USART_SendInteger+0x2c>
	u8 Local_u8Counter=4;
    50c4:	84 e0       	ldi	r24, 0x04	; 4
    50c6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16Number==0)
    50c8:	8f 81       	ldd	r24, Y+7	; 0x07
    50ca:	98 85       	ldd	r25, Y+8	; 0x08
    50cc:	00 97       	sbiw	r24, 0x00	; 0
    50ce:	d9 f5       	brne	.+118    	; 0x5146 <USART_SendInteger+0xda>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	e8 2f       	mov	r30, r24
    50d4:	f0 e0       	ldi	r31, 0x00	; 0
    50d6:	8f 81       	ldd	r24, Y+7	; 0x07
    50d8:	98 85       	ldd	r25, Y+8	; 0x08
    50da:	2a e0       	ldi	r18, 0x0A	; 10
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	b9 01       	movw	r22, r18
    50e0:	0e 94 07 29 	call	0x520e	; 0x520e <__udivmodhi4>
    50e4:	28 2f       	mov	r18, r24
    50e6:	ce 01       	movw	r24, r28
    50e8:	02 96       	adiw	r24, 0x02	; 2
    50ea:	e8 0f       	add	r30, r24
    50ec:	f9 1f       	adc	r31, r25
    50ee:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    50f0:	8f 81       	ldd	r24, Y+7	; 0x07
    50f2:	98 85       	ldd	r25, Y+8	; 0x08
    50f4:	2a e0       	ldi	r18, 0x0A	; 10
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	b9 01       	movw	r22, r18
    50fa:	0e 94 07 29 	call	0x520e	; 0x520e <__udivmodhi4>
    50fe:	cb 01       	movw	r24, r22
    5100:	98 87       	std	Y+8, r25	; 0x08
    5102:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter--;
    5104:	89 81       	ldd	r24, Y+1	; 0x01
    5106:	81 50       	subi	r24, 0x01	; 1
    5108:	89 83       	std	Y+1, r24	; 0x01
    510a:	1d c0       	rjmp	.+58     	; 0x5146 <USART_SendInteger+0xda>
	}
	while(Copy_u16Number>0)
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	e8 2f       	mov	r30, r24
    5110:	f0 e0       	ldi	r31, 0x00	; 0
    5112:	8f 81       	ldd	r24, Y+7	; 0x07
    5114:	98 85       	ldd	r25, Y+8	; 0x08
    5116:	2a e0       	ldi	r18, 0x0A	; 10
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	b9 01       	movw	r22, r18
    511c:	0e 94 07 29 	call	0x520e	; 0x520e <__udivmodhi4>
    5120:	28 2f       	mov	r18, r24
    5122:	ce 01       	movw	r24, r28
    5124:	02 96       	adiw	r24, 0x02	; 2
    5126:	e8 0f       	add	r30, r24
    5128:	f9 1f       	adc	r31, r25
    512a:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    512c:	8f 81       	ldd	r24, Y+7	; 0x07
    512e:	98 85       	ldd	r25, Y+8	; 0x08
    5130:	2a e0       	ldi	r18, 0x0A	; 10
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	b9 01       	movw	r22, r18
    5136:	0e 94 07 29 	call	0x520e	; 0x520e <__udivmodhi4>
    513a:	cb 01       	movw	r24, r22
    513c:	98 87       	std	Y+8, r25	; 0x08
    513e:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter--;
    5140:	89 81       	ldd	r24, Y+1	; 0x01
    5142:	81 50       	subi	r24, 0x01	; 1
    5144:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	while(Copy_u16Number>0)
    5146:	8f 81       	ldd	r24, Y+7	; 0x07
    5148:	98 85       	ldd	r25, Y+8	; 0x08
    514a:	00 97       	sbiw	r24, 0x00	; 0
    514c:	f9 f6       	brne	.-66     	; 0x510c <USART_SendInteger+0xa0>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    514e:	19 82       	std	Y+1, r1	; 0x01
    5150:	1a c0       	rjmp	.+52     	; 0x5186 <USART_SendInteger+0x11a>
	{
		if(Local_u8arrStrNumber[Local_u8Counter]<=9)
    5152:	89 81       	ldd	r24, Y+1	; 0x01
    5154:	28 2f       	mov	r18, r24
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	ce 01       	movw	r24, r28
    515a:	02 96       	adiw	r24, 0x02	; 2
    515c:	fc 01       	movw	r30, r24
    515e:	e2 0f       	add	r30, r18
    5160:	f3 1f       	adc	r31, r19
    5162:	80 81       	ld	r24, Z
    5164:	8a 30       	cpi	r24, 0x0A	; 10
    5166:	60 f4       	brcc	.+24     	; 0x5180 <USART_SendInteger+0x114>
		{
			USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
    5168:	89 81       	ldd	r24, Y+1	; 0x01
    516a:	28 2f       	mov	r18, r24
    516c:	30 e0       	ldi	r19, 0x00	; 0
    516e:	ce 01       	movw	r24, r28
    5170:	02 96       	adiw	r24, 0x02	; 2
    5172:	fc 01       	movw	r30, r24
    5174:	e2 0f       	add	r30, r18
    5176:	f3 1f       	adc	r31, r19
    5178:	80 81       	ld	r24, Z
    517a:	80 5d       	subi	r24, 0xD0	; 208
    517c:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <USART_SendDataPolling>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    5180:	89 81       	ldd	r24, Y+1	; 0x01
    5182:	8f 5f       	subi	r24, 0xFF	; 255
    5184:	89 83       	std	Y+1, r24	; 0x01
    5186:	89 81       	ldd	r24, Y+1	; 0x01
    5188:	85 30       	cpi	r24, 0x05	; 5
    518a:	18 f3       	brcs	.-58     	; 0x5152 <USART_SendInteger+0xe6>
		if(Local_u8arrStrNumber[Local_u8Counter]<=9)
		{
			USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
		}
	}
}
    518c:	2d 96       	adiw	r28, 0x0d	; 13
    518e:	0f b6       	in	r0, 0x3f	; 63
    5190:	f8 94       	cli
    5192:	de bf       	out	0x3e, r29	; 62
    5194:	0f be       	out	0x3f, r0	; 63
    5196:	cd bf       	out	0x3d, r28	; 61
    5198:	cf 91       	pop	r28
    519a:	df 91       	pop	r29
    519c:	08 95       	ret

0000519e <USART_EnableRx>:

void USART_EnableRx() // enable rx during runtime
{
    519e:	df 93       	push	r29
    51a0:	cf 93       	push	r28
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    51a6:	aa e2       	ldi	r26, 0x2A	; 42
    51a8:	b0 e0       	ldi	r27, 0x00	; 0
    51aa:	ea e2       	ldi	r30, 0x2A	; 42
    51ac:	f0 e0       	ldi	r31, 0x00	; 0
    51ae:	80 81       	ld	r24, Z
    51b0:	80 61       	ori	r24, 0x10	; 16
    51b2:	8c 93       	st	X, r24

}
    51b4:	cf 91       	pop	r28
    51b6:	df 91       	pop	r29
    51b8:	08 95       	ret

000051ba <USART_DisableRx>:

void USART_DisableRx() // disable rx during runtime
{
    51ba:	df 93       	push	r29
    51bc:	cf 93       	push	r28
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXEN);
    51c2:	aa e2       	ldi	r26, 0x2A	; 42
    51c4:	b0 e0       	ldi	r27, 0x00	; 0
    51c6:	ea e2       	ldi	r30, 0x2A	; 42
    51c8:	f0 e0       	ldi	r31, 0x00	; 0
    51ca:	80 81       	ld	r24, Z
    51cc:	8f 7e       	andi	r24, 0xEF	; 239
    51ce:	8c 93       	st	X, r24

}
    51d0:	cf 91       	pop	r28
    51d2:	df 91       	pop	r29
    51d4:	08 95       	ret

000051d6 <USART_EnableTx>:

void USART_EnableTx() // enable tx during runtime
{
    51d6:	df 93       	push	r29
    51d8:	cf 93       	push	r28
    51da:	cd b7       	in	r28, 0x3d	; 61
    51dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXEN);
    51de:	aa e2       	ldi	r26, 0x2A	; 42
    51e0:	b0 e0       	ldi	r27, 0x00	; 0
    51e2:	ea e2       	ldi	r30, 0x2A	; 42
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	80 81       	ld	r24, Z
    51e8:	88 60       	ori	r24, 0x08	; 8
    51ea:	8c 93       	st	X, r24

}
    51ec:	cf 91       	pop	r28
    51ee:	df 91       	pop	r29
    51f0:	08 95       	ret

000051f2 <USART_DisableTx>:

void USART_DisableTx() // disable tx during runtime
{
    51f2:	df 93       	push	r29
    51f4:	cf 93       	push	r28
    51f6:	cd b7       	in	r28, 0x3d	; 61
    51f8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXEN);
    51fa:	aa e2       	ldi	r26, 0x2A	; 42
    51fc:	b0 e0       	ldi	r27, 0x00	; 0
    51fe:	ea e2       	ldi	r30, 0x2A	; 42
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	80 81       	ld	r24, Z
    5204:	87 7f       	andi	r24, 0xF7	; 247
    5206:	8c 93       	st	X, r24

}
    5208:	cf 91       	pop	r28
    520a:	df 91       	pop	r29
    520c:	08 95       	ret

0000520e <__udivmodhi4>:
    520e:	aa 1b       	sub	r26, r26
    5210:	bb 1b       	sub	r27, r27
    5212:	51 e1       	ldi	r21, 0x11	; 17
    5214:	07 c0       	rjmp	.+14     	; 0x5224 <__udivmodhi4_ep>

00005216 <__udivmodhi4_loop>:
    5216:	aa 1f       	adc	r26, r26
    5218:	bb 1f       	adc	r27, r27
    521a:	a6 17       	cp	r26, r22
    521c:	b7 07       	cpc	r27, r23
    521e:	10 f0       	brcs	.+4      	; 0x5224 <__udivmodhi4_ep>
    5220:	a6 1b       	sub	r26, r22
    5222:	b7 0b       	sbc	r27, r23

00005224 <__udivmodhi4_ep>:
    5224:	88 1f       	adc	r24, r24
    5226:	99 1f       	adc	r25, r25
    5228:	5a 95       	dec	r21
    522a:	a9 f7       	brne	.-22     	; 0x5216 <__udivmodhi4_loop>
    522c:	80 95       	com	r24
    522e:	90 95       	com	r25
    5230:	bc 01       	movw	r22, r24
    5232:	cd 01       	movw	r24, r26
    5234:	08 95       	ret

00005236 <__divmodhi4>:
    5236:	97 fb       	bst	r25, 7
    5238:	09 2e       	mov	r0, r25
    523a:	07 26       	eor	r0, r23
    523c:	0a d0       	rcall	.+20     	; 0x5252 <__divmodhi4_neg1>
    523e:	77 fd       	sbrc	r23, 7
    5240:	04 d0       	rcall	.+8      	; 0x524a <__divmodhi4_neg2>
    5242:	e5 df       	rcall	.-54     	; 0x520e <__udivmodhi4>
    5244:	06 d0       	rcall	.+12     	; 0x5252 <__divmodhi4_neg1>
    5246:	00 20       	and	r0, r0
    5248:	1a f4       	brpl	.+6      	; 0x5250 <__divmodhi4_exit>

0000524a <__divmodhi4_neg2>:
    524a:	70 95       	com	r23
    524c:	61 95       	neg	r22
    524e:	7f 4f       	sbci	r23, 0xFF	; 255

00005250 <__divmodhi4_exit>:
    5250:	08 95       	ret

00005252 <__divmodhi4_neg1>:
    5252:	f6 f7       	brtc	.-4      	; 0x5250 <__divmodhi4_exit>
    5254:	90 95       	com	r25
    5256:	81 95       	neg	r24
    5258:	9f 4f       	sbci	r25, 0xFF	; 255
    525a:	08 95       	ret

0000525c <__prologue_saves__>:
    525c:	2f 92       	push	r2
    525e:	3f 92       	push	r3
    5260:	4f 92       	push	r4
    5262:	5f 92       	push	r5
    5264:	6f 92       	push	r6
    5266:	7f 92       	push	r7
    5268:	8f 92       	push	r8
    526a:	9f 92       	push	r9
    526c:	af 92       	push	r10
    526e:	bf 92       	push	r11
    5270:	cf 92       	push	r12
    5272:	df 92       	push	r13
    5274:	ef 92       	push	r14
    5276:	ff 92       	push	r15
    5278:	0f 93       	push	r16
    527a:	1f 93       	push	r17
    527c:	cf 93       	push	r28
    527e:	df 93       	push	r29
    5280:	cd b7       	in	r28, 0x3d	; 61
    5282:	de b7       	in	r29, 0x3e	; 62
    5284:	ca 1b       	sub	r28, r26
    5286:	db 0b       	sbc	r29, r27
    5288:	0f b6       	in	r0, 0x3f	; 63
    528a:	f8 94       	cli
    528c:	de bf       	out	0x3e, r29	; 62
    528e:	0f be       	out	0x3f, r0	; 63
    5290:	cd bf       	out	0x3d, r28	; 61
    5292:	09 94       	ijmp

00005294 <__epilogue_restores__>:
    5294:	2a 88       	ldd	r2, Y+18	; 0x12
    5296:	39 88       	ldd	r3, Y+17	; 0x11
    5298:	48 88       	ldd	r4, Y+16	; 0x10
    529a:	5f 84       	ldd	r5, Y+15	; 0x0f
    529c:	6e 84       	ldd	r6, Y+14	; 0x0e
    529e:	7d 84       	ldd	r7, Y+13	; 0x0d
    52a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    52a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    52a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    52a6:	b9 84       	ldd	r11, Y+9	; 0x09
    52a8:	c8 84       	ldd	r12, Y+8	; 0x08
    52aa:	df 80       	ldd	r13, Y+7	; 0x07
    52ac:	ee 80       	ldd	r14, Y+6	; 0x06
    52ae:	fd 80       	ldd	r15, Y+5	; 0x05
    52b0:	0c 81       	ldd	r16, Y+4	; 0x04
    52b2:	1b 81       	ldd	r17, Y+3	; 0x03
    52b4:	aa 81       	ldd	r26, Y+2	; 0x02
    52b6:	b9 81       	ldd	r27, Y+1	; 0x01
    52b8:	ce 0f       	add	r28, r30
    52ba:	d1 1d       	adc	r29, r1
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	f8 94       	cli
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	cd bf       	out	0x3d, r28	; 61
    52c6:	ed 01       	movw	r28, r26
    52c8:	08 95       	ret

000052ca <_exit>:
    52ca:	f8 94       	cli

000052cc <__stop_program>:
    52cc:	ff cf       	rjmp	.-2      	; 0x52cc <__stop_program>
