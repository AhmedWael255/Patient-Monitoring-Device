
RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c6  00800060  00005256  000052ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  00800226  00800226  000054b0  2**0
                  ALLOC
  3 .stab         00003b40  00000000  00000000  000054b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010bc  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a35c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ce90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dc40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e02d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f2 e5       	ldi	r31, 0x52	; 82
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 15 	call	0x2a86	; 0x2a86 <main>
      8a:	0c 94 29 29 	jmp	0x5252	; 0x5252 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c1 28 	jmp	0x5182	; 0x5182 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e1       	ldi	r26, 0x18	; 24
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c1 28 	jmp	0x5182	; 0x5182 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dd 28 	jmp	0x51ba	; 0x51ba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ed 28 	jmp	0x51da	; 0x51da <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vidSetPinDir>:

// use port number A,B,C,D
// use pin number PIN0..7
//use direction INPUT , OUTPUT , INPULLUP

void DIO_vidSetPinDir(uint8 port_no , uint8 pin_no , uint8 dir) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vidSetPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vidSetPinDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_no) {
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vidSetPinDir+0x2a>
     b6e:	72 c0       	rjmp	.+228    	; 0xc54 <DIO_vidSetPinDir+0x10e>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 30       	cpi	r18, 0x03	; 3
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vidSetPinDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vidSetPinDir+0x5a>
     b84:	73 c1       	rjmp	.+742    	; 0xe6c <DIO_vidSetPinDir+0x326>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 30       	cpi	r18, 0x03	; 3
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vidSetPinDir+0x4c>
     b90:	bb c0       	rjmp	.+374    	; 0xd08 <DIO_vidSetPinDir+0x1c2>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vidSetPinDir+0x58>
     b9c:	0f c1       	rjmp	.+542    	; 0xdbc <DIO_vidSetPinDir+0x276>
     b9e:	66 c1       	rjmp	.+716    	; 0xe6c <DIO_vidSetPinDir+0x326>
	case A:
		if (dir==0) ClrBit(DDRA,pin_no);
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	88 23       	and	r24, r24
     ba4:	a9 f4       	brne	.+42     	; 0xbd0 <DIO_vidSetPinDir+0x8a>
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vidSetPinDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vidSetPinDir+0x7a>
     bc8:	80 95       	com	r24
     bca:	84 23       	and	r24, r20
     bcc:	8c 93       	st	X, r24
     bce:	4e c1       	rjmp	.+668    	; 0xe6c <DIO_vidSetPinDir+0x326>
		else if (dir==1) SetBit(DDRA,pin_no);
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	a1 f4       	brne	.+40     	; 0xbfe <DIO_vidSetPinDir+0xb8>
     bd6:	aa e3       	ldi	r26, 0x3A	; 58
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ea e3       	ldi	r30, 0x3A	; 58
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_vidSetPinDir+0xae>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_vidSetPinDir+0xaa>
     bf8:	84 2b       	or	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	37 c1       	rjmp	.+622    	; 0xe6c <DIO_vidSetPinDir+0x326>
		else if (dir==2) {ClrBit(DDRA,pin_no); SetBit(PORTA,pin_no);}
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	09 f0       	breq	.+2      	; 0xc06 <DIO_vidSetPinDir+0xc0>
     c04:	33 c1       	rjmp	.+614    	; 0xe6c <DIO_vidSetPinDir+0x326>
     c06:	aa e3       	ldi	r26, 0x3A	; 58
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ea e3       	ldi	r30, 0x3A	; 58
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_vidSetPinDir+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	2a 95       	dec	r18
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_vidSetPinDir+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	ab e3       	ldi	r26, 0x3B	; 59
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	eb e3       	ldi	r30, 0x3B	; 59
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	48 2f       	mov	r20, r24
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 2e       	mov	r0, r18
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <DIO_vidSetPinDir+0x104>
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	0a 94       	dec	r0
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <DIO_vidSetPinDir+0x100>
     c4e:	84 2b       	or	r24, r20
     c50:	8c 93       	st	X, r24
     c52:	0c c1       	rjmp	.+536    	; 0xe6c <DIO_vidSetPinDir+0x326>
		break;
	case B:
			if (dir==0) ClrBit(DDRB,pin_no);
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	88 23       	and	r24, r24
     c58:	a9 f4       	brne	.+42     	; 0xc84 <DIO_vidSetPinDir+0x13e>
     c5a:	a7 e3       	ldi	r26, 0x37	; 55
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e7 e3       	ldi	r30, 0x37	; 55
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	48 2f       	mov	r20, r24
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 2e       	mov	r0, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_vidSetPinDir+0x132>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_vidSetPinDir+0x12e>
     c7c:	80 95       	com	r24
     c7e:	84 23       	and	r24, r20
     c80:	8c 93       	st	X, r24
     c82:	f4 c0       	rjmp	.+488    	; 0xe6c <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRB,pin_no);
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	a1 f4       	brne	.+40     	; 0xcb2 <DIO_vidSetPinDir+0x16c>
     c8a:	a7 e3       	ldi	r26, 0x37	; 55
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e7 e3       	ldi	r30, 0x37	; 55
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_vidSetPinDir+0x162>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_vidSetPinDir+0x15e>
     cac:	84 2b       	or	r24, r20
     cae:	8c 93       	st	X, r24
     cb0:	dd c0       	rjmp	.+442    	; 0xe6c <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRB,pin_no); SetBit(PORTB,pin_no);}
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_vidSetPinDir+0x174>
     cb8:	d9 c0       	rjmp	.+434    	; 0xe6c <DIO_vidSetPinDir+0x326>
     cba:	a7 e3       	ldi	r26, 0x37	; 55
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e3       	ldi	r30, 0x37	; 55
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_vidSetPinDir+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	2a 95       	dec	r18
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_vidSetPinDir+0x18c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	a8 e3       	ldi	r26, 0x38	; 56
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e8 e3       	ldi	r30, 0x38	; 56
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_vidSetPinDir+0x1b8>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_vidSetPinDir+0x1b4>
     d02:	84 2b       	or	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	b2 c0       	rjmp	.+356    	; 0xe6c <DIO_vidSetPinDir+0x326>
			break;
	case C:
			if (dir==0) ClrBit(DDRC,pin_no);
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	88 23       	and	r24, r24
     d0c:	a9 f4       	brne	.+42     	; 0xd38 <DIO_vidSetPinDir+0x1f2>
     d0e:	a4 e3       	ldi	r26, 0x34	; 52
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e4 e3       	ldi	r30, 0x34	; 52
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_vidSetPinDir+0x1e6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_vidSetPinDir+0x1e2>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	9a c0       	rjmp	.+308    	; 0xe6c <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRC,pin_no);
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	a1 f4       	brne	.+40     	; 0xd66 <DIO_vidSetPinDir+0x220>
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_vidSetPinDir+0x216>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_vidSetPinDir+0x212>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	83 c0       	rjmp	.+262    	; 0xe6c <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRC,pin_no); SetBit(PORTC,pin_no);}
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	09 f0       	breq	.+2      	; 0xd6e <DIO_vidSetPinDir+0x228>
     d6c:	7f c0       	rjmp	.+254    	; 0xe6c <DIO_vidSetPinDir+0x326>
     d6e:	a4 e3       	ldi	r26, 0x34	; 52
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e4 e3       	ldi	r30, 0x34	; 52
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_vidSetPinDir+0x244>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	2a 95       	dec	r18
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_vidSetPinDir+0x240>
     d8e:	80 95       	com	r24
     d90:	84 23       	and	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	a5 e3       	ldi	r26, 0x35	; 53
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e3       	ldi	r30, 0x35	; 53
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_vidSetPinDir+0x26c>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_vidSetPinDir+0x268>
     db6:	84 2b       	or	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	58 c0       	rjmp	.+176    	; 0xe6c <DIO_vidSetPinDir+0x326>
			break;
	case D:
			if (dir==0) ClrBit(DDRD,pin_no);
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	88 23       	and	r24, r24
     dc0:	a9 f4       	brne	.+42     	; 0xdec <DIO_vidSetPinDir+0x2a6>
     dc2:	a1 e3       	ldi	r26, 0x31	; 49
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e1 e3       	ldi	r30, 0x31	; 49
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_vidSetPinDir+0x29a>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_vidSetPinDir+0x296>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	40 c0       	rjmp	.+128    	; 0xe6c <DIO_vidSetPinDir+0x326>
			else if (dir==1) SetBit(DDRD,pin_no);
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <DIO_vidSetPinDir+0x2d4>
     df2:	a1 e3       	ldi	r26, 0x31	; 49
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e1 e3       	ldi	r30, 0x31	; 49
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_vidSetPinDir+0x2ca>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_vidSetPinDir+0x2c6>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	29 c0       	rjmp	.+82     	; 0xe6c <DIO_vidSetPinDir+0x326>
			else if (dir==2) {ClrBit(DDRD,pin_no); SetBit(PORTD,pin_no);}
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	31 f5       	brne	.+76     	; 0xe6c <DIO_vidSetPinDir+0x326>
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_vidSetPinDir+0x2f6>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	2a 95       	dec	r18
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_vidSetPinDir+0x2f2>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	a2 e3       	ldi	r26, 0x32	; 50
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e2 e3       	ldi	r30, 0x32	; 50
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_vidSetPinDir+0x31e>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_vidSetPinDir+0x31a>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
			break;
	}
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_vidSetPortDirMask>:

void DIO_vidSetPortDirMask(uint8 port_no , uint8 DirMask) {
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_vidSetPortDirMask+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_vidSetPortDirMask+0x8>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3c 83       	std	Y+4, r19	; 0x04
     e94:	2b 83       	std	Y+3, r18	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	91 05       	cpc	r25, r1
     e9e:	d9 f0       	breq	.+54     	; 0xed6 <DIO_vidSetPortDirMask+0x5a>
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	3c 81       	ldd	r19, Y+4	; 0x04
     ea4:	23 30       	cpi	r18, 0x03	; 3
     ea6:	31 05       	cpc	r19, r1
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <DIO_vidSetPortDirMask+0x3a>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
     eb2:	61 f0       	breq	.+24     	; 0xecc <DIO_vidSetPortDirMask+0x50>
     eb4:	1e c0       	rjmp	.+60     	; 0xef2 <DIO_vidSetPortDirMask+0x76>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	23 30       	cpi	r18, 0x03	; 3
     ebc:	31 05       	cpc	r19, r1
     ebe:	81 f0       	breq	.+32     	; 0xee0 <DIO_vidSetPortDirMask+0x64>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	84 30       	cpi	r24, 0x04	; 4
     ec6:	91 05       	cpc	r25, r1
     ec8:	81 f0       	breq	.+32     	; 0xeea <DIO_vidSetPortDirMask+0x6e>
     eca:	13 c0       	rjmp	.+38     	; 0xef2 <DIO_vidSetPortDirMask+0x76>
	case A:
			DDRA=DirMask;
     ecc:	ea e3       	ldi	r30, 0x3A	; 58
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	80 83       	st	Z, r24
     ed4:	0e c0       	rjmp	.+28     	; 0xef2 <DIO_vidSetPortDirMask+0x76>
			break;
	case B:
			DDRB=DirMask;
     ed6:	e7 e3       	ldi	r30, 0x37	; 55
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	80 83       	st	Z, r24
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <DIO_vidSetPortDirMask+0x76>
			break;
	case C:
			DDRC=DirMask;
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	80 83       	st	Z, r24
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <DIO_vidSetPortDirMask+0x76>
			break;
	case D:
			DDRD=DirMask;
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	80 83       	st	Z, r24
			break;
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(uint8 port_no , uint8 dir) {
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <DIO_vidSetPortDir+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <DIO_vidSetPortDir+0x8>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3c 83       	std	Y+4, r19	; 0x04
     f18:	2b 83       	std	Y+3, r18	; 0x03
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	91 f1       	breq	.+100    	; 0xf88 <DIO_vidSetPortDir+0x88>
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	3c 81       	ldd	r19, Y+4	; 0x04
     f28:	23 30       	cpi	r18, 0x03	; 3
     f2a:	31 05       	cpc	r19, r1
     f2c:	34 f4       	brge	.+12     	; 0xf3a <DIO_vidSetPortDir+0x3a>
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	69 f0       	breq	.+26     	; 0xf52 <DIO_vidSetPortDir+0x52>
     f38:	74 c0       	rjmp	.+232    	; 0x1022 <DIO_vidSetPortDir+0x122>
     f3a:	2b 81       	ldd	r18, Y+3	; 0x03
     f3c:	3c 81       	ldd	r19, Y+4	; 0x04
     f3e:	23 30       	cpi	r18, 0x03	; 3
     f40:	31 05       	cpc	r19, r1
     f42:	e1 f1       	breq	.+120    	; 0xfbc <DIO_vidSetPortDir+0xbc>
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <DIO_vidSetPortDir+0x50>
     f4e:	50 c0       	rjmp	.+160    	; 0xff0 <DIO_vidSetPortDir+0xf0>
     f50:	68 c0       	rjmp	.+208    	; 0x1022 <DIO_vidSetPortDir+0x122>
	case A:
		if (dir==0)      {DDRA=0;}
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	88 23       	and	r24, r24
     f56:	21 f4       	brne	.+8      	; 0xf60 <DIO_vidSetPortDir+0x60>
     f58:	ea e3       	ldi	r30, 0x3A	; 58
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	10 82       	st	Z, r1
     f5e:	61 c0       	rjmp	.+194    	; 0x1022 <DIO_vidSetPortDir+0x122>
		else if (dir==1) {DDRA=0xFF;}
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	29 f4       	brne	.+10     	; 0xf70 <DIO_vidSetPortDir+0x70>
     f66:	ea e3       	ldi	r30, 0x3A	; 58
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	80 83       	st	Z, r24
     f6e:	59 c0       	rjmp	.+178    	; 0x1022 <DIO_vidSetPortDir+0x122>
		else if (dir==2) {DDRA=0; PORTA=0xFF;}
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	09 f0       	breq	.+2      	; 0xf78 <DIO_vidSetPortDir+0x78>
     f76:	55 c0       	rjmp	.+170    	; 0x1022 <DIO_vidSetPortDir+0x122>
     f78:	ea e3       	ldi	r30, 0x3A	; 58
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	10 82       	st	Z, r1
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	80 83       	st	Z, r24
     f86:	4d c0       	rjmp	.+154    	; 0x1022 <DIO_vidSetPortDir+0x122>
		break;
	case B:
		if (dir==0)      {DDRB=0;}
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	88 23       	and	r24, r24
     f8c:	21 f4       	brne	.+8      	; 0xf96 <DIO_vidSetPortDir+0x96>
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	10 82       	st	Z, r1
     f94:	46 c0       	rjmp	.+140    	; 0x1022 <DIO_vidSetPortDir+0x122>
		else if (dir==1) {DDRB=0xFF;}
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	29 f4       	brne	.+10     	; 0xfa6 <DIO_vidSetPortDir+0xa6>
     f9c:	e7 e3       	ldi	r30, 0x37	; 55
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	80 83       	st	Z, r24
     fa4:	3e c0       	rjmp	.+124    	; 0x1022 <DIO_vidSetPortDir+0x122>
		else if (dir==2) {DDRB=0; PORTB=0xFF;}
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	d9 f5       	brne	.+118    	; 0x1022 <DIO_vidSetPortDir+0x122>
     fac:	e7 e3       	ldi	r30, 0x37	; 55
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1
     fb2:	e8 e3       	ldi	r30, 0x38	; 56
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	80 83       	st	Z, r24
     fba:	33 c0       	rjmp	.+102    	; 0x1022 <DIO_vidSetPortDir+0x122>
		break;
	case C:
			if (dir==0)      {DDRC=0;}
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	88 23       	and	r24, r24
     fc0:	21 f4       	brne	.+8      	; 0xfca <DIO_vidSetPortDir+0xca>
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
     fc8:	2c c0       	rjmp	.+88     	; 0x1022 <DIO_vidSetPortDir+0x122>
			else if (dir==1) {DDRC=0xFF;}
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	29 f4       	brne	.+10     	; 0xfda <DIO_vidSetPortDir+0xda>
     fd0:	e4 e3       	ldi	r30, 0x34	; 52
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	80 83       	st	Z, r24
     fd8:	24 c0       	rjmp	.+72     	; 0x1022 <DIO_vidSetPortDir+0x122>
			else if (dir==2) {DDRC=0; PORTC=0xFF;}
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	09 f5       	brne	.+66     	; 0x1022 <DIO_vidSetPortDir+0x122>
     fe0:	e4 e3       	ldi	r30, 0x34	; 52
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1
     fe6:	e5 e3       	ldi	r30, 0x35	; 53
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
     fee:	19 c0       	rjmp	.+50     	; 0x1022 <DIO_vidSetPortDir+0x122>
			break;
	case D:
			if (dir==0)      {DDRD=0;}
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 23       	and	r24, r24
     ff4:	21 f4       	brne	.+8      	; 0xffe <DIO_vidSetPortDir+0xfe>
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	10 82       	st	Z, r1
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <DIO_vidSetPortDir+0x122>
			else if (dir==1) {DDRD=0xFF;}
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	29 f4       	brne	.+10     	; 0x100e <DIO_vidSetPortDir+0x10e>
    1004:	e1 e3       	ldi	r30, 0x31	; 49
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	80 83       	st	Z, r24
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <DIO_vidSetPortDir+0x122>
			else if (dir==2) {DDRD=0; PORTD=0xFF;}
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	39 f4       	brne	.+14     	; 0x1022 <DIO_vidSetPortDir+0x122>
    1014:	e1 e3       	ldi	r30, 0x31	; 49
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	10 82       	st	Z, r1
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	80 83       	st	Z, r24
			break;
	}
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_vidWriteOnPin>:

void DIO_vidWriteOnPin(uint8 port_no , uint8 pin_no , uint8 level) {
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_vidWriteOnPin+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <DIO_vidWriteOnPin+0x8>
    1038:	0f 92       	push	r0
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6a 83       	std	Y+2, r22	; 0x02
    1042:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_no) {
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3d 83       	std	Y+5, r19	; 0x05
    104c:	2c 83       	std	Y+4, r18	; 0x04
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO_vidWriteOnPin+0x2a>
    1058:	48 c0       	rjmp	.+144    	; 0x10ea <DIO_vidWriteOnPin+0xba>
    105a:	2c 81       	ldd	r18, Y+4	; 0x04
    105c:	3d 81       	ldd	r19, Y+5	; 0x05
    105e:	23 30       	cpi	r18, 0x03	; 3
    1060:	31 05       	cpc	r19, r1
    1062:	34 f4       	brge	.+12     	; 0x1070 <DIO_vidWriteOnPin+0x40>
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	71 f0       	breq	.+28     	; 0x108a <DIO_vidWriteOnPin+0x5a>
    106e:	cb c0       	rjmp	.+406    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
    1070:	2c 81       	ldd	r18, Y+4	; 0x04
    1072:	3d 81       	ldd	r19, Y+5	; 0x05
    1074:	23 30       	cpi	r18, 0x03	; 3
    1076:	31 05       	cpc	r19, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <DIO_vidWriteOnPin+0x4c>
    107a:	67 c0       	rjmp	.+206    	; 0x114a <DIO_vidWriteOnPin+0x11a>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <DIO_vidWriteOnPin+0x58>
    1086:	91 c0       	rjmp	.+290    	; 0x11aa <DIO_vidWriteOnPin+0x17a>
    1088:	be c0       	rjmp	.+380    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
	case A:
		if (level==0) ClrBit(PORTA,pin_no);
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	88 23       	and	r24, r24
    108e:	a9 f4       	brne	.+42     	; 0x10ba <DIO_vidWriteOnPin+0x8a>
    1090:	ab e3       	ldi	r26, 0x3B	; 59
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e3       	ldi	r30, 0x3B	; 59
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_vidWriteOnPin+0x7e>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_vidWriteOnPin+0x7a>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	a6 c0       	rjmp	.+332    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
		else if (level==1) SetBit(PORTA,pin_no);
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <DIO_vidWriteOnPin+0x92>
    10c0:	a2 c0       	rjmp	.+324    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
    10c2:	ab e3       	ldi	r26, 0x3B	; 59
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_vidWriteOnPin+0xb0>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_vidWriteOnPin+0xac>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	8e c0       	rjmp	.+284    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
		break;
	case B:
			if (level==0) ClrBit(PORTB,pin_no);
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 23       	and	r24, r24
    10ee:	a9 f4       	brne	.+42     	; 0x111a <DIO_vidWriteOnPin+0xea>
    10f0:	a8 e3       	ldi	r26, 0x38	; 56
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e8 e3       	ldi	r30, 0x38	; 56
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_vidWriteOnPin+0xde>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_vidWriteOnPin+0xda>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	76 c0       	rjmp	.+236    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTB,pin_no);
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	09 f0       	breq	.+2      	; 0x1122 <DIO_vidWriteOnPin+0xf2>
    1120:	72 c0       	rjmp	.+228    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
    1122:	a8 e3       	ldi	r26, 0x38	; 56
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e8 e3       	ldi	r30, 0x38	; 56
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_vidWriteOnPin+0x110>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_vidWriteOnPin+0x10c>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	5e c0       	rjmp	.+188    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
			break;
	case C:
			if (level==0) ClrBit(PORTC,pin_no);
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 23       	and	r24, r24
    114e:	a9 f4       	brne	.+42     	; 0x117a <DIO_vidWriteOnPin+0x14a>
    1150:	a5 e3       	ldi	r26, 0x35	; 53
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e3       	ldi	r30, 0x35	; 53
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_vidWriteOnPin+0x13e>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_vidWriteOnPin+0x13a>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	46 c0       	rjmp	.+140    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTC,pin_no);
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	09 f0       	breq	.+2      	; 0x1182 <DIO_vidWriteOnPin+0x152>
    1180:	42 c0       	rjmp	.+132    	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
    1182:	a5 e3       	ldi	r26, 0x35	; 53
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e3       	ldi	r30, 0x35	; 53
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_vidWriteOnPin+0x170>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_vidWriteOnPin+0x16c>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	2e c0       	rjmp	.+92     	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
			break;
	case D:
			if (level==0) ClrBit(PORTD,pin_no);
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 23       	and	r24, r24
    11ae:	a9 f4       	brne	.+42     	; 0x11da <DIO_vidWriteOnPin+0x1aa>
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_vidWriteOnPin+0x19e>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_vidWriteOnPin+0x19a>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
			else if (level==1) SetBit(PORTD,pin_no);
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	99 f4       	brne	.+38     	; 0x1206 <DIO_vidWriteOnPin+0x1d6>
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_vidWriteOnPin+0x1ce>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_vidWriteOnPin+0x1ca>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
			break;
	}
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <DIO_vidWriteOnPort>:

void DIO_vidWriteOnPort(uint8 port_no , uint8 level) {
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_vidWriteOnPort+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <DIO_vidWriteOnPort+0x8>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	6a 83       	std	Y+2, r22	; 0x02
	switch (port_no){
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3c 83       	std	Y+4, r19	; 0x04
    122e:	2b 83       	std	Y+3, r18	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	91 05       	cpc	r25, r1
    1238:	d9 f0       	breq	.+54     	; 0x1270 <DIO_vidWriteOnPort+0x5a>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	23 30       	cpi	r18, 0x03	; 3
    1240:	31 05       	cpc	r19, r1
    1242:	34 f4       	brge	.+12     	; 0x1250 <DIO_vidWriteOnPort+0x3a>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	61 f0       	breq	.+24     	; 0x1266 <DIO_vidWriteOnPort+0x50>
    124e:	1e c0       	rjmp	.+60     	; 0x128c <DIO_vidWriteOnPort+0x76>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	23 30       	cpi	r18, 0x03	; 3
    1256:	31 05       	cpc	r19, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <DIO_vidWriteOnPort+0x64>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	91 05       	cpc	r25, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <DIO_vidWriteOnPort+0x6e>
    1264:	13 c0       	rjmp	.+38     	; 0x128c <DIO_vidWriteOnPort+0x76>
			case A:
					PORTA=level;
    1266:	eb e3       	ldi	r30, 0x3B	; 59
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	0e c0       	rjmp	.+28     	; 0x128c <DIO_vidWriteOnPort+0x76>
					break;
			case B:
					PORTB=level;
    1270:	e8 e3       	ldi	r30, 0x38	; 56
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	09 c0       	rjmp	.+18     	; 0x128c <DIO_vidWriteOnPort+0x76>
					break;
			case C:
					PORTC=level;
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	04 c0       	rjmp	.+8      	; 0x128c <DIO_vidWriteOnPort+0x76>
					break;
			case D:
					PORTD=level;
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
					break;
		}
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <DIO_u8ReadFromPin>:
				else if (level==1) {PORTD=0xFF;}
				break;
	}
}*/

uint8 DIO_u8ReadFromPin(uint8 port_no , uint8 pin_no) {
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_u8ReadFromPin+0x6>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_u8ReadFromPin+0x8>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp;
	switch(port_no) {
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3d 83       	std	Y+5, r19	; 0x05
    12b4:	2c 83       	std	Y+4, r18	; 0x04
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	91 05       	cpc	r25, r1
    12be:	d9 f0       	breq	.+54     	; 0x12f6 <DIO_u8ReadFromPin+0x5c>
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	23 30       	cpi	r18, 0x03	; 3
    12c6:	31 05       	cpc	r19, r1
    12c8:	34 f4       	brge	.+12     	; 0x12d6 <DIO_u8ReadFromPin+0x3c>
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	61 f0       	breq	.+24     	; 0x12ec <DIO_u8ReadFromPin+0x52>
    12d4:	1e c0       	rjmp	.+60     	; 0x1312 <DIO_u8ReadFromPin+0x78>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	23 30       	cpi	r18, 0x03	; 3
    12dc:	31 05       	cpc	r19, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <DIO_u8ReadFromPin+0x66>
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	91 05       	cpc	r25, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <DIO_u8ReadFromPin+0x70>
    12ea:	13 c0       	rjmp	.+38     	; 0x1312 <DIO_u8ReadFromPin+0x78>
		case A:
				temp=PINA;
    12ec:	e9 e3       	ldi	r30, 0x39	; 57
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <DIO_u8ReadFromPin+0x78>
				break;
		case B:
				temp=PINB;
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	09 c0       	rjmp	.+18     	; 0x1312 <DIO_u8ReadFromPin+0x78>
				break;
		case C:
				temp=PINC;
    1300:	e3 e3       	ldi	r30, 0x33	; 51
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <DIO_u8ReadFromPin+0x78>
				break;
		case D:
				temp=PIND;
    130a:	e0 e3       	ldi	r30, 0x30	; 48
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	89 83       	std	Y+1, r24	; 0x01
				break;
		default : //Do Nothing
				break;
		}
	return temp;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <DIO_u8ReadFromPort>:

uint8 DIO_u8ReadFromPort(uint8 port_no) {
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <DIO_u8ReadFromPort+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <DIO_u8ReadFromPort+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp;
	switch(port_no) {
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3c 83       	std	Y+4, r19	; 0x04
    133a:	2b 83       	std	Y+3, r18	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	91 05       	cpc	r25, r1
    1344:	d9 f0       	breq	.+54     	; 0x137c <DIO_u8ReadFromPort+0x58>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	23 30       	cpi	r18, 0x03	; 3
    134c:	31 05       	cpc	r19, r1
    134e:	34 f4       	brge	.+12     	; 0x135c <DIO_u8ReadFromPort+0x38>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	61 f0       	breq	.+24     	; 0x1372 <DIO_u8ReadFromPort+0x4e>
    135a:	1e c0       	rjmp	.+60     	; 0x1398 <DIO_u8ReadFromPort+0x74>
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	23 30       	cpi	r18, 0x03	; 3
    1362:	31 05       	cpc	r19, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <DIO_u8ReadFromPort+0x62>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	91 05       	cpc	r25, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <DIO_u8ReadFromPort+0x6c>
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <DIO_u8ReadFromPort+0x74>
		case A:
				temp=PINA;
    1372:	e9 e3       	ldi	r30, 0x39	; 57
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <DIO_u8ReadFromPort+0x74>
				break;
		case B:
				temp=PINB;
    137c:	e6 e3       	ldi	r30, 0x36	; 54
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <DIO_u8ReadFromPort+0x74>
				break;
		case C:
				temp=PINC;
    1386:	e3 e3       	ldi	r30, 0x33	; 51
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <DIO_u8ReadFromPort+0x74>
				break;
		case D:
				temp=PIND;
    1390:	e0 e3       	ldi	r30, 0x30	; 48
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	89 83       	std	Y+1, r24	; 0x01
				break;

		default : //Do Nothing
				break;
		}
	return temp;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <DIO_SetPinDir>:
//***********************************************************
//*********************Driver functions**********************
//***********************************************************

void DIO_SetPinDir(u8 port_indx, u8 pin_indx, u8 dir) // set pin direction (input,output) for AVR
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	27 97       	sbiw	r28, 0x07	; 7
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	6a 83       	std	Y+2, r22	; 0x02
    13c0:	4b 83       	std	Y+3, r20	; 0x03
	if(dir==INPUT)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 23       	and	r24, r24
    13c6:	09 f0       	breq	.+2      	; 0x13ca <DIO_SetPinDir+0x22>
    13c8:	74 c0       	rjmp	.+232    	; 0x14b2 <DIO_SetPinDir+0x10a>
	{
		switch(port_indx)
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3f 83       	std	Y+7, r19	; 0x07
    13d2:	2e 83       	std	Y+6, r18	; 0x06
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	9f 81       	ldd	r25, Y+7	; 0x07
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	59 f1       	breq	.+86     	; 0x1434 <DIO_SetPinDir+0x8c>
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <DIO_SetPinDir+0x4a>
    13e8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ea:	9f 81       	ldd	r25, Y+7	; 0x07
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f0       	breq	.+26     	; 0x140a <DIO_SetPinDir+0x62>
    13f0:	d2 c0       	rjmp	.+420    	; 0x1596 <DIO_SetPinDir+0x1ee>
    13f2:	2e 81       	ldd	r18, Y+6	; 0x06
    13f4:	3f 81       	ldd	r19, Y+7	; 0x07
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	89 f1       	breq	.+98     	; 0x145e <DIO_SetPinDir+0xb6>
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	09 f4       	brne	.+2      	; 0x1408 <DIO_SetPinDir+0x60>
    1406:	40 c0       	rjmp	.+128    	; 0x1488 <DIO_SetPinDir+0xe0>
    1408:	c6 c0       	rjmp	.+396    	; 0x1596 <DIO_SetPinDir+0x1ee>
		{
		case PORTA:
			CLEAR_BIT(DDRA_REG,pin_indx);
    140a:	aa e3       	ldi	r26, 0x3A	; 58
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ea e3       	ldi	r30, 0x3A	; 58
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_SetPinDir+0x80>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_SetPinDir+0x7c>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	b1 c0       	rjmp	.+354    	; 0x1596 <DIO_SetPinDir+0x1ee>
			break;
		case PORTB:
			CLEAR_BIT(DDRB_REG,pin_indx);
    1434:	a7 e3       	ldi	r26, 0x37	; 55
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e7 e3       	ldi	r30, 0x37	; 55
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_SetPinDir+0xaa>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_SetPinDir+0xa6>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	9c c0       	rjmp	.+312    	; 0x1596 <DIO_SetPinDir+0x1ee>
			break;
		case PORTC:
			CLEAR_BIT(DDRC_REG,pin_indx);
    145e:	a4 e3       	ldi	r26, 0x34	; 52
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e4 e3       	ldi	r30, 0x34	; 52
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_SetPinDir+0xd4>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_SetPinDir+0xd0>
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8c 93       	st	X, r24
    1486:	87 c0       	rjmp	.+270    	; 0x1596 <DIO_SetPinDir+0x1ee>
			break;
		case PORTD:
			CLEAR_BIT(DDRD_REG,pin_indx);
    1488:	a1 e3       	ldi	r26, 0x31	; 49
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e1 e3       	ldi	r30, 0x31	; 49
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_SetPinDir+0xfe>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_SetPinDir+0xfa>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	72 c0       	rjmp	.+228    	; 0x1596 <DIO_SetPinDir+0x1ee>
			break;
		}
	}
	else if(dir==OUTPUT)
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	09 f0       	breq	.+2      	; 0x14ba <DIO_SetPinDir+0x112>
    14b8:	6e c0       	rjmp	.+220    	; 0x1596 <DIO_SetPinDir+0x1ee>
		{
			switch(port_indx)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3d 83       	std	Y+5, r19	; 0x05
    14c2:	2c 83       	std	Y+4, r18	; 0x04
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	49 f1       	breq	.+82     	; 0x1520 <DIO_SetPinDir+0x178>
    14ce:	2c 81       	ldd	r18, Y+4	; 0x04
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <DIO_SetPinDir+0x13a>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	61 f0       	breq	.+24     	; 0x14f8 <DIO_SetPinDir+0x150>
    14e0:	5a c0       	rjmp	.+180    	; 0x1596 <DIO_SetPinDir+0x1ee>
    14e2:	2c 81       	ldd	r18, Y+4	; 0x04
    14e4:	3d 81       	ldd	r19, Y+5	; 0x05
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	71 f1       	breq	.+92     	; 0x1548 <DIO_SetPinDir+0x1a0>
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	e9 f1       	breq	.+122    	; 0x1570 <DIO_SetPinDir+0x1c8>
    14f6:	4f c0       	rjmp	.+158    	; 0x1596 <DIO_SetPinDir+0x1ee>
			{
			case PORTA:
				SET_BIT(DDRA_REG,pin_indx);
    14f8:	aa e3       	ldi	r26, 0x3A	; 58
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_SetPinDir+0x16e>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_SetPinDir+0x16a>
    151a:	84 2b       	or	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	3b c0       	rjmp	.+118    	; 0x1596 <DIO_SetPinDir+0x1ee>
				break;
			case PORTB:
				SET_BIT(DDRB_REG,pin_indx);
    1520:	a7 e3       	ldi	r26, 0x37	; 55
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e7 e3       	ldi	r30, 0x37	; 55
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_SetPinDir+0x196>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_SetPinDir+0x192>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	27 c0       	rjmp	.+78     	; 0x1596 <DIO_SetPinDir+0x1ee>
				break;
			case PORTC:
				SET_BIT(DDRC_REG,pin_indx);
    1548:	a4 e3       	ldi	r26, 0x34	; 52
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_SetPinDir+0x1be>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_SetPinDir+0x1ba>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <DIO_SetPinDir+0x1ee>
				break;
			case PORTD:
				SET_BIT(DDRD_REG,pin_indx);
    1570:	a1 e3       	ldi	r26, 0x31	; 49
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e1 e3       	ldi	r30, 0x31	; 49
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_SetPinDir+0x1e6>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_SetPinDir+0x1e2>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
				break;
			}
		}

}
    1596:	27 96       	adiw	r28, 0x07	; 7
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <DIO_SetPinVal>:
void DIO_SetPinVal(u8 port_indx, u8 pin_indx, u8 val) // set pin value (high,low) value for AVR
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	27 97       	sbiw	r28, 0x07	; 7
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	6a 83       	std	Y+2, r22	; 0x02
    15c0:	4b 83       	std	Y+3, r20	; 0x03
	if(val==LOW)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	88 23       	and	r24, r24
    15c6:	09 f0       	breq	.+2      	; 0x15ca <DIO_SetPinVal+0x22>
    15c8:	73 c0       	rjmp	.+230    	; 0x16b0 <DIO_SetPinVal+0x108>
		{
			switch(port_indx)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3f 83       	std	Y+7, r19	; 0x07
    15d2:	2e 83       	std	Y+6, r18	; 0x06
    15d4:	8e 81       	ldd	r24, Y+6	; 0x06
    15d6:	9f 81       	ldd	r25, Y+7	; 0x07
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	59 f1       	breq	.+86     	; 0x1634 <DIO_SetPinVal+0x8c>
    15de:	2e 81       	ldd	r18, Y+6	; 0x06
    15e0:	3f 81       	ldd	r19, Y+7	; 0x07
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <DIO_SetPinVal+0x4a>
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	9f 81       	ldd	r25, Y+7	; 0x07
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f0       	breq	.+26     	; 0x160a <DIO_SetPinVal+0x62>
    15f0:	5f c0       	rjmp	.+190    	; 0x16b0 <DIO_SetPinVal+0x108>
    15f2:	2e 81       	ldd	r18, Y+6	; 0x06
    15f4:	3f 81       	ldd	r19, Y+7	; 0x07
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	89 f1       	breq	.+98     	; 0x165e <DIO_SetPinVal+0xb6>
    15fc:	8e 81       	ldd	r24, Y+6	; 0x06
    15fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	91 05       	cpc	r25, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <DIO_SetPinVal+0x60>
    1606:	40 c0       	rjmp	.+128    	; 0x1688 <DIO_SetPinVal+0xe0>
    1608:	53 c0       	rjmp	.+166    	; 0x16b0 <DIO_SetPinVal+0x108>
			{
			case PORTA:
				CLEAR_BIT(PORTA_REG,pin_indx);
    160a:	ab e3       	ldi	r26, 0x3B	; 59
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e3       	ldi	r30, 0x3B	; 59
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_SetPinVal+0x80>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_SetPinVal+0x7c>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	3e c0       	rjmp	.+124    	; 0x16b0 <DIO_SetPinVal+0x108>
				break;
			case PORTB:
				CLEAR_BIT(PORTB_REG,pin_indx);
    1634:	a8 e3       	ldi	r26, 0x38	; 56
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e8 e3       	ldi	r30, 0x38	; 56
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_SetPinVal+0xaa>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_SetPinVal+0xa6>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
    165c:	29 c0       	rjmp	.+82     	; 0x16b0 <DIO_SetPinVal+0x108>
				break;
			case PORTC:
				CLEAR_BIT(PORTC_REG,pin_indx);
    165e:	a5 e3       	ldi	r26, 0x35	; 53
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e3       	ldi	r30, 0x35	; 53
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 2e       	mov	r0, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_SetPinVal+0xd4>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	0a 94       	dec	r0
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_SetPinVal+0xd0>
    1680:	80 95       	com	r24
    1682:	84 23       	and	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <DIO_SetPinVal+0x108>
				break;
			case PORTD:
				CLEAR_BIT(PORTD_REG,pin_indx);
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_SetPinVal+0xfe>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_SetPinVal+0xfa>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
				break;
			}
		}
		if(val==HIGH)
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <DIO_SetPinVal+0x110>
    16b6:	6e c0       	rjmp	.+220    	; 0x1794 <DIO_SetPinVal+0x1ec>
			{
			switch(port_indx)
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3d 83       	std	Y+5, r19	; 0x05
    16c0:	2c 83       	std	Y+4, r18	; 0x04
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	91 05       	cpc	r25, r1
    16ca:	49 f1       	breq	.+82     	; 0x171e <DIO_SetPinVal+0x176>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <DIO_SetPinVal+0x138>
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	9d 81       	ldd	r25, Y+5	; 0x05
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <DIO_SetPinVal+0x14e>
    16de:	5a c0       	rjmp	.+180    	; 0x1794 <DIO_SetPinVal+0x1ec>
    16e0:	2c 81       	ldd	r18, Y+4	; 0x04
    16e2:	3d 81       	ldd	r19, Y+5	; 0x05
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	71 f1       	breq	.+92     	; 0x1746 <DIO_SetPinVal+0x19e>
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	e9 f1       	breq	.+122    	; 0x176e <DIO_SetPinVal+0x1c6>
    16f4:	4f c0       	rjmp	.+158    	; 0x1794 <DIO_SetPinVal+0x1ec>
			{
			case PORTA:
				SET_BIT(PORTA_REG,pin_indx);
    16f6:	ab e3       	ldi	r26, 0x3B	; 59
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e3       	ldi	r30, 0x3B	; 59
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_SetPinVal+0x16c>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_SetPinVal+0x168>
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	3b c0       	rjmp	.+118    	; 0x1794 <DIO_SetPinVal+0x1ec>
				break;
			case PORTB:
				SET_BIT(PORTB_REG,pin_indx);
    171e:	a8 e3       	ldi	r26, 0x38	; 56
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e8 e3       	ldi	r30, 0x38	; 56
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_SetPinVal+0x194>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_SetPinVal+0x190>
    1740:	84 2b       	or	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	27 c0       	rjmp	.+78     	; 0x1794 <DIO_SetPinVal+0x1ec>
				break;
			case PORTC:
				SET_BIT(PORTC_REG,pin_indx);
    1746:	a5 e3       	ldi	r26, 0x35	; 53
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e5 e3       	ldi	r30, 0x35	; 53
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_SetPinVal+0x1bc>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_SetPinVal+0x1b8>
    1768:	84 2b       	or	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <DIO_SetPinVal+0x1ec>
				break;
			case PORTD:
				SET_BIT(PORTD_REG,pin_indx);
    176e:	a2 e3       	ldi	r26, 0x32	; 50
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e2 e3       	ldi	r30, 0x32	; 50
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_SetPinVal+0x1e4>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_SetPinVal+0x1e0>
    1790:	84 2b       	or	r24, r20
    1792:	8c 93       	st	X, r24
				break;
			}
		}

}
    1794:	27 96       	adiw	r28, 0x07	; 7
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <DIO_SetPortDir>:
void DIO_SetPortDir(u8 port_indx, u8 dir) // set port direction (input,output) for AVR
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <DIO_SetPortDir+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_SetPortDir+0x8>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_SetPortDir+0xa>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	6a 83       	std	Y+2, r22	; 0x02
	if(dir==INPUT)
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	88 23       	and	r24, r24
    17bc:	71 f5       	brne	.+92     	; 0x181a <DIO_SetPortDir+0x74>
	{
		switch (port_indx)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3e 83       	std	Y+6, r19	; 0x06
    17c6:	2d 83       	std	Y+5, r18	; 0x05
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	c9 f0       	breq	.+50     	; 0x1804 <DIO_SetPortDir+0x5e>
    17d2:	2d 81       	ldd	r18, Y+5	; 0x05
    17d4:	3e 81       	ldd	r19, Y+6	; 0x06
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	2c f4       	brge	.+10     	; 0x17e6 <DIO_SetPortDir+0x40>
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	61 f0       	breq	.+24     	; 0x17fc <DIO_SetPortDir+0x56>
    17e4:	1a c0       	rjmp	.+52     	; 0x181a <DIO_SetPortDir+0x74>
    17e6:	2d 81       	ldd	r18, Y+5	; 0x05
    17e8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	71 f0       	breq	.+28     	; 0x180c <DIO_SetPortDir+0x66>
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	91 05       	cpc	r25, r1
    17f8:	69 f0       	breq	.+26     	; 0x1814 <DIO_SetPortDir+0x6e>
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <DIO_SetPortDir+0x74>
		{
		case PORTA:
			CLEAR_BYTE(DDRA_REG);
    17fc:	ea e3       	ldi	r30, 0x3A	; 58
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	10 82       	st	Z, r1
    1802:	0b c0       	rjmp	.+22     	; 0x181a <DIO_SetPortDir+0x74>
			break;
		case PORTB:
			CLEAR_BYTE(DDRB_REG);
    1804:	e7 e3       	ldi	r30, 0x37	; 55
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	10 82       	st	Z, r1
    180a:	07 c0       	rjmp	.+14     	; 0x181a <DIO_SetPortDir+0x74>
			break;
		case PORTC:
			CLEAR_BYTE(DDRC_REG);
    180c:	e4 e3       	ldi	r30, 0x34	; 52
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
    1812:	03 c0       	rjmp	.+6      	; 0x181a <DIO_SetPortDir+0x74>
			break;
		case PORTD:
			CLEAR_BYTE(DDRD_REG);
    1814:	e1 e3       	ldi	r30, 0x31	; 49
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	10 82       	st	Z, r1
			break;
		}
	}
	if(dir==OUTPUT)
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 f5       	brne	.+100    	; 0x1884 <DIO_SetPortDir+0xde>
	{
		switch (port_indx)
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3c 83       	std	Y+4, r19	; 0x04
    1828:	2b 83       	std	Y+3, r18	; 0x03
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	d1 f0       	breq	.+52     	; 0x1868 <DIO_SetPortDir+0xc2>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	2c f4       	brge	.+10     	; 0x1848 <DIO_SetPortDir+0xa2>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	61 f0       	breq	.+24     	; 0x185e <DIO_SetPortDir+0xb8>
    1846:	1e c0       	rjmp	.+60     	; 0x1884 <DIO_SetPortDir+0xde>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <DIO_SetPortDir+0xcc>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	81 f0       	breq	.+32     	; 0x187c <DIO_SetPortDir+0xd6>
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <DIO_SetPortDir+0xde>
		{
			case PORTA:
				SET_BYTE(DDRA_REG);
    185e:	ea e3       	ldi	r30, 0x3A	; 58
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	80 83       	st	Z, r24
    1866:	0e c0       	rjmp	.+28     	; 0x1884 <DIO_SetPortDir+0xde>
				break;
			case PORTB:
				SET_BYTE(DDRB_REG);
    1868:	e7 e3       	ldi	r30, 0x37	; 55
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	80 83       	st	Z, r24
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <DIO_SetPortDir+0xde>
				break;
			case PORTC:
				SET_BYTE(DDRC_REG);
    1872:	e4 e3       	ldi	r30, 0x34	; 52
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	80 83       	st	Z, r24
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <DIO_SetPortDir+0xde>
				break;
			case PORTD:
				SET_BYTE(DDRD_REG);
    187c:	e1 e3       	ldi	r30, 0x31	; 49
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	80 83       	st	Z, r24
				break;
				}
	}
}
    1884:	26 96       	adiw	r28, 0x06	; 6
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <DIO_SetPortVal>:
void DIO_SetPortVal(u8 port_indx, u8 val) // set port value (high,low) for AVR
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <DIO_SetPortVal+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <DIO_SetPortVal+0x8>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <DIO_SetPortVal+0xa>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
	if(val==LOW)
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	88 23       	and	r24, r24
    18ac:	71 f5       	brne	.+92     	; 0x190a <DIO_SetPortVal+0x74>
		{
			switch (port_indx)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	c9 f0       	breq	.+50     	; 0x18f4 <DIO_SetPortVal+0x5e>
    18c2:	2d 81       	ldd	r18, Y+5	; 0x05
    18c4:	3e 81       	ldd	r19, Y+6	; 0x06
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <DIO_SetPortVal+0x40>
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	61 f0       	breq	.+24     	; 0x18ec <DIO_SetPortVal+0x56>
    18d4:	1a c0       	rjmp	.+52     	; 0x190a <DIO_SetPortVal+0x74>
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	3e 81       	ldd	r19, Y+6	; 0x06
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	71 f0       	breq	.+28     	; 0x18fc <DIO_SetPortVal+0x66>
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	69 f0       	breq	.+26     	; 0x1904 <DIO_SetPortVal+0x6e>
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <DIO_SetPortVal+0x74>
			{
			case PORTA:
				CLEAR_BYTE(PORTA_REG);
    18ec:	eb e3       	ldi	r30, 0x3B	; 59
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	10 82       	st	Z, r1
    18f2:	0b c0       	rjmp	.+22     	; 0x190a <DIO_SetPortVal+0x74>
				break;
			case PORTB:
				CLEAR_BYTE(PORTB_REG);
    18f4:	e8 e3       	ldi	r30, 0x38	; 56
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	10 82       	st	Z, r1
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <DIO_SetPortVal+0x74>
				break;
			case PORTC:
				CLEAR_BYTE(PORTC_REG);
    18fc:	e5 e3       	ldi	r30, 0x35	; 53
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	10 82       	st	Z, r1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <DIO_SetPortVal+0x74>
				break;
			case PORTD:
				CLEAR_BYTE(PORTD_REG);
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	10 82       	st	Z, r1
				break;
			}
		}
		if(val==HIGH)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 f5       	brne	.+100    	; 0x1974 <DIO_SetPortVal+0xde>
		{
			switch (port_indx)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3c 83       	std	Y+4, r19	; 0x04
    1918:	2b 83       	std	Y+3, r18	; 0x03
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	d1 f0       	breq	.+52     	; 0x1958 <DIO_SetPortVal+0xc2>
    1924:	2b 81       	ldd	r18, Y+3	; 0x03
    1926:	3c 81       	ldd	r19, Y+4	; 0x04
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	2c f4       	brge	.+10     	; 0x1938 <DIO_SetPortVal+0xa2>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	61 f0       	breq	.+24     	; 0x194e <DIO_SetPortVal+0xb8>
    1936:	1e c0       	rjmp	.+60     	; 0x1974 <DIO_SetPortVal+0xde>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	22 30       	cpi	r18, 0x02	; 2
    193e:	31 05       	cpc	r19, r1
    1940:	81 f0       	breq	.+32     	; 0x1962 <DIO_SetPortVal+0xcc>
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	81 f0       	breq	.+32     	; 0x196c <DIO_SetPortVal+0xd6>
    194c:	13 c0       	rjmp	.+38     	; 0x1974 <DIO_SetPortVal+0xde>
			{
				case PORTA:
					SET_BYTE(PORTA_REG);
    194e:	eb e3       	ldi	r30, 0x3B	; 59
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	80 83       	st	Z, r24
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <DIO_SetPortVal+0xde>
					break;
				case PORTB:
					SET_BYTE(PORTB_REG);
    1958:	e8 e3       	ldi	r30, 0x38	; 56
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	80 83       	st	Z, r24
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <DIO_SetPortVal+0xde>
					break;
				case PORTC:
					SET_BYTE(PORTC_REG);
    1962:	e5 e3       	ldi	r30, 0x35	; 53
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	80 83       	st	Z, r24
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <DIO_SetPortVal+0xde>
					break;
				case PORTD:
					SET_BYTE(PORTD_REG);
    196c:	e2 e3       	ldi	r30, 0x32	; 50
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	80 83       	st	Z, r24
					break;
			}
		}
}
    1974:	26 96       	adiw	r28, 0x06	; 6
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <DIO_TogglePinVal>:

void DIO_TogglePinVal(u8 port_indx, u8 pin_indx) // toggles the pin value from high to low or vice versa
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <DIO_TogglePinVal+0x6>
    198c:	00 d0       	rcall	.+0      	; 0x198e <DIO_TogglePinVal+0x8>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_indx)
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	3c 83       	std	Y+4, r19	; 0x04
    199e:	2b 83       	std	Y+3, r18	; 0x03
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	91 05       	cpc	r25, r1
    19a8:	49 f1       	breq	.+82     	; 0x19fc <DIO_TogglePinVal+0x76>
    19aa:	2b 81       	ldd	r18, Y+3	; 0x03
    19ac:	3c 81       	ldd	r19, Y+4	; 0x04
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	2c f4       	brge	.+10     	; 0x19be <DIO_TogglePinVal+0x38>
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <DIO_TogglePinVal+0x4e>
    19bc:	5a c0       	rjmp	.+180    	; 0x1a72 <DIO_TogglePinVal+0xec>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	71 f1       	breq	.+92     	; 0x1a24 <DIO_TogglePinVal+0x9e>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	91 05       	cpc	r25, r1
    19d0:	e9 f1       	breq	.+122    	; 0x1a4c <DIO_TogglePinVal+0xc6>
    19d2:	4f c0       	rjmp	.+158    	; 0x1a72 <DIO_TogglePinVal+0xec>
	{
	case PORTA:
		TOGGLE_BIT(PORTA_REG,pin_indx);
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_TogglePinVal+0x6c>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_TogglePinVal+0x68>
    19f6:	84 27       	eor	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	3b c0       	rjmp	.+118    	; 0x1a72 <DIO_TogglePinVal+0xec>
		break;
	case PORTB:
		TOGGLE_BIT(PORTB_REG,pin_indx);
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_TogglePinVal+0x94>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_TogglePinVal+0x90>
    1a1e:	84 27       	eor	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	27 c0       	rjmp	.+78     	; 0x1a72 <DIO_TogglePinVal+0xec>
		break;
	case PORTC:
		TOGGLE_BIT(PORTC_REG,pin_indx);
    1a24:	a5 e3       	ldi	r26, 0x35	; 53
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e5 e3       	ldi	r30, 0x35	; 53
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_TogglePinVal+0xbc>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_TogglePinVal+0xb8>
    1a46:	84 27       	eor	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	13 c0       	rjmp	.+38     	; 0x1a72 <DIO_TogglePinVal+0xec>
		break;
	case PORTD:
		TOGGLE_BIT(PORTD_REG,pin_indx);
    1a4c:	a2 e3       	ldi	r26, 0x32	; 50
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e2 e3       	ldi	r30, 0x32	; 50
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	48 2f       	mov	r20, r24
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 2e       	mov	r0, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_TogglePinVal+0xe4>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	0a 94       	dec	r0
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_TogglePinVal+0xe0>
    1a6e:	84 27       	eor	r24, r20
    1a70:	8c 93       	st	X, r24
		break;
	}
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <DIO_SetNippleDir>:


void DIO_SetNippleDir(u8 port_indx, u8 nipple, u8 dir) // sets 4 pins direction
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	2b 97       	sbiw	r28, 0x0b	; 11
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	6a 83       	std	Y+2, r22	; 0x02
    1a98:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==HIGH)
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <DIO_SetNippleDir+0x22>
    1aa0:	85 c0       	rjmp	.+266    	; 0x1bac <DIO_SetNippleDir+0x12c>
	{
		if(dir==OUTPUT)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <DIO_SetNippleDir+0x2a>
    1aa8:	3e c0       	rjmp	.+124    	; 0x1b26 <DIO_SetNippleDir+0xa6>
		{
			switch(port_indx)
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3b 87       	std	Y+11, r19	; 0x0b
    1ab2:	2a 87       	std	Y+10, r18	; 0x0a
    1ab4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	e9 f0       	breq	.+58     	; 0x1af8 <DIO_SetNippleDir+0x78>
    1abe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ac0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <DIO_SetNippleDir+0x52>
    1ac8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <DIO_SetNippleDir+0x68>
    1ad0:	2a c0       	rjmp	.+84     	; 0x1b26 <DIO_SetNippleDir+0xa6>
    1ad2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ad4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	b1 f0       	breq	.+44     	; 0x1b08 <DIO_SetNippleDir+0x88>
    1adc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ade:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	c9 f0       	breq	.+50     	; 0x1b18 <DIO_SetNippleDir+0x98>
    1ae6:	1f c0       	rjmp	.+62     	; 0x1b26 <DIO_SetNippleDir+0xa6>
			{
			case PORTA:
				DDRA_REG|=0b11110000;
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 6f       	ori	r24, 0xF0	; 240
    1af4:	8c 93       	st	X, r24
    1af6:	17 c0       	rjmp	.+46     	; 0x1b26 <DIO_SetNippleDir+0xa6>
				break;
			case PORTB:
				DDRB_REG|=0b11110000;
    1af8:	a7 e3       	ldi	r26, 0x37	; 55
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e7 e3       	ldi	r30, 0x37	; 55
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 6f       	ori	r24, 0xF0	; 240
    1b04:	8c 93       	st	X, r24
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <DIO_SetNippleDir+0xa6>
				break;
			case PORTC:
				DDRC_REG|=0b11110000;
    1b08:	a4 e3       	ldi	r26, 0x34	; 52
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e4 e3       	ldi	r30, 0x34	; 52
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 6f       	ori	r24, 0xF0	; 240
    1b14:	8c 93       	st	X, r24
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <DIO_SetNippleDir+0xa6>
				break;
			case PORTD:
				DDRD_REG|=0b11110000;
    1b18:	a1 e3       	ldi	r26, 0x31	; 49
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e1 e3       	ldi	r30, 0x31	; 49
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 6f       	ori	r24, 0xF0	; 240
    1b24:	8c 93       	st	X, r24
				break;
			}
		}
		if(dir==INPUT)
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <DIO_SetNippleDir+0xae>
    1b2c:	c7 c0       	rjmp	.+398    	; 0x1cbc <DIO_SetNippleDir+0x23c>
		{
			switch(port_indx)
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	39 87       	std	Y+9, r19	; 0x09
    1b36:	28 87       	std	Y+8, r18	; 0x08
    1b38:	88 85       	ldd	r24, Y+8	; 0x08
    1b3a:	99 85       	ldd	r25, Y+9	; 0x09
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	e9 f0       	breq	.+58     	; 0x1b7c <DIO_SetNippleDir+0xfc>
    1b42:	28 85       	ldd	r18, Y+8	; 0x08
    1b44:	39 85       	ldd	r19, Y+9	; 0x09
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <DIO_SetNippleDir+0xd6>
    1b4c:	88 85       	ldd	r24, Y+8	; 0x08
    1b4e:	99 85       	ldd	r25, Y+9	; 0x09
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <DIO_SetNippleDir+0xec>
    1b54:	b3 c0       	rjmp	.+358    	; 0x1cbc <DIO_SetNippleDir+0x23c>
    1b56:	28 85       	ldd	r18, Y+8	; 0x08
    1b58:	39 85       	ldd	r19, Y+9	; 0x09
    1b5a:	22 30       	cpi	r18, 0x02	; 2
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	b1 f0       	breq	.+44     	; 0x1b8c <DIO_SetNippleDir+0x10c>
    1b60:	88 85       	ldd	r24, Y+8	; 0x08
    1b62:	99 85       	ldd	r25, Y+9	; 0x09
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	91 05       	cpc	r25, r1
    1b68:	c9 f0       	breq	.+50     	; 0x1b9c <DIO_SetNippleDir+0x11c>
    1b6a:	a8 c0       	rjmp	.+336    	; 0x1cbc <DIO_SetNippleDir+0x23c>
			{
			case PORTA:
				DDRA_REG&=0b00001111;
    1b6c:	aa e3       	ldi	r26, 0x3A	; 58
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ea e3       	ldi	r30, 0x3A	; 58
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	8f 70       	andi	r24, 0x0F	; 15
    1b78:	8c 93       	st	X, r24
    1b7a:	a0 c0       	rjmp	.+320    	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			case PORTB:
				DDRB_REG&=0b00001111;
    1b7c:	a7 e3       	ldi	r26, 0x37	; 55
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e7 e3       	ldi	r30, 0x37	; 55
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8f 70       	andi	r24, 0x0F	; 15
    1b88:	8c 93       	st	X, r24
    1b8a:	98 c0       	rjmp	.+304    	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			case PORTC:
				DDRC_REG&=0b00001111;
    1b8c:	a4 e3       	ldi	r26, 0x34	; 52
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e4 e3       	ldi	r30, 0x34	; 52
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 70       	andi	r24, 0x0F	; 15
    1b98:	8c 93       	st	X, r24
    1b9a:	90 c0       	rjmp	.+288    	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			case PORTD:
				DDRD_REG&=0b00001111;
    1b9c:	a1 e3       	ldi	r26, 0x31	; 49
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e1 e3       	ldi	r30, 0x31	; 49
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8f 70       	andi	r24, 0x0F	; 15
    1ba8:	8c 93       	st	X, r24
    1baa:	88 c0       	rjmp	.+272    	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			}
		}
	}
	else if(nipple==LOW)
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <DIO_SetNippleDir+0x134>
    1bb2:	84 c0       	rjmp	.+264    	; 0x1cbc <DIO_SetNippleDir+0x23c>
	{
		if(dir==OUTPUT)
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <DIO_SetNippleDir+0x13c>
    1bba:	3e c0       	rjmp	.+124    	; 0x1c38 <DIO_SetNippleDir+0x1b8>
		{
			switch(port_indx)
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3f 83       	std	Y+7, r19	; 0x07
    1bc4:	2e 83       	std	Y+6, r18	; 0x06
    1bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	91 05       	cpc	r25, r1
    1bce:	e9 f0       	breq	.+58     	; 0x1c0a <DIO_SetNippleDir+0x18a>
    1bd0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <DIO_SetNippleDir+0x164>
    1bda:	8e 81       	ldd	r24, Y+6	; 0x06
    1bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <DIO_SetNippleDir+0x17a>
    1be2:	2a c0       	rjmp	.+84     	; 0x1c38 <DIO_SetNippleDir+0x1b8>
    1be4:	2e 81       	ldd	r18, Y+6	; 0x06
    1be6:	3f 81       	ldd	r19, Y+7	; 0x07
    1be8:	22 30       	cpi	r18, 0x02	; 2
    1bea:	31 05       	cpc	r19, r1
    1bec:	b1 f0       	breq	.+44     	; 0x1c1a <DIO_SetNippleDir+0x19a>
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	c9 f0       	breq	.+50     	; 0x1c2a <DIO_SetNippleDir+0x1aa>
    1bf8:	1f c0       	rjmp	.+62     	; 0x1c38 <DIO_SetNippleDir+0x1b8>
			{
			case PORTA:
				DDRA_REG|=0b00001111;
    1bfa:	aa e3       	ldi	r26, 0x3A	; 58
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ea e3       	ldi	r30, 0x3A	; 58
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 60       	ori	r24, 0x0F	; 15
    1c06:	8c 93       	st	X, r24
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTB:
				DDRB_REG|=0b00001111;
    1c0a:	a7 e3       	ldi	r26, 0x37	; 55
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e7 e3       	ldi	r30, 0x37	; 55
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 60       	ori	r24, 0x0F	; 15
    1c16:	8c 93       	st	X, r24
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTC:
				DDRC_REG|=0b00001111;
    1c1a:	a4 e3       	ldi	r26, 0x34	; 52
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e4 e3       	ldi	r30, 0x34	; 52
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 60       	ori	r24, 0x0F	; 15
    1c26:	8c 93       	st	X, r24
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <DIO_SetNippleDir+0x1b8>
				break;
			case PORTD:
				DDRD_REG|=0b00001111;
    1c2a:	a1 e3       	ldi	r26, 0x31	; 49
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e1 e3       	ldi	r30, 0x31	; 49
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 60       	ori	r24, 0x0F	; 15
    1c36:	8c 93       	st	X, r24
				break;
			}
		}
		if(dir==INPUT)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <DIO_SetNippleDir+0x1c0>
    1c3e:	3e c0       	rjmp	.+124    	; 0x1cbc <DIO_SetNippleDir+0x23c>
		{
			switch(port_indx)
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	3d 83       	std	Y+5, r19	; 0x05
    1c48:	2c 83       	std	Y+4, r18	; 0x04
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	e9 f0       	breq	.+58     	; 0x1c8e <DIO_SetNippleDir+0x20e>
    1c54:	2c 81       	ldd	r18, Y+4	; 0x04
    1c56:	3d 81       	ldd	r19, Y+5	; 0x05
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <DIO_SetNippleDir+0x1e8>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <DIO_SetNippleDir+0x1fe>
    1c66:	2a c0       	rjmp	.+84     	; 0x1cbc <DIO_SetNippleDir+0x23c>
    1c68:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	b1 f0       	breq	.+44     	; 0x1c9e <DIO_SetNippleDir+0x21e>
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	c9 f0       	breq	.+50     	; 0x1cae <DIO_SetNippleDir+0x22e>
    1c7c:	1f c0       	rjmp	.+62     	; 0x1cbc <DIO_SetNippleDir+0x23c>
			{
			case PORTA:
				DDRA_REG&=0b11110000;
    1c7e:	aa e3       	ldi	r26, 0x3A	; 58
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	ea e3       	ldi	r30, 0x3A	; 58
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	80 7f       	andi	r24, 0xF0	; 240
    1c8a:	8c 93       	st	X, r24
    1c8c:	17 c0       	rjmp	.+46     	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			case PORTB:
				DDRB_REG&=0b11110000;
    1c8e:	a7 e3       	ldi	r26, 0x37	; 55
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e7 e3       	ldi	r30, 0x37	; 55
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 7f       	andi	r24, 0xF0	; 240
    1c9a:	8c 93       	st	X, r24
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			case PORTC:
				DDRC_REG&=0b11110000;
    1c9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e4 e3       	ldi	r30, 0x34	; 52
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 7f       	andi	r24, 0xF0	; 240
    1caa:	8c 93       	st	X, r24
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <DIO_SetNippleDir+0x23c>
				break;
			case PORTD:
				DDRD_REG&=0b11110000;
    1cae:	a1 e3       	ldi	r26, 0x31	; 49
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e1 e3       	ldi	r30, 0x31	; 49
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	80 7f       	andi	r24, 0xF0	; 240
    1cba:	8c 93       	st	X, r24
				break;
			}

		}
	}
}
    1cbc:	2b 96       	adiw	r28, 0x0b	; 11
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <DIO_SetNippleVal>:

void DIO_SetNippleVal(u8 port_indx, u8 nipple, u8 val) // to set 4 pins value
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	2b 97       	sbiw	r28, 0x0b	; 11
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	6a 83       	std	Y+2, r22	; 0x02
    1ce6:	4b 83       	std	Y+3, r20	; 0x03
if(nipple==HIGH)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <DIO_SetNippleVal+0x22>
    1cee:	85 c0       	rjmp	.+266    	; 0x1dfa <DIO_SetNippleVal+0x12c>
{
	if(val==HIGH)
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <DIO_SetNippleVal+0x2a>
    1cf6:	3e c0       	rjmp	.+124    	; 0x1d74 <DIO_SetNippleVal+0xa6>
	{
		switch(port_indx)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3b 87       	std	Y+11, r19	; 0x0b
    1d00:	2a 87       	std	Y+10, r18	; 0x0a
    1d02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	e9 f0       	breq	.+58     	; 0x1d46 <DIO_SetNippleVal+0x78>
    1d0c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d0e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <DIO_SetNippleVal+0x52>
    1d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <DIO_SetNippleVal+0x68>
    1d1e:	2a c0       	rjmp	.+84     	; 0x1d74 <DIO_SetNippleVal+0xa6>
    1d20:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d22:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	b1 f0       	breq	.+44     	; 0x1d56 <DIO_SetNippleVal+0x88>
    1d2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	91 05       	cpc	r25, r1
    1d32:	c9 f0       	breq	.+50     	; 0x1d66 <DIO_SetNippleVal+0x98>
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <DIO_SetNippleVal+0xa6>
		{
		case PORTA:
			PORTA_REG|=0b11110000;
    1d36:	ab e3       	ldi	r26, 0x3B	; 59
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	eb e3       	ldi	r30, 0x3B	; 59
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 6f       	ori	r24, 0xF0	; 240
    1d42:	8c 93       	st	X, r24
    1d44:	17 c0       	rjmp	.+46     	; 0x1d74 <DIO_SetNippleVal+0xa6>
			break;
		case PORTB:
			PORTB_REG|=0b11110000;
    1d46:	a8 e3       	ldi	r26, 0x38	; 56
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e8 e3       	ldi	r30, 0x38	; 56
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 6f       	ori	r24, 0xF0	; 240
    1d52:	8c 93       	st	X, r24
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <DIO_SetNippleVal+0xa6>
			break;
		case PORTC:
			PORTC_REG|=0b11110000;
    1d56:	a5 e3       	ldi	r26, 0x35	; 53
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e5 e3       	ldi	r30, 0x35	; 53
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 6f       	ori	r24, 0xF0	; 240
    1d62:	8c 93       	st	X, r24
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <DIO_SetNippleVal+0xa6>
			break;
		case PORTD:
			PORTD_REG|=0b11110000;
    1d66:	a2 e3       	ldi	r26, 0x32	; 50
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e2 e3       	ldi	r30, 0x32	; 50
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 6f       	ori	r24, 0xF0	; 240
    1d72:	8c 93       	st	X, r24
			break;
		}
	}
	if(val==LOW)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	88 23       	and	r24, r24
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <DIO_SetNippleVal+0xae>
    1d7a:	c7 c0       	rjmp	.+398    	; 0x1f0a <DIO_SetNippleVal+0x23c>
	{
		switch(port_indx)
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	39 87       	std	Y+9, r19	; 0x09
    1d84:	28 87       	std	Y+8, r18	; 0x08
    1d86:	88 85       	ldd	r24, Y+8	; 0x08
    1d88:	99 85       	ldd	r25, Y+9	; 0x09
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	e9 f0       	breq	.+58     	; 0x1dca <DIO_SetNippleVal+0xfc>
    1d90:	28 85       	ldd	r18, Y+8	; 0x08
    1d92:	39 85       	ldd	r19, Y+9	; 0x09
    1d94:	22 30       	cpi	r18, 0x02	; 2
    1d96:	31 05       	cpc	r19, r1
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <DIO_SetNippleVal+0xd6>
    1d9a:	88 85       	ldd	r24, Y+8	; 0x08
    1d9c:	99 85       	ldd	r25, Y+9	; 0x09
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	61 f0       	breq	.+24     	; 0x1dba <DIO_SetNippleVal+0xec>
    1da2:	b3 c0       	rjmp	.+358    	; 0x1f0a <DIO_SetNippleVal+0x23c>
    1da4:	28 85       	ldd	r18, Y+8	; 0x08
    1da6:	39 85       	ldd	r19, Y+9	; 0x09
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	b1 f0       	breq	.+44     	; 0x1dda <DIO_SetNippleVal+0x10c>
    1dae:	88 85       	ldd	r24, Y+8	; 0x08
    1db0:	99 85       	ldd	r25, Y+9	; 0x09
    1db2:	83 30       	cpi	r24, 0x03	; 3
    1db4:	91 05       	cpc	r25, r1
    1db6:	c9 f0       	breq	.+50     	; 0x1dea <DIO_SetNippleVal+0x11c>
    1db8:	a8 c0       	rjmp	.+336    	; 0x1f0a <DIO_SetNippleVal+0x23c>
		{
		case PORTA:
			PORTA_REG&=0b00001111;
    1dba:	ab e3       	ldi	r26, 0x3B	; 59
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	eb e3       	ldi	r30, 0x3B	; 59
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8f 70       	andi	r24, 0x0F	; 15
    1dc6:	8c 93       	st	X, r24
    1dc8:	a0 c0       	rjmp	.+320    	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		case PORTB:
			PORTB_REG&=0b00001111;
    1dca:	a8 e3       	ldi	r26, 0x38	; 56
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 70       	andi	r24, 0x0F	; 15
    1dd6:	8c 93       	st	X, r24
    1dd8:	98 c0       	rjmp	.+304    	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		case PORTC:
			PORTC_REG&=0b00001111;
    1dda:	a5 e3       	ldi	r26, 0x35	; 53
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e3       	ldi	r30, 0x35	; 53
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	8f 70       	andi	r24, 0x0F	; 15
    1de6:	8c 93       	st	X, r24
    1de8:	90 c0       	rjmp	.+288    	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		case PORTD:
			PORTD_REG&=0b00001111;
    1dea:	a2 e3       	ldi	r26, 0x32	; 50
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 70       	andi	r24, 0x0F	; 15
    1df6:	8c 93       	st	X, r24
    1df8:	88 c0       	rjmp	.+272    	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		}
	}
}
else if(nipple==LOW)
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	88 23       	and	r24, r24
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <DIO_SetNippleVal+0x134>
    1e00:	84 c0       	rjmp	.+264    	; 0x1f0a <DIO_SetNippleVal+0x23c>
{
	if(val==HIGH)
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	81 30       	cpi	r24, 0x01	; 1
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <DIO_SetNippleVal+0x13c>
    1e08:	3e c0       	rjmp	.+124    	; 0x1e86 <DIO_SetNippleVal+0x1b8>
	{
		switch(port_indx)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3f 83       	std	Y+7, r19	; 0x07
    1e12:	2e 83       	std	Y+6, r18	; 0x06
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	e9 f0       	breq	.+58     	; 0x1e58 <DIO_SetNippleVal+0x18a>
    1e1e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e20:	3f 81       	ldd	r19, Y+7	; 0x07
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <DIO_SetNippleVal+0x164>
    1e28:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <DIO_SetNippleVal+0x17a>
    1e30:	2a c0       	rjmp	.+84     	; 0x1e86 <DIO_SetNippleVal+0x1b8>
    1e32:	2e 81       	ldd	r18, Y+6	; 0x06
    1e34:	3f 81       	ldd	r19, Y+7	; 0x07
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	b1 f0       	breq	.+44     	; 0x1e68 <DIO_SetNippleVal+0x19a>
    1e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	c9 f0       	breq	.+50     	; 0x1e78 <DIO_SetNippleVal+0x1aa>
    1e46:	1f c0       	rjmp	.+62     	; 0x1e86 <DIO_SetNippleVal+0x1b8>
		{
		case PORTA:
			PORTA_REG|=0b00001111;
    1e48:	ab e3       	ldi	r26, 0x3B	; 59
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	eb e3       	ldi	r30, 0x3B	; 59
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 60       	ori	r24, 0x0F	; 15
    1e54:	8c 93       	st	X, r24
    1e56:	17 c0       	rjmp	.+46     	; 0x1e86 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTB:
			PORTB_REG|=0b00001111;
    1e58:	a8 e3       	ldi	r26, 0x38	; 56
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e3       	ldi	r30, 0x38	; 56
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 60       	ori	r24, 0x0F	; 15
    1e64:	8c 93       	st	X, r24
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTC:
			PORTC_REG|=0b00001111;
    1e68:	a5 e3       	ldi	r26, 0x35	; 53
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e3       	ldi	r30, 0x35	; 53
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8f 60       	ori	r24, 0x0F	; 15
    1e74:	8c 93       	st	X, r24
    1e76:	07 c0       	rjmp	.+14     	; 0x1e86 <DIO_SetNippleVal+0x1b8>
			break;
		case PORTD:
			PORTD_REG|=0b00001111;
    1e78:	a2 e3       	ldi	r26, 0x32	; 50
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e2 e3       	ldi	r30, 0x32	; 50
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 60       	ori	r24, 0x0F	; 15
    1e84:	8c 93       	st	X, r24
			break;
		}
	}
	if(val==LOW)
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 23       	and	r24, r24
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <DIO_SetNippleVal+0x1c0>
    1e8c:	3e c0       	rjmp	.+124    	; 0x1f0a <DIO_SetNippleVal+0x23c>
	{
		switch(port_indx)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3d 83       	std	Y+5, r19	; 0x05
    1e96:	2c 83       	std	Y+4, r18	; 0x04
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	e9 f0       	breq	.+58     	; 0x1edc <DIO_SetNippleVal+0x20e>
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <DIO_SetNippleVal+0x1e8>
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	61 f0       	breq	.+24     	; 0x1ecc <DIO_SetNippleVal+0x1fe>
    1eb4:	2a c0       	rjmp	.+84     	; 0x1f0a <DIO_SetNippleVal+0x23c>
    1eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	b1 f0       	breq	.+44     	; 0x1eec <DIO_SetNippleVal+0x21e>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	c9 f0       	breq	.+50     	; 0x1efc <DIO_SetNippleVal+0x22e>
    1eca:	1f c0       	rjmp	.+62     	; 0x1f0a <DIO_SetNippleVal+0x23c>
		{
		case PORTA:
			PORTA_REG&=0b11110000;
    1ecc:	ab e3       	ldi	r26, 0x3B	; 59
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 7f       	andi	r24, 0xF0	; 240
    1ed8:	8c 93       	st	X, r24
    1eda:	17 c0       	rjmp	.+46     	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		case PORTB:
			PORTB_REG&=0b11110000;
    1edc:	a8 e3       	ldi	r26, 0x38	; 56
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 e3       	ldi	r30, 0x38	; 56
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 7f       	andi	r24, 0xF0	; 240
    1ee8:	8c 93       	st	X, r24
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		case PORTC:
			PORTC_REG&=0b11110000;
    1eec:	a5 e3       	ldi	r26, 0x35	; 53
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e5 e3       	ldi	r30, 0x35	; 53
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 7f       	andi	r24, 0xF0	; 240
    1ef8:	8c 93       	st	X, r24
    1efa:	07 c0       	rjmp	.+14     	; 0x1f0a <DIO_SetNippleVal+0x23c>
			break;
		case PORTD:
			PORTD_REG&=0b11110000;
    1efc:	a2 e3       	ldi	r26, 0x32	; 50
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e2 e3       	ldi	r30, 0x32	; 50
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 7f       	andi	r24, 0xF0	; 240
    1f08:	8c 93       	st	X, r24
		}

	}

	}
}
    1f0a:	2b 96       	adiw	r28, 0x0b	; 11
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <DIO_AssignPortVal>:

void DIO_AssignPortVal(u8 port_indx, u8 val) //assigns a value to a port
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <DIO_AssignPortVal+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <DIO_AssignPortVal+0x8>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_indx)
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	3c 83       	std	Y+4, r19	; 0x04
    1f34:	2b 83       	std	Y+3, r18	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	d1 f0       	breq	.+52     	; 0x1f74 <DIO_AssignPortVal+0x58>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <DIO_AssignPortVal+0x38>
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <DIO_AssignPortVal+0x4e>
    1f52:	1e c0       	rjmp	.+60     	; 0x1f90 <DIO_AssignPortVal+0x74>
    1f54:	2b 81       	ldd	r18, Y+3	; 0x03
    1f56:	3c 81       	ldd	r19, Y+4	; 0x04
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	81 f0       	breq	.+32     	; 0x1f7e <DIO_AssignPortVal+0x62>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <DIO_AssignPortVal+0x6c>
    1f68:	13 c0       	rjmp	.+38     	; 0x1f90 <DIO_AssignPortVal+0x74>
	{
	case PORTA:
		PORTA_REG=val;
    1f6a:	eb e3       	ldi	r30, 0x3B	; 59
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	80 83       	st	Z, r24
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <DIO_AssignPortVal+0x74>
		break;
	case PORTB:
		PORTB_REG=val;
    1f74:	e8 e3       	ldi	r30, 0x38	; 56
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	80 83       	st	Z, r24
    1f7c:	09 c0       	rjmp	.+18     	; 0x1f90 <DIO_AssignPortVal+0x74>
		break;
	case PORTC:
		PORTC_REG=val;
    1f7e:	e5 e3       	ldi	r30, 0x35	; 53
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	80 83       	st	Z, r24
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <DIO_AssignPortVal+0x74>
		break;
	case PORTD:
		PORTD_REG=val;
    1f88:	e2 e3       	ldi	r30, 0x32	; 50
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	80 83       	st	Z, r24
		break;

	}
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <DIO_AssignNippleVal>:


void DIO_AssignNippleVal(u8 port_indx, u8 nipple, u8 val)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	27 97       	sbiw	r28, 0x07	; 7
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	6a 83       	std	Y+2, r22	; 0x02
    1fb6:	4b 83       	std	Y+3, r20	; 0x03
	if(nipple==HIGH)
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <DIO_AssignNippleVal+0x22>
    1fbe:	7c c0       	rjmp	.+248    	; 0x20b8 <DIO_AssignNippleVal+0x11a>
	{
		{
			switch(port_indx)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3f 83       	std	Y+7, r19	; 0x07
    1fc8:	2e 83       	std	Y+6, r18	; 0x06
    1fca:	8e 81       	ldd	r24, Y+6	; 0x06
    1fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	69 f1       	breq	.+90     	; 0x202e <DIO_AssignNippleVal+0x90>
    1fd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd8:	22 30       	cpi	r18, 0x02	; 2
    1fda:	31 05       	cpc	r19, r1
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <DIO_AssignNippleVal+0x4a>
    1fde:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	69 f0       	breq	.+26     	; 0x2000 <DIO_AssignNippleVal+0x62>
    1fe6:	e7 c0       	rjmp	.+462    	; 0x21b6 <DIO_AssignNippleVal+0x218>
    1fe8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fea:	3f 81       	ldd	r19, Y+7	; 0x07
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	31 05       	cpc	r19, r1
    1ff0:	a9 f1       	breq	.+106    	; 0x205c <DIO_AssignNippleVal+0xbe>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <DIO_AssignNippleVal+0x60>
    1ffc:	46 c0       	rjmp	.+140    	; 0x208a <DIO_AssignNippleVal+0xec>
    1ffe:	db c0       	rjmp	.+438    	; 0x21b6 <DIO_AssignNippleVal+0x218>
			{
			case PORTA:
				ASSIGN_HIGH_NIBBLE(PORTA_REG,val);
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	80 7f       	andi	r24, 0xF0	; 240
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	90 81       	ld	r25, Z
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	89 2b       	or	r24, r25
    2014:	8c 93       	st	X, r24
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	8f 60       	ori	r24, 0x0F	; 15
    201a:	8b 83       	std	Y+3, r24	; 0x03
    201c:	ab e3       	ldi	r26, 0x3B	; 59
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	eb e3       	ldi	r30, 0x3B	; 59
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	90 81       	ld	r25, Z
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	89 23       	and	r24, r25
    202a:	8c 93       	st	X, r24
    202c:	c4 c0       	rjmp	.+392    	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			case PORTB:
				ASSIGN_HIGH_NIBBLE(PORTB_REG,val);
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	80 7f       	andi	r24, 0xF0	; 240
    2032:	8b 83       	std	Y+3, r24	; 0x03
    2034:	a8 e3       	ldi	r26, 0x38	; 56
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e8 e3       	ldi	r30, 0x38	; 56
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	90 81       	ld	r25, Z
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	89 2b       	or	r24, r25
    2042:	8c 93       	st	X, r24
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	8f 60       	ori	r24, 0x0F	; 15
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	a8 e3       	ldi	r26, 0x38	; 56
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e8 e3       	ldi	r30, 0x38	; 56
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	90 81       	ld	r25, Z
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	89 23       	and	r24, r25
    2058:	8c 93       	st	X, r24
    205a:	ad c0       	rjmp	.+346    	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			case PORTC:
				ASSIGN_HIGH_NIBBLE(PORTC_REG,val);
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	80 7f       	andi	r24, 0xF0	; 240
    2060:	8b 83       	std	Y+3, r24	; 0x03
    2062:	a5 e3       	ldi	r26, 0x35	; 53
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e5 e3       	ldi	r30, 0x35	; 53
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	90 81       	ld	r25, Z
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	89 2b       	or	r24, r25
    2070:	8c 93       	st	X, r24
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	8f 60       	ori	r24, 0x0F	; 15
    2076:	8b 83       	std	Y+3, r24	; 0x03
    2078:	a5 e3       	ldi	r26, 0x35	; 53
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e5 e3       	ldi	r30, 0x35	; 53
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	90 81       	ld	r25, Z
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	89 23       	and	r24, r25
    2086:	8c 93       	st	X, r24
    2088:	96 c0       	rjmp	.+300    	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			case PORTD:
				ASSIGN_HIGH_NIBBLE(PORTD_REG,val);
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	80 7f       	andi	r24, 0xF0	; 240
    208e:	8b 83       	std	Y+3, r24	; 0x03
    2090:	a2 e3       	ldi	r26, 0x32	; 50
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e2 e3       	ldi	r30, 0x32	; 50
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	90 81       	ld	r25, Z
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	89 2b       	or	r24, r25
    209e:	8c 93       	st	X, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	8f 60       	ori	r24, 0x0F	; 15
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	a2 e3       	ldi	r26, 0x32	; 50
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e2 e3       	ldi	r30, 0x32	; 50
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	90 81       	ld	r25, Z
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	89 23       	and	r24, r25
    20b4:	8c 93       	st	X, r24
    20b6:	7f c0       	rjmp	.+254    	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			}
		}
	}
	else if(nipple==LOW)
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	88 23       	and	r24, r24
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <DIO_AssignNippleVal+0x122>
    20be:	7b c0       	rjmp	.+246    	; 0x21b6 <DIO_AssignNippleVal+0x218>
	{
			switch(port_indx)
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3d 83       	std	Y+5, r19	; 0x05
    20c8:	2c 83       	std	Y+4, r18	; 0x04
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	69 f1       	breq	.+90     	; 0x212e <DIO_AssignNippleVal+0x190>
    20d4:	2c 81       	ldd	r18, Y+4	; 0x04
    20d6:	3d 81       	ldd	r19, Y+5	; 0x05
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <DIO_AssignNippleVal+0x14a>
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	9d 81       	ldd	r25, Y+5	; 0x05
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f0       	breq	.+26     	; 0x2100 <DIO_AssignNippleVal+0x162>
    20e6:	67 c0       	rjmp	.+206    	; 0x21b6 <DIO_AssignNippleVal+0x218>
    20e8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ea:	3d 81       	ldd	r19, Y+5	; 0x05
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	a9 f1       	breq	.+106    	; 0x215c <DIO_AssignNippleVal+0x1be>
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <DIO_AssignNippleVal+0x160>
    20fc:	46 c0       	rjmp	.+140    	; 0x218a <DIO_AssignNippleVal+0x1ec>
    20fe:	5b c0       	rjmp	.+182    	; 0x21b6 <DIO_AssignNippleVal+0x218>
			{
			case PORTA:
				ASSIGN_LOW_NIBBLE(PORTA_REG,val);
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	8f 70       	andi	r24, 0x0F	; 15
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	ab e3       	ldi	r26, 0x3B	; 59
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	eb e3       	ldi	r30, 0x3B	; 59
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	90 81       	ld	r25, Z
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	89 2b       	or	r24, r25
    2114:	8c 93       	st	X, r24
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	80 6f       	ori	r24, 0xF0	; 240
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	ab e3       	ldi	r26, 0x3B	; 59
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	eb e3       	ldi	r30, 0x3B	; 59
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	90 81       	ld	r25, Z
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	89 23       	and	r24, r25
    212a:	8c 93       	st	X, r24
    212c:	44 c0       	rjmp	.+136    	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			case PORTB:
				ASSIGN_LOW_NIBBLE(PORTB_REG,val);
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	8f 70       	andi	r24, 0x0F	; 15
    2132:	8b 83       	std	Y+3, r24	; 0x03
    2134:	a8 e3       	ldi	r26, 0x38	; 56
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e8 e3       	ldi	r30, 0x38	; 56
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	90 81       	ld	r25, Z
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	89 2b       	or	r24, r25
    2142:	8c 93       	st	X, r24
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	80 6f       	ori	r24, 0xF0	; 240
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	a8 e3       	ldi	r26, 0x38	; 56
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e8 e3       	ldi	r30, 0x38	; 56
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	90 81       	ld	r25, Z
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	89 23       	and	r24, r25
    2158:	8c 93       	st	X, r24
    215a:	2d c0       	rjmp	.+90     	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			case PORTC:
				ASSIGN_LOW_NIBBLE(PORTC_REG,val);
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	8f 70       	andi	r24, 0x0F	; 15
    2160:	8b 83       	std	Y+3, r24	; 0x03
    2162:	a5 e3       	ldi	r26, 0x35	; 53
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e5 e3       	ldi	r30, 0x35	; 53
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	90 81       	ld	r25, Z
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	89 2b       	or	r24, r25
    2170:	8c 93       	st	X, r24
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	80 6f       	ori	r24, 0xF0	; 240
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	a5 e3       	ldi	r26, 0x35	; 53
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e5 e3       	ldi	r30, 0x35	; 53
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	90 81       	ld	r25, Z
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	89 23       	and	r24, r25
    2186:	8c 93       	st	X, r24
    2188:	16 c0       	rjmp	.+44     	; 0x21b6 <DIO_AssignNippleVal+0x218>
				break;
			case PORTD:
				ASSIGN_LOW_NIBBLE(PORTD_REG,val);
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	8f 70       	andi	r24, 0x0F	; 15
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	a2 e3       	ldi	r26, 0x32	; 50
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e2 e3       	ldi	r30, 0x32	; 50
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	90 81       	ld	r25, Z
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	89 2b       	or	r24, r25
    219e:	8c 93       	st	X, r24
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	80 6f       	ori	r24, 0xF0	; 240
    21a4:	8b 83       	std	Y+3, r24	; 0x03
    21a6:	a2 e3       	ldi	r26, 0x32	; 50
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e2 e3       	ldi	r30, 0x32	; 50
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	90 81       	ld	r25, Z
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	89 23       	and	r24, r25
    21b4:	8c 93       	st	X, r24
				break;
			}
		}
	}
    21b6:	27 96       	adiw	r28, 0x07	; 7
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <DIO_GetPinVal>:


u8 DIO_GetPinVal(u8 port_indx, u8 pin_indx) // get pin value (high,low) from a pin for AVR
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <DIO_GetPinVal+0x6>
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <DIO_GetPinVal+0x8>
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
    21da:	19 82       	std	Y+1, r1	; 0x01
	switch(port_indx)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	3d 83       	std	Y+5, r19	; 0x05
    21e4:	2c 83       	std	Y+4, r18	; 0x04
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	91 05       	cpc	r25, r1
    21ee:	39 f1       	breq	.+78     	; 0x223e <DIO_GetPinVal+0x76>
    21f0:	2c 81       	ldd	r18, Y+4	; 0x04
    21f2:	3d 81       	ldd	r19, Y+5	; 0x05
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	2c f4       	brge	.+10     	; 0x2204 <DIO_GetPinVal+0x3c>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	61 f0       	breq	.+24     	; 0x221a <DIO_GetPinVal+0x52>
    2202:	52 c0       	rjmp	.+164    	; 0x22a8 <DIO_GetPinVal+0xe0>
    2204:	2c 81       	ldd	r18, Y+4	; 0x04
    2206:	3d 81       	ldd	r19, Y+5	; 0x05
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	51 f1       	breq	.+84     	; 0x2262 <DIO_GetPinVal+0x9a>
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	9d 81       	ldd	r25, Y+5	; 0x05
    2212:	83 30       	cpi	r24, 0x03	; 3
    2214:	91 05       	cpc	r25, r1
    2216:	b9 f1       	breq	.+110    	; 0x2286 <DIO_GetPinVal+0xbe>
    2218:	47 c0       	rjmp	.+142    	; 0x22a8 <DIO_GetPinVal+0xe0>
	{
	case PORTA:
		pin_value=(PINA_REG)&(1<<pin_indx);
    221a:	e9 e3       	ldi	r30, 0x39	; 57
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 2e       	mov	r0, r18
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <DIO_GetPinVal+0x6c>
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	0a 94       	dec	r0
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <DIO_GetPinVal+0x68>
    2238:	84 23       	and	r24, r20
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	35 c0       	rjmp	.+106    	; 0x22a8 <DIO_GetPinVal+0xe0>
		break;
	case PORTB:
		pin_value=(PINB_REG)&(1<<pin_indx);
    223e:	e6 e3       	ldi	r30, 0x36	; 54
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 2e       	mov	r0, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_GetPinVal+0x90>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	0a 94       	dec	r0
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <DIO_GetPinVal+0x8c>
    225c:	84 23       	and	r24, r20
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	23 c0       	rjmp	.+70     	; 0x22a8 <DIO_GetPinVal+0xe0>
		break;
	case PORTC:
		pin_value=(PINC_REG)&(1<<pin_indx);
    2262:	e3 e3       	ldi	r30, 0x33	; 51
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	48 2f       	mov	r20, r24
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	02 2e       	mov	r0, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <DIO_GetPinVal+0xb4>
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	0a 94       	dec	r0
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <DIO_GetPinVal+0xb0>
    2280:	84 23       	and	r24, r20
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	11 c0       	rjmp	.+34     	; 0x22a8 <DIO_GetPinVal+0xe0>
		break;
	case PORTD:
		pin_value=(PIND_REG)&(1<<pin_indx);
    2286:	e0 e3       	ldi	r30, 0x30	; 48
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	48 2f       	mov	r20, r24
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 2e       	mov	r0, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <DIO_GetPinVal+0xd8>
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	0a 94       	dec	r0
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <DIO_GetPinVal+0xd4>
    22a4:	84 23       	and	r24, r20
    22a6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return pin_value;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <LCD_vidInit>:


#if BIT_MODE_4 == DISABLE

	void LCD_vidInit(void)
	{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	2e 97       	sbiw	r28, 0x0e	; 14
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
		DIO_vidSetPortDir(PORT_DATA_NO , OUTPUT);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	0e 94 80 07 	call	0xf00	; 0xf00 <DIO_vidSetPortDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , EN , OUTPUT);
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidSetPinDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , RW , OUTPUT);
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidSetPinDir>
		DIO_vidSetPinDir(PORT_CTRL_NO , RS , OUTPUT);
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	41 e0       	ldi	r20, 0x01	; 1
    22f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vidSetPinDir>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a8 e4       	ldi	r26, 0x48	; 72
    22fa:	b2 e4       	ldi	r27, 0x42	; 66
    22fc:	8b 87       	std	Y+11, r24	; 0x0b
    22fe:	9c 87       	std	Y+12, r25	; 0x0c
    2300:	ad 87       	std	Y+13, r26	; 0x0d
    2302:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	6b 85       	ldd	r22, Y+11	; 0x0b
    2306:	7c 85       	ldd	r23, Y+12	; 0x0c
    2308:	8d 85       	ldd	r24, Y+13	; 0x0d
    230a:	9e 85       	ldd	r25, Y+14	; 0x0e
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	4a ef       	ldi	r20, 0xFA	; 250
    2312:	54 e4       	ldi	r21, 0x44	; 68
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	8f 83       	std	Y+7, r24	; 0x07
    231e:	98 87       	std	Y+8, r25	; 0x08
    2320:	a9 87       	std	Y+9, r26	; 0x09
    2322:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2324:	6f 81       	ldd	r22, Y+7	; 0x07
    2326:	78 85       	ldd	r23, Y+8	; 0x08
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e8       	ldi	r20, 0x80	; 128
    2332:	5f e3       	ldi	r21, 0x3F	; 63
    2334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2338:	88 23       	and	r24, r24
    233a:	2c f4       	brge	.+10     	; 0x2346 <LCD_vidInit+0x8c>
		__ticks = 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	4f e7       	ldi	r20, 0x7F	; 127
    2354:	57 e4       	ldi	r21, 0x47	; 71
    2356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235a:	18 16       	cp	r1, r24
    235c:	4c f5       	brge	.+82     	; 0x23b0 <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	bc 01       	movw	r22, r24
    2378:	cd 01       	movw	r24, r26
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <LCD_vidInit+0xec>
    2388:	88 ec       	ldi	r24, 0xC8	; 200
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_vidInit+0xda>
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	69 f7       	brne	.-38     	; 0x2388 <LCD_vidInit+0xce>
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	78 85       	ldd	r23, Y+8	; 0x08
    23b4:	89 85       	ldd	r24, Y+9	; 0x09
    23b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_vidInit+0x116>
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(50);
		LCD_vidCmd(CMD_FUNCTION_8BIT);
    23d8:	88 e3       	ldi	r24, 0x38	; 56
    23da:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidCmd(CMD_DISPLAY_ON);
    23de:	8c e0       	ldi	r24, 0x0C	; 12
    23e0:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidCmd(CMD_ENTRY_MODE);
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidCmd(CMD_CLEAR);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidCmd(CMD_HOME);
    23f0:	80 e8       	ldi	r24, 0x80	; 128
    23f2:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>


	}
    23f6:	2e 96       	adiw	r28, 0x0e	; 14
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_vidCmd>:


	void LCD_vidCmd(uint8 cmd)
	{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	ab 97       	sbiw	r28, 0x2b	; 43
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RS,LOW);
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RW,LOW);
    2432:	83 e0       	ldi	r24, 0x03	; 3
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>

		DIO_vidWriteOnPort(PORT_DATA_NO,cmd);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	6b a5       	ldd	r22, Y+43	; 0x2b
    2440:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_vidWriteOnPort>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e8       	ldi	r26, 0x80	; 128
    244a:	bf e3       	ldi	r27, 0x3F	; 63
    244c:	8f a3       	std	Y+39, r24	; 0x27
    244e:	98 a7       	std	Y+40, r25	; 0x28
    2450:	a9 a7       	std	Y+41, r26	; 0x29
    2452:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	6f a1       	ldd	r22, Y+39	; 0x27
    2456:	78 a5       	ldd	r23, Y+40	; 0x28
    2458:	89 a5       	ldd	r24, Y+41	; 0x29
    245a:	9a a5       	ldd	r25, Y+42	; 0x2a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a ef       	ldi	r20, 0xFA	; 250
    2462:	54 e4       	ldi	r21, 0x44	; 68
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8b a3       	std	Y+35, r24	; 0x23
    246e:	9c a3       	std	Y+36, r25	; 0x24
    2470:	ad a3       	std	Y+37, r26	; 0x25
    2472:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2474:	6b a1       	ldd	r22, Y+35	; 0x23
    2476:	7c a1       	ldd	r23, Y+36	; 0x24
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	9e a1       	ldd	r25, Y+38	; 0x26
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <LCD_vidCmd+0x8e>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9a a3       	std	Y+34, r25	; 0x22
    2492:	89 a3       	std	Y+33, r24	; 0x21
    2494:	3f c0       	rjmp	.+126    	; 0x2514 <LCD_vidCmd+0x10c>
	else if (__tmp > 65535)
    2496:	6b a1       	ldd	r22, Y+35	; 0x23
    2498:	7c a1       	ldd	r23, Y+36	; 0x24
    249a:	8d a1       	ldd	r24, Y+37	; 0x25
    249c:	9e a1       	ldd	r25, Y+38	; 0x26
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	4c f5       	brge	.+82     	; 0x2500 <LCD_vidCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6f a1       	ldd	r22, Y+39	; 0x27
    24b0:	78 a5       	ldd	r23, Y+40	; 0x28
    24b2:	89 a5       	ldd	r24, Y+41	; 0x29
    24b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <LCD_vidCmd+0xee>
    24d8:	88 ec       	ldi	r24, 0xC8	; 200
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	98 a3       	std	Y+32, r25	; 0x20
    24de:	8f 8f       	std	Y+31, r24	; 0x1f
    24e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e2:	98 a1       	ldd	r25, Y+32	; 0x20
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_vidCmd+0xdc>
    24e8:	98 a3       	std	Y+32, r25	; 0x20
    24ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	89 a1       	ldd	r24, Y+33	; 0x21
    24ee:	9a a1       	ldd	r25, Y+34	; 0x22
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	89 a1       	ldd	r24, Y+33	; 0x21
    24f8:	9a a1       	ldd	r25, Y+34	; 0x22
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	69 f7       	brne	.-38     	; 0x24d8 <LCD_vidCmd+0xd0>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <LCD_vidCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	6b a1       	ldd	r22, Y+35	; 0x23
    2502:	7c a1       	ldd	r23, Y+36	; 0x24
    2504:	8d a1       	ldd	r24, Y+37	; 0x25
    2506:	9e a1       	ldd	r25, Y+38	; 0x26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	9a a1       	ldd	r25, Y+34	; 0x22
    2518:	9e 8f       	std	Y+30, r25	; 0x1e
    251a:	8d 8f       	std	Y+29, r24	; 0x1d
    251c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_vidCmd+0x118>
    2524:	9e 8f       	std	Y+30, r25	; 0x1e
    2526:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,LOW);
    2528:	83 e0       	ldi	r24, 0x03	; 3
    252a:	62 e0       	ldi	r22, 0x02	; 2
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a0 ea       	ldi	r26, 0xA0	; 160
    2538:	b0 e4       	ldi	r27, 0x40	; 64
    253a:	89 8f       	std	Y+25, r24	; 0x19
    253c:	9a 8f       	std	Y+26, r25	; 0x1a
    253e:	ab 8f       	std	Y+27, r26	; 0x1b
    2540:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	69 8d       	ldd	r22, Y+25	; 0x19
    2544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a ef       	ldi	r20, 0xFA	; 250
    2550:	54 e4       	ldi	r21, 0x44	; 68
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	8d 8b       	std	Y+21, r24	; 0x15
    255c:	9e 8b       	std	Y+22, r25	; 0x16
    255e:	af 8b       	std	Y+23, r26	; 0x17
    2560:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2562:	6d 89       	ldd	r22, Y+21	; 0x15
    2564:	7e 89       	ldd	r23, Y+22	; 0x16
    2566:	8f 89       	ldd	r24, Y+23	; 0x17
    2568:	98 8d       	ldd	r25, Y+24	; 0x18
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	2c f4       	brge	.+10     	; 0x2584 <LCD_vidCmd+0x17c>
		__ticks = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
    2582:	3f c0       	rjmp	.+126    	; 0x2602 <LCD_vidCmd+0x1fa>
	else if (__tmp > 65535)
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	4c f5       	brge	.+82     	; 0x25ee <LCD_vidCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	69 8d       	ldd	r22, Y+25	; 0x19
    259e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9c 8b       	std	Y+20, r25	; 0x14
    25c2:	8b 8b       	std	Y+19, r24	; 0x13
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <LCD_vidCmd+0x1dc>
    25c6:	88 ec       	ldi	r24, 0xC8	; 200
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9a 8b       	std	Y+18, r25	; 0x12
    25cc:	89 8b       	std	Y+17, r24	; 0x11
    25ce:	89 89       	ldd	r24, Y+17	; 0x11
    25d0:	9a 89       	ldd	r25, Y+18	; 0x12
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_vidCmd+0x1ca>
    25d6:	9a 8b       	std	Y+18, r25	; 0x12
    25d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	8b 89       	ldd	r24, Y+19	; 0x13
    25e6:	9c 89       	ldd	r25, Y+20	; 0x14
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f7       	brne	.-38     	; 0x25c6 <LCD_vidCmd+0x1be>
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <LCD_vidCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	6d 89       	ldd	r22, Y+21	; 0x15
    25f0:	7e 89       	ldd	r23, Y+22	; 0x16
    25f2:	8f 89       	ldd	r24, Y+23	; 0x17
    25f4:	98 8d       	ldd	r25, Y+24	; 0x18
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9c 8b       	std	Y+20, r25	; 0x14
    2600:	8b 8b       	std	Y+19, r24	; 0x13
    2602:	8b 89       	ldd	r24, Y+19	; 0x13
    2604:	9c 89       	ldd	r25, Y+20	; 0x14
    2606:	98 8b       	std	Y+16, r25	; 0x10
    2608:	8f 87       	std	Y+15, r24	; 0x0f
    260a:	8f 85       	ldd	r24, Y+15	; 0x0f
    260c:	98 89       	ldd	r25, Y+16	; 0x10
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_vidCmd+0x206>
    2612:	98 8b       	std	Y+16, r25	; 0x10
    2614:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    2616:	83 e0       	ldi	r24, 0x03	; 3
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e4       	ldi	r27, 0x40	; 64
    2628:	8b 87       	std	Y+11, r24	; 0x0b
    262a:	9c 87       	std	Y+12, r25	; 0x0c
    262c:	ad 87       	std	Y+13, r26	; 0x0d
    262e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	6b 85       	ldd	r22, Y+11	; 0x0b
    2632:	7c 85       	ldd	r23, Y+12	; 0x0c
    2634:	8d 85       	ldd	r24, Y+13	; 0x0d
    2636:	9e 85       	ldd	r25, Y+14	; 0x0e
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a ef       	ldi	r20, 0xFA	; 250
    263e:	54 e4       	ldi	r21, 0x44	; 68
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8f 83       	std	Y+7, r24	; 0x07
    264a:	98 87       	std	Y+8, r25	; 0x08
    264c:	a9 87       	std	Y+9, r26	; 0x09
    264e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <LCD_vidCmd+0x26a>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <LCD_vidCmd+0x2e8>
	else if (__tmp > 65535)
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	4c f5       	brge	.+82     	; 0x26dc <LCD_vidCmd+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e2       	ldi	r20, 0x20	; 32
    2698:	51 e4       	ldi	r21, 0x41	; 65
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <LCD_vidCmd+0x2ca>
    26b4:	88 ec       	ldi	r24, 0xC8	; 200
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_vidCmd+0x2b8>
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <LCD_vidCmd+0x2ac>
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <LCD_vidCmd+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_vidCmd+0x2f4>
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
    2704:	ab 96       	adiw	r28, 0x2b	; 43
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <LCD_vidDispChar>:

	void LCD_vidDispChar(uint8 data)
	{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	6d 97       	sbiw	r28, 0x1d	; 29
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	62 e0       	ldi	r22, 0x02	; 2
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RS,HIGH);
    2736:	83 e0       	ldi	r24, 0x03	; 3
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
		DIO_vidWriteOnPin(PORT_CTRL_NO,RW,LOW);
    2740:	83 e0       	ldi	r24, 0x03	; 3
    2742:	61 e0       	ldi	r22, 0x01	; 1
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>

		DIO_vidWriteOnPort(PORT_DATA_NO,data);
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    274e:	0e 94 0b 09 	call	0x1216	; 0x1216 <DIO_vidWriteOnPort>
		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,LOW);
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 ea       	ldi	r26, 0xA0	; 160
    2762:	b0 e4       	ldi	r27, 0x40	; 64
    2764:	89 8f       	std	Y+25, r24	; 0x19
    2766:	9a 8f       	std	Y+26, r25	; 0x1a
    2768:	ab 8f       	std	Y+27, r26	; 0x1b
    276a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	69 8d       	ldd	r22, Y+25	; 0x19
    276e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a ef       	ldi	r20, 0xFA	; 250
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8d 8b       	std	Y+21, r24	; 0x15
    2786:	9e 8b       	std	Y+22, r25	; 0x16
    2788:	af 8b       	std	Y+23, r26	; 0x17
    278a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    278c:	6d 89       	ldd	r22, Y+21	; 0x15
    278e:	7e 89       	ldd	r23, Y+22	; 0x16
    2790:	8f 89       	ldd	r24, Y+23	; 0x17
    2792:	98 8d       	ldd	r25, Y+24	; 0x18
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_vidDispChar+0x98>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 8b       	std	Y+20, r25	; 0x14
    27aa:	8b 8b       	std	Y+19, r24	; 0x13
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_vidDispChar+0x116>
	else if (__tmp > 65535)
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_vidDispChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	69 8d       	ldd	r22, Y+25	; 0x19
    27c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9c 8b       	std	Y+20, r25	; 0x14
    27ec:	8b 8b       	std	Y+19, r24	; 0x13
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_vidDispChar+0xf8>
    27f0:	88 ec       	ldi	r24, 0xC8	; 200
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9a 8b       	std	Y+18, r25	; 0x12
    27f6:	89 8b       	std	Y+17, r24	; 0x11
    27f8:	89 89       	ldd	r24, Y+17	; 0x11
    27fa:	9a 89       	ldd	r25, Y+18	; 0x12
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_vidDispChar+0xe6>
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	8b 89       	ldd	r24, Y+19	; 0x13
    2806:	9c 89       	ldd	r25, Y+20	; 0x14
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_vidDispChar+0xda>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <LCD_vidDispChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	98 8b       	std	Y+16, r25	; 0x10
    2832:	8f 87       	std	Y+15, r24	; 0x0f
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	98 89       	ldd	r25, Y+16	; 0x10
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_vidDispChar+0x122>
    283c:	98 8b       	std	Y+16, r25	; 0x10
    283e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		DIO_vidWriteOnPin(PORT_CTRL_NO,EN,HIGH);
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 18 08 	call	0x1030	; 0x1030 <DIO_vidWriteOnPin>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 ea       	ldi	r26, 0xA0	; 160
    2850:	b0 e4       	ldi	r27, 0x40	; 64
    2852:	8b 87       	std	Y+11, r24	; 0x0b
    2854:	9c 87       	std	Y+12, r25	; 0x0c
    2856:	ad 87       	std	Y+13, r26	; 0x0d
    2858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6b 85       	ldd	r22, Y+11	; 0x0b
    285c:	7c 85       	ldd	r23, Y+12	; 0x0c
    285e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2860:	9e 85       	ldd	r25, Y+14	; 0x0e
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8f 83       	std	Y+7, r24	; 0x07
    2874:	98 87       	std	Y+8, r25	; 0x08
    2876:	a9 87       	std	Y+9, r26	; 0x09
    2878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <LCD_vidDispChar+0x186>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	3f c0       	rjmp	.+126    	; 0x291a <LCD_vidDispChar+0x204>
	else if (__tmp > 65535)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <LCD_vidDispChar+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <LCD_vidDispChar+0x1e6>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_vidDispChar+0x1d4>
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <LCD_vidDispChar+0x1c8>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <LCD_vidDispChar+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_vidDispChar+0x210>
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
	}
    292e:	6d 96       	adiw	r28, 0x1d	; 29
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <LCD_vidDispString>:
		_delay_ms(5);
	}

#endif
void LCD_vidDispString(uint8 *data)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	61 97       	sbiw	r28, 0x11	; 17
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	99 8b       	std	Y+17, r25	; 0x11
    2956:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0 ;
    2958:	1f 86       	std	Y+15, r1	; 0x0f
    295a:	80 c0       	rjmp	.+256    	; 0x2a5c <LCD_vidDispString+0x11c>
	while (data[i]!=0) {
		LCD_vidDispChar(data[i]);
    295c:	8f 85       	ldd	r24, Y+15	; 0x0f
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	88 89       	ldd	r24, Y+16	; 0x10
    2964:	99 89       	ldd	r25, Y+17	; 0x11
    2966:	fc 01       	movw	r30, r24
    2968:	e2 0f       	add	r30, r18
    296a:	f3 1f       	adc	r31, r19
    296c:	80 81       	ld	r24, Z
    296e:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_vidDispChar>
		i++;
    2972:	8f 85       	ldd	r24, Y+15	; 0x0f
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	8f 87       	std	Y+15, r24	; 0x0f
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e8       	ldi	r26, 0x80	; 128
    297e:	bf e3       	ldi	r27, 0x3F	; 63
    2980:	8b 87       	std	Y+11, r24	; 0x0b
    2982:	9c 87       	std	Y+12, r25	; 0x0c
    2984:	ad 87       	std	Y+13, r26	; 0x0d
    2986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8f 83       	std	Y+7, r24	; 0x07
    29a2:	98 87       	std	Y+8, r25	; 0x08
    29a4:	a9 87       	std	Y+9, r26	; 0x09
    29a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a8:	6f 81       	ldd	r22, Y+7	; 0x07
    29aa:	78 85       	ldd	r23, Y+8	; 0x08
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <LCD_vidDispString+0x8a>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <LCD_vidDispString+0x108>
	else if (__tmp > 65535)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <LCD_vidDispString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <LCD_vidDispString+0xea>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <LCD_vidDispString+0xd8>
    2a1c:	9c 83       	std	Y+4, r25	; 0x04
    2a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <LCD_vidDispString+0xcc>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <LCD_vidDispString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	6f 81       	ldd	r22, Y+7	; 0x07
    2a36:	78 85       	ldd	r23, Y+8	; 0x08
    2a38:	89 85       	ldd	r24, Y+9	; 0x09
    2a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_vidDispString+0x114>
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01

#endif
void LCD_vidDispString(uint8 *data)
{
	uint8 i=0 ;
	while (data[i]!=0) {
    2a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	88 89       	ldd	r24, Y+16	; 0x10
    2a64:	99 89       	ldd	r25, Y+17	; 0x11
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 23       	and	r24, r24
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <LCD_vidDispString+0x134>
    2a72:	74 cf       	rjmp	.-280    	; 0x295c <LCD_vidDispString+0x1c>
		LCD_vidDispChar(data[i]);
		i++;
		_delay_ms(1);
	}
}
    2a74:	61 96       	adiw	r28, 0x11	; 17
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <main>:

//-------------------------------------------



int main() {
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	aa 97       	sbiw	r28, 0x2a	; 42
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61


	LCD_vidInit();
    2a9a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_vidInit>
	LCD_vidCmd(CMD_CLEAR);
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
	LCD_vidCmd(CMD_HOME);
    2aa4:	80 e8       	ldi	r24, 0x80	; 128
    2aa6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
	LCD_vidDispString((uint8*) "hello init.");
    2aaa:	80 e6       	ldi	r24, 0x60	; 96
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_vidDispString>
	////Initialization////
	DIO_SetPinDir( PORTD,  PIN0,  INPUT); //Rx
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_SetPinDir>
	DIO_SetPinDir( PORTD,  PIN1,  OUTPUT); //Tx
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	61 e0       	ldi	r22, 0x01	; 1
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_SetPinDir>
	DIO_SetPinDir( RESET_PORT,  RESET_PIN,  OUTPUT); //Reset pin
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	66 e0       	ldi	r22, 0x06	; 6
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_SetPinDir>
	DIO_SetPinDir( PORTB,  PIN0,  OUTPUT); //buzzer pin
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	41 e0       	ldi	r20, 0x01	; 1
    2ad6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <DIO_SetPinDir>

	USART_inti();
    2ada:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <USART_inti>
	DIO_SetPinVal(RESET_PORT,RESET_PIN,LOW);
    2ade:	83 e0       	ldi	r24, 0x03	; 3
    2ae0:	66 e0       	ldi	r22, 0x06	; 6
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <DIO_SetPinVal>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a8 ec       	ldi	r26, 0xC8	; 200
    2aee:	b2 e4       	ldi	r27, 0x42	; 66
    2af0:	8f a3       	std	Y+39, r24	; 0x27
    2af2:	98 a7       	std	Y+40, r25	; 0x28
    2af4:	a9 a7       	std	Y+41, r26	; 0x29
    2af6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	6f a1       	ldd	r22, Y+39	; 0x27
    2afa:	78 a5       	ldd	r23, Y+40	; 0x28
    2afc:	89 a5       	ldd	r24, Y+41	; 0x29
    2afe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4a ef       	ldi	r20, 0xFA	; 250
    2b06:	54 e4       	ldi	r21, 0x44	; 68
    2b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8b a3       	std	Y+35, r24	; 0x23
    2b12:	9c a3       	std	Y+36, r25	; 0x24
    2b14:	ad a3       	std	Y+37, r26	; 0x25
    2b16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b18:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e8       	ldi	r20, 0x80	; 128
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2c:	88 23       	and	r24, r24
    2b2e:	2c f4       	brge	.+10     	; 0x2b3a <main+0xb4>
		__ticks = 1;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	9a a3       	std	Y+34, r25	; 0x22
    2b36:	89 a3       	std	Y+33, r24	; 0x21
    2b38:	3f c0       	rjmp	.+126    	; 0x2bb8 <main+0x132>
	else if (__tmp > 65535)
    2b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b40:	9e a1       	ldd	r25, Y+38	; 0x26
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	4c f5       	brge	.+82     	; 0x2ba4 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b52:	6f a1       	ldd	r22, Y+39	; 0x27
    2b54:	78 a5       	ldd	r23, Y+40	; 0x28
    2b56:	89 a5       	ldd	r24, Y+41	; 0x29
    2b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e2       	ldi	r20, 0x20	; 32
    2b60:	51 e4       	ldi	r21, 0x41	; 65
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9a a3       	std	Y+34, r25	; 0x22
    2b78:	89 a3       	std	Y+33, r24	; 0x21
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <main+0x114>
    2b7c:	88 ec       	ldi	r24, 0xC8	; 200
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	98 a3       	std	Y+32, r25	; 0x20
    2b82:	8f 8f       	std	Y+31, r24	; 0x1f
    2b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b86:	98 a1       	ldd	r25, Y+32	; 0x20
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <main+0x102>
    2b8c:	98 a3       	std	Y+32, r25	; 0x20
    2b8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b90:	89 a1       	ldd	r24, Y+33	; 0x21
    2b92:	9a a1       	ldd	r25, Y+34	; 0x22
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	69 f7       	brne	.-38     	; 0x2b7c <main+0xf6>
    2ba2:	14 c0       	rjmp	.+40     	; 0x2bcc <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9a a3       	std	Y+34, r25	; 0x22
    2bb6:	89 a3       	std	Y+33, r24	; 0x21
    2bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bba:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <main+0x13e>
    2bc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms( 100 );
	DIO_SetPinVal(RESET_PORT,RESET_PIN,HIGH);
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	66 e0       	ldi	r22, 0x06	; 6
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <DIO_SetPinVal>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	aa e7       	ldi	r26, 0x7A	; 122
    2bdc:	b4 e4       	ldi	r27, 0x44	; 68
    2bde:	89 8f       	std	Y+25, r24	; 0x19
    2be0:	9a 8f       	std	Y+26, r25	; 0x1a
    2be2:	ab 8f       	std	Y+27, r26	; 0x1b
    2be4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	69 8d       	ldd	r22, Y+25	; 0x19
    2be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4a ef       	ldi	r20, 0xFA	; 250
    2bf4:	54 e4       	ldi	r21, 0x44	; 68
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8d 8b       	std	Y+21, r24	; 0x15
    2c00:	9e 8b       	std	Y+22, r25	; 0x16
    2c02:	af 8b       	std	Y+23, r26	; 0x17
    2c04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c06:	6d 89       	ldd	r22, Y+21	; 0x15
    2c08:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	2c f4       	brge	.+10     	; 0x2c28 <main+0x1a2>
		__ticks = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 8b       	std	Y+20, r25	; 0x14
    2c24:	8b 8b       	std	Y+19, r24	; 0x13
    2c26:	3f c0       	rjmp	.+126    	; 0x2ca6 <main+0x220>
	else if (__tmp > 65535)
    2c28:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	4c f5       	brge	.+82     	; 0x2c92 <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	69 8d       	ldd	r22, Y+25	; 0x19
    2c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e2       	ldi	r20, 0x20	; 32
    2c4e:	51 e4       	ldi	r21, 0x41	; 65
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9c 8b       	std	Y+20, r25	; 0x14
    2c66:	8b 8b       	std	Y+19, r24	; 0x13
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <main+0x202>
    2c6a:	88 ec       	ldi	r24, 0xC8	; 200
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9a 8b       	std	Y+18, r25	; 0x12
    2c70:	89 8b       	std	Y+17, r24	; 0x11
    2c72:	89 89       	ldd	r24, Y+17	; 0x11
    2c74:	9a 89       	ldd	r25, Y+18	; 0x12
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <main+0x1f0>
    2c7a:	9a 8b       	std	Y+18, r25	; 0x12
    2c7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	9c 8b       	std	Y+20, r25	; 0x14
    2c86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <main+0x1e4>
    2c90:	14 c0       	rjmp	.+40     	; 0x2cba <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	6d 89       	ldd	r22, Y+21	; 0x15
    2c94:	7e 89       	ldd	r23, Y+22	; 0x16
    2c96:	8f 89       	ldd	r24, Y+23	; 0x17
    2c98:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9c 8b       	std	Y+20, r25	; 0x14
    2ca4:	8b 8b       	std	Y+19, r24	; 0x13
    2ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    2caa:	98 8b       	std	Y+16, r25	; 0x10
    2cac:	8f 87       	std	Y+15, r24	; 0x0f
    2cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb0:	98 89       	ldd	r25, Y+16	; 0x10
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <main+0x22c>
    2cb6:	98 8b       	std	Y+16, r25	; 0x10
    2cb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms( 1000 );
	ESP8266_VidInit();  //intilize wifi
    2cba:	0e 94 24 17 	call	0x2e48	; 0x2e48 <ESP8266_VidInit>
	ESP8266_VidConnectToWiFi("OPPO Reno2","11112222");  //connect to wifi
    2cbe:	8c e6       	ldi	r24, 0x6C	; 108
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	27 e7       	ldi	r18, 0x77	; 119
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	0e 94 9e 19 	call	0x333c	; 0x333c <ESP8266_VidConnectToWiFi>
		//			_delay_ms(2000);
		//		}

		// i recived the varibles in bpm and temp

		bpm=ESP8266_u8GetHB(arr1);
    2ccc:	88 e2       	ldi	r24, 0x28	; 40
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	0e 94 f7 20 	call	0x41ee	; 0x41ee <ESP8266_u8GetHB>
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	90 93 27 02 	sts	0x0227, r25
    2cdc:	80 93 26 02 	sts	0x0226, r24
		temp=ESP8266_u8GetPR(arr2);
    2ce0:	80 ef       	ldi	r24, 0xF0	; 240
    2ce2:	92 e0       	ldi	r25, 0x02	; 2
    2ce4:	0e 94 6f 22 	call	0x44de	; 0x44de <ESP8266_u8GetPR>
    2ce8:	88 2f       	mov	r24, r24
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	90 93 b9 03 	sts	0x03B9, r25
    2cf0:	80 93 b8 03 	sts	0x03B8, r24
//			//				     DIO_vidWriteOnPort(PORTB,0x00);
//			//
//		}


		LCD_vidCmd(CMD_CLEAR);
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidCmd(CMD_HOME);
    2cfa:	80 e8       	ldi	r24, 0x80	; 128
    2cfc:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidDispString((uint8*)"Bpm=");
    2d00:	80 e8       	ldi	r24, 0x80	; 128
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_vidDispString>
		itoa((bpm-70),test,10);
    2d08:	80 91 26 02 	lds	r24, 0x0226
    2d0c:	90 91 27 02 	lds	r25, 0x0227
    2d10:	86 54       	subi	r24, 0x46	; 70
    2d12:	90 40       	sbci	r25, 0x00	; 0
    2d14:	2a eb       	ldi	r18, 0xBA	; 186
    2d16:	33 e0       	ldi	r19, 0x03	; 3
    2d18:	b9 01       	movw	r22, r18
    2d1a:	4a e0       	ldi	r20, 0x0A	; 10
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <itoa>
		LCD_vidDispString((uint8*) test);
    2d22:	8a eb       	ldi	r24, 0xBA	; 186
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_vidDispString>
		LCD_vidDispString((uint8*)" ");
    2d2a:	85 e8       	ldi	r24, 0x85	; 133
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_vidDispString>

		LCD_vidCmd(CMD_SECONED_LINE);
    2d32:	80 ec       	ldi	r24, 0xC0	; 192
    2d34:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_vidCmd>
		LCD_vidDispString((uint8*)"temp=");
    2d38:	87 e8       	ldi	r24, 0x87	; 135
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_vidDispString>
		itoa((temp-116),test2,10);
    2d40:	80 91 b8 03 	lds	r24, 0x03B8
    2d44:	90 91 b9 03 	lds	r25, 0x03B9
    2d48:	84 57       	subi	r24, 0x74	; 116
    2d4a:	90 40       	sbci	r25, 0x00	; 0
    2d4c:	20 ec       	ldi	r18, 0xC0	; 192
    2d4e:	33 e0       	ldi	r19, 0x03	; 3
    2d50:	b9 01       	movw	r22, r18
    2d52:	4a e0       	ldi	r20, 0x0A	; 10
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <itoa>
		LCD_vidDispString((uint8*) test2);
    2d5a:	80 ec       	ldi	r24, 0xC0	; 192
    2d5c:	93 e0       	ldi	r25, 0x03	; 3
    2d5e:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_vidDispString>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	aa e7       	ldi	r26, 0x7A	; 122
    2d68:	b4 e4       	ldi	r27, 0x44	; 68
    2d6a:	8b 87       	std	Y+11, r24	; 0x0b
    2d6c:	9c 87       	std	Y+12, r25	; 0x0c
    2d6e:	ad 87       	std	Y+13, r26	; 0x0d
    2d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a ef       	ldi	r20, 0xFA	; 250
    2d80:	54 e4       	ldi	r21, 0x44	; 68
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8f 83       	std	Y+7, r24	; 0x07
    2d8c:	98 87       	std	Y+8, r25	; 0x08
    2d8e:	a9 87       	std	Y+9, r26	; 0x09
    2d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <main+0x32e>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9e 83       	std	Y+6, r25	; 0x06
    2db0:	8d 83       	std	Y+5, r24	; 0x05
    2db2:	3f c0       	rjmp	.+126    	; 0x2e32 <main+0x3ac>
	else if (__tmp > 65535)
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	4c f5       	brge	.+82     	; 0x2e1e <main+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e2       	ldi	r20, 0x20	; 32
    2dda:	51 e4       	ldi	r21, 0x41	; 65
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	0f c0       	rjmp	.+30     	; 0x2e14 <main+0x38e>
    2df6:	88 ec       	ldi	r24, 0xC8	; 200
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <main+0x37c>
    2e06:	9c 83       	std	Y+4, r25	; 0x04
    2e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <main+0x370>
    2e1c:	57 cf       	rjmp	.-338    	; 0x2ccc <main+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <main+0x3b8>
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	42 cf       	rjmp	.-380    	; 0x2ccc <main+0x246>

00002e48 <ESP8266_VidInit>:



//the function of wifi---------------------
void ESP8266_VidInit()
{
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	c6 54       	subi	r28, 0x46	; 70
    2e56:	d0 40       	sbci	r29, 0x00	; 0
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    //disable echo
    USART_SendStr( (u8 *)"ATE0\r\n" );
    2e62:	8d e8       	ldi	r24, 0x8D	; 141
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ed 5b       	subi	r30, 0xBD	; 189
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	aa e7       	ldi	r26, 0x7A	; 122
    2e76:	b4 e4       	ldi	r27, 0x44	; 68
    2e78:	80 83       	st	Z, r24
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	a2 83       	std	Z+2, r26	; 0x02
    2e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e80:	8e 01       	movw	r16, r28
    2e82:	01 5c       	subi	r16, 0xC1	; 193
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	fe 01       	movw	r30, r28
    2e88:	ed 5b       	subi	r30, 0xBD	; 189
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a ef       	ldi	r20, 0xFA	; 250
    2e9a:	54 e4       	ldi	r21, 0x44	; 68
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ff 96       	adiw	r30, 0x3f	; 63
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <ESP8266_VidInit+0x8c>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9e af       	std	Y+62, r25	; 0x3e
    2ed0:	8d af       	std	Y+61, r24	; 0x3d
    2ed2:	46 c0       	rjmp	.+140    	; 0x2f60 <ESP8266_VidInit+0x118>
	else if (__tmp > 65535)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ff 96       	adiw	r30, 0x3f	; 63
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	3f ef       	ldi	r19, 0xFF	; 255
    2ee4:	4f e7       	ldi	r20, 0x7F	; 127
    2ee6:	57 e4       	ldi	r21, 0x47	; 71
    2ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eec:	18 16       	cp	r1, r24
    2eee:	64 f5       	brge	.+88     	; 0x2f48 <ESP8266_VidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	ed 5b       	subi	r30, 0xBD	; 189
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	60 81       	ld	r22, Z
    2ef8:	71 81       	ldd	r23, Z+1	; 0x01
    2efa:	82 81       	ldd	r24, Z+2	; 0x02
    2efc:	93 81       	ldd	r25, Z+3	; 0x03
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	40 e2       	ldi	r20, 0x20	; 32
    2f04:	51 e4       	ldi	r21, 0x41	; 65
    2f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	bc 01       	movw	r22, r24
    2f10:	cd 01       	movw	r24, r26
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9e af       	std	Y+62, r25	; 0x3e
    2f1c:	8d af       	std	Y+61, r24	; 0x3d
    2f1e:	0f c0       	rjmp	.+30     	; 0x2f3e <ESP8266_VidInit+0xf6>
    2f20:	88 ec       	ldi	r24, 0xC8	; 200
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9c af       	std	Y+60, r25	; 0x3c
    2f26:	8b af       	std	Y+59, r24	; 0x3b
    2f28:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f2a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <ESP8266_VidInit+0xe4>
    2f30:	9c af       	std	Y+60, r25	; 0x3c
    2f32:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f36:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	9e af       	std	Y+62, r25	; 0x3e
    2f3c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	69 f7       	brne	.-38     	; 0x2f20 <ESP8266_VidInit+0xd8>
    2f46:	16 c0       	rjmp	.+44     	; 0x2f74 <ESP8266_VidInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f48:	fe 01       	movw	r30, r28
    2f4a:	ff 96       	adiw	r30, 0x3f	; 63
    2f4c:	60 81       	ld	r22, Z
    2f4e:	71 81       	ldd	r23, Z+1	; 0x01
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9e af       	std	Y+62, r25	; 0x3e
    2f5e:	8d af       	std	Y+61, r24	; 0x3d
    2f60:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f62:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f64:	9a af       	std	Y+58, r25	; 0x3a
    2f66:	89 af       	std	Y+57, r24	; 0x39
    2f68:	89 ad       	ldd	r24, Y+57	; 0x39
    2f6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <ESP8266_VidInit+0x124>
    2f70:	9a af       	std	Y+58, r25	; 0x3a
    2f72:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms( 1000 );

    /* Sending AT Command To Check ESP8266 Is Working Or Not  */
    USART_SendStr( (u8 *)"AT\r\n" );
    2f74:	84 e9       	ldi	r24, 0x94	; 148
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	aa e7       	ldi	r26, 0x7A	; 122
    2f82:	b4 e4       	ldi	r27, 0x44	; 68
    2f84:	8d ab       	std	Y+53, r24	; 0x35
    2f86:	9e ab       	std	Y+54, r25	; 0x36
    2f88:	af ab       	std	Y+55, r26	; 0x37
    2f8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2f8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2f90:	8f a9       	ldd	r24, Y+55	; 0x37
    2f92:	98 ad       	ldd	r25, Y+56	; 0x38
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4a ef       	ldi	r20, 0xFA	; 250
    2f9a:	54 e4       	ldi	r21, 0x44	; 68
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	89 ab       	std	Y+49, r24	; 0x31
    2fa6:	9a ab       	std	Y+50, r25	; 0x32
    2fa8:	ab ab       	std	Y+51, r26	; 0x33
    2faa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fac:	69 a9       	ldd	r22, Y+49	; 0x31
    2fae:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e8       	ldi	r20, 0x80	; 128
    2fba:	5f e3       	ldi	r21, 0x3F	; 63
    2fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fc0:	88 23       	and	r24, r24
    2fc2:	2c f4       	brge	.+10     	; 0x2fce <ESP8266_VidInit+0x186>
		__ticks = 1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	98 ab       	std	Y+48, r25	; 0x30
    2fca:	8f a7       	std	Y+47, r24	; 0x2f
    2fcc:	3f c0       	rjmp	.+126    	; 0x304c <ESP8266_VidInit+0x204>
	else if (__tmp > 65535)
    2fce:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd0:	7a a9       	ldd	r23, Y+50	; 0x32
    2fd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd4:	9c a9       	ldd	r25, Y+52	; 0x34
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	3f ef       	ldi	r19, 0xFF	; 255
    2fda:	4f e7       	ldi	r20, 0x7F	; 127
    2fdc:	57 e4       	ldi	r21, 0x47	; 71
    2fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fe2:	18 16       	cp	r1, r24
    2fe4:	4c f5       	brge	.+82     	; 0x3038 <ESP8266_VidInit+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    2fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    2fea:	8f a9       	ldd	r24, Y+55	; 0x37
    2fec:	98 ad       	ldd	r25, Y+56	; 0x38
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	40 e2       	ldi	r20, 0x20	; 32
    2ff4:	51 e4       	ldi	r21, 0x41	; 65
    2ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	bc 01       	movw	r22, r24
    3000:	cd 01       	movw	r24, r26
    3002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	98 ab       	std	Y+48, r25	; 0x30
    300c:	8f a7       	std	Y+47, r24	; 0x2f
    300e:	0f c0       	rjmp	.+30     	; 0x302e <ESP8266_VidInit+0x1e6>
    3010:	88 ec       	ldi	r24, 0xC8	; 200
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	9e a7       	std	Y+46, r25	; 0x2e
    3016:	8d a7       	std	Y+45, r24	; 0x2d
    3018:	8d a5       	ldd	r24, Y+45	; 0x2d
    301a:	9e a5       	ldd	r25, Y+46	; 0x2e
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <ESP8266_VidInit+0x1d4>
    3020:	9e a7       	std	Y+46, r25	; 0x2e
    3022:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3024:	8f a5       	ldd	r24, Y+47	; 0x2f
    3026:	98 a9       	ldd	r25, Y+48	; 0x30
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	98 ab       	std	Y+48, r25	; 0x30
    302c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3030:	98 a9       	ldd	r25, Y+48	; 0x30
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	69 f7       	brne	.-38     	; 0x3010 <ESP8266_VidInit+0x1c8>
    3036:	14 c0       	rjmp	.+40     	; 0x3060 <ESP8266_VidInit+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3038:	69 a9       	ldd	r22, Y+49	; 0x31
    303a:	7a a9       	ldd	r23, Y+50	; 0x32
    303c:	8b a9       	ldd	r24, Y+51	; 0x33
    303e:	9c a9       	ldd	r25, Y+52	; 0x34
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	98 ab       	std	Y+48, r25	; 0x30
    304a:	8f a7       	std	Y+47, r24	; 0x2f
    304c:	8f a5       	ldd	r24, Y+47	; 0x2f
    304e:	98 a9       	ldd	r25, Y+48	; 0x30
    3050:	9c a7       	std	Y+44, r25	; 0x2c
    3052:	8b a7       	std	Y+43, r24	; 0x2b
    3054:	8b a5       	ldd	r24, Y+43	; 0x2b
    3056:	9c a5       	ldd	r25, Y+44	; 0x2c
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <ESP8266_VidInit+0x210>
    305c:	9c a7       	std	Y+44, r25	; 0x2c
    305e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms( 1000 );

    USART_SendStr( (u8 *)"AT+CWMODE=1\r\n" );
    3060:	89 e9       	ldi	r24, 0x99	; 153
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	aa e7       	ldi	r26, 0x7A	; 122
    306e:	b4 e4       	ldi	r27, 0x44	; 68
    3070:	8f a3       	std	Y+39, r24	; 0x27
    3072:	98 a7       	std	Y+40, r25	; 0x28
    3074:	a9 a7       	std	Y+41, r26	; 0x29
    3076:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	6f a1       	ldd	r22, Y+39	; 0x27
    307a:	78 a5       	ldd	r23, Y+40	; 0x28
    307c:	89 a5       	ldd	r24, Y+41	; 0x29
    307e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a ef       	ldi	r20, 0xFA	; 250
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8b a3       	std	Y+35, r24	; 0x23
    3092:	9c a3       	std	Y+36, r25	; 0x24
    3094:	ad a3       	std	Y+37, r26	; 0x25
    3096:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3098:	6b a1       	ldd	r22, Y+35	; 0x23
    309a:	7c a1       	ldd	r23, Y+36	; 0x24
    309c:	8d a1       	ldd	r24, Y+37	; 0x25
    309e:	9e a1       	ldd	r25, Y+38	; 0x26
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <ESP8266_VidInit+0x272>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9a a3       	std	Y+34, r25	; 0x22
    30b6:	89 a3       	std	Y+33, r24	; 0x21
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <ESP8266_VidInit+0x2f0>
	else if (__tmp > 65535)
    30ba:	6b a1       	ldd	r22, Y+35	; 0x23
    30bc:	7c a1       	ldd	r23, Y+36	; 0x24
    30be:	8d a1       	ldd	r24, Y+37	; 0x25
    30c0:	9e a1       	ldd	r25, Y+38	; 0x26
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <ESP8266_VidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	6f a1       	ldd	r22, Y+39	; 0x27
    30d4:	78 a5       	ldd	r23, Y+40	; 0x28
    30d6:	89 a5       	ldd	r24, Y+41	; 0x29
    30d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9a a3       	std	Y+34, r25	; 0x22
    30f8:	89 a3       	std	Y+33, r24	; 0x21
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <ESP8266_VidInit+0x2d2>
    30fc:	88 ec       	ldi	r24, 0xC8	; 200
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	98 a3       	std	Y+32, r25	; 0x20
    3102:	8f 8f       	std	Y+31, r24	; 0x1f
    3104:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3106:	98 a1       	ldd	r25, Y+32	; 0x20
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <ESP8266_VidInit+0x2c0>
    310c:	98 a3       	std	Y+32, r25	; 0x20
    310e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	89 a1       	ldd	r24, Y+33	; 0x21
    3112:	9a a1       	ldd	r25, Y+34	; 0x22
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	9a a3       	std	Y+34, r25	; 0x22
    3118:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	89 a1       	ldd	r24, Y+33	; 0x21
    311c:	9a a1       	ldd	r25, Y+34	; 0x22
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <ESP8266_VidInit+0x2b4>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <ESP8266_VidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	6b a1       	ldd	r22, Y+35	; 0x23
    3126:	7c a1       	ldd	r23, Y+36	; 0x24
    3128:	8d a1       	ldd	r24, Y+37	; 0x25
    312a:	9e a1       	ldd	r25, Y+38	; 0x26
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9a a3       	std	Y+34, r25	; 0x22
    3136:	89 a3       	std	Y+33, r24	; 0x21
    3138:	89 a1       	ldd	r24, Y+33	; 0x21
    313a:	9a a1       	ldd	r25, Y+34	; 0x22
    313c:	9e 8f       	std	Y+30, r25	; 0x1e
    313e:	8d 8f       	std	Y+29, r24	; 0x1d
    3140:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3142:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <ESP8266_VidInit+0x2fc>
    3148:	9e 8f       	std	Y+30, r25	; 0x1e
    314a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms( 1000 );

    USART_SendStr( (u8 *) "AT+CIPMODE=0\r\n" );
    314c:	87 ea       	ldi	r24, 0xA7	; 167
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	aa e7       	ldi	r26, 0x7A	; 122
    315a:	b4 e4       	ldi	r27, 0x44	; 68
    315c:	89 8f       	std	Y+25, r24	; 0x19
    315e:	9a 8f       	std	Y+26, r25	; 0x1a
    3160:	ab 8f       	std	Y+27, r26	; 0x1b
    3162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3164:	69 8d       	ldd	r22, Y+25	; 0x19
    3166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    316a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	4a ef       	ldi	r20, 0xFA	; 250
    3172:	54 e4       	ldi	r21, 0x44	; 68
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	8d 8b       	std	Y+21, r24	; 0x15
    317e:	9e 8b       	std	Y+22, r25	; 0x16
    3180:	af 8b       	std	Y+23, r26	; 0x17
    3182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3184:	6d 89       	ldd	r22, Y+21	; 0x15
    3186:	7e 89       	ldd	r23, Y+22	; 0x16
    3188:	8f 89       	ldd	r24, Y+23	; 0x17
    318a:	98 8d       	ldd	r25, Y+24	; 0x18
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e8       	ldi	r20, 0x80	; 128
    3192:	5f e3       	ldi	r21, 0x3F	; 63
    3194:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3198:	88 23       	and	r24, r24
    319a:	2c f4       	brge	.+10     	; 0x31a6 <ESP8266_VidInit+0x35e>
		__ticks = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9c 8b       	std	Y+20, r25	; 0x14
    31a2:	8b 8b       	std	Y+19, r24	; 0x13
    31a4:	3f c0       	rjmp	.+126    	; 0x3224 <ESP8266_VidInit+0x3dc>
	else if (__tmp > 65535)
    31a6:	6d 89       	ldd	r22, Y+21	; 0x15
    31a8:	7e 89       	ldd	r23, Y+22	; 0x16
    31aa:	8f 89       	ldd	r24, Y+23	; 0x17
    31ac:	98 8d       	ldd	r25, Y+24	; 0x18
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	57 e4       	ldi	r21, 0x47	; 71
    31b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	4c f5       	brge	.+82     	; 0x3210 <ESP8266_VidInit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31be:	69 8d       	ldd	r22, Y+25	; 0x19
    31c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9c 8b       	std	Y+20, r25	; 0x14
    31e4:	8b 8b       	std	Y+19, r24	; 0x13
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <ESP8266_VidInit+0x3be>
    31e8:	88 ec       	ldi	r24, 0xC8	; 200
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	9a 8b       	std	Y+18, r25	; 0x12
    31ee:	89 8b       	std	Y+17, r24	; 0x11
    31f0:	89 89       	ldd	r24, Y+17	; 0x11
    31f2:	9a 89       	ldd	r25, Y+18	; 0x12
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <ESP8266_VidInit+0x3ac>
    31f8:	9a 8b       	std	Y+18, r25	; 0x12
    31fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	8b 89       	ldd	r24, Y+19	; 0x13
    31fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	9c 8b       	std	Y+20, r25	; 0x14
    3204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	8b 89       	ldd	r24, Y+19	; 0x13
    3208:	9c 89       	ldd	r25, Y+20	; 0x14
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f7       	brne	.-38     	; 0x31e8 <ESP8266_VidInit+0x3a0>
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <ESP8266_VidInit+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3210:	6d 89       	ldd	r22, Y+21	; 0x15
    3212:	7e 89       	ldd	r23, Y+22	; 0x16
    3214:	8f 89       	ldd	r24, Y+23	; 0x17
    3216:	98 8d       	ldd	r25, Y+24	; 0x18
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9c 8b       	std	Y+20, r25	; 0x14
    3222:	8b 8b       	std	Y+19, r24	; 0x13
    3224:	8b 89       	ldd	r24, Y+19	; 0x13
    3226:	9c 89       	ldd	r25, Y+20	; 0x14
    3228:	98 8b       	std	Y+16, r25	; 0x10
    322a:	8f 87       	std	Y+15, r24	; 0x0f
    322c:	8f 85       	ldd	r24, Y+15	; 0x0f
    322e:	98 89       	ldd	r25, Y+16	; 0x10
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <ESP8266_VidInit+0x3e8>
    3234:	98 8b       	std	Y+16, r25	; 0x10
    3236:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms( 1000 );

    USART_SendStr( (u8 *) "AT+CIPMUX=0\r\n" );
    3238:	86 eb       	ldi	r24, 0xB6	; 182
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	aa e7       	ldi	r26, 0x7A	; 122
    3246:	b4 e4       	ldi	r27, 0x44	; 68
    3248:	8b 87       	std	Y+11, r24	; 0x0b
    324a:	9c 87       	std	Y+12, r25	; 0x0c
    324c:	ad 87       	std	Y+13, r26	; 0x0d
    324e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3250:	6b 85       	ldd	r22, Y+11	; 0x0b
    3252:	7c 85       	ldd	r23, Y+12	; 0x0c
    3254:	8d 85       	ldd	r24, Y+13	; 0x0d
    3256:	9e 85       	ldd	r25, Y+14	; 0x0e
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	4a ef       	ldi	r20, 0xFA	; 250
    325e:	54 e4       	ldi	r21, 0x44	; 68
    3260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	8f 83       	std	Y+7, r24	; 0x07
    326a:	98 87       	std	Y+8, r25	; 0x08
    326c:	a9 87       	std	Y+9, r26	; 0x09
    326e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3270:	6f 81       	ldd	r22, Y+7	; 0x07
    3272:	78 85       	ldd	r23, Y+8	; 0x08
    3274:	89 85       	ldd	r24, Y+9	; 0x09
    3276:	9a 85       	ldd	r25, Y+10	; 0x0a
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e8       	ldi	r20, 0x80	; 128
    327e:	5f e3       	ldi	r21, 0x3F	; 63
    3280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3284:	88 23       	and	r24, r24
    3286:	2c f4       	brge	.+10     	; 0x3292 <ESP8266_VidInit+0x44a>
		__ticks = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	9e 83       	std	Y+6, r25	; 0x06
    328e:	8d 83       	std	Y+5, r24	; 0x05
    3290:	3f c0       	rjmp	.+126    	; 0x3310 <ESP8266_VidInit+0x4c8>
	else if (__tmp > 65535)
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	3f ef       	ldi	r19, 0xFF	; 255
    329e:	4f e7       	ldi	r20, 0x7F	; 127
    32a0:	57 e4       	ldi	r21, 0x47	; 71
    32a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a6:	18 16       	cp	r1, r24
    32a8:	4c f5       	brge	.+82     	; 0x32fc <ESP8266_VidInit+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e2       	ldi	r20, 0x20	; 32
    32b8:	51 e4       	ldi	r21, 0x41	; 65
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	0f c0       	rjmp	.+30     	; 0x32f2 <ESP8266_VidInit+0x4aa>
    32d4:	88 ec       	ldi	r24, 0xC8	; 200
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9c 83       	std	Y+4, r25	; 0x04
    32da:	8b 83       	std	Y+3, r24	; 0x03
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	9c 81       	ldd	r25, Y+4	; 0x04
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <ESP8266_VidInit+0x498>
    32e4:	9c 83       	std	Y+4, r25	; 0x04
    32e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ea:	9e 81       	ldd	r25, Y+6	; 0x06
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	9e 83       	std	Y+6, r25	; 0x06
    32f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f2:	8d 81       	ldd	r24, Y+5	; 0x05
    32f4:	9e 81       	ldd	r25, Y+6	; 0x06
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	69 f7       	brne	.-38     	; 0x32d4 <ESP8266_VidInit+0x48c>
    32fa:	14 c0       	rjmp	.+40     	; 0x3324 <ESP8266_VidInit+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fc:	6f 81       	ldd	r22, Y+7	; 0x07
    32fe:	78 85       	ldd	r23, Y+8	; 0x08
    3300:	89 85       	ldd	r24, Y+9	; 0x09
    3302:	9a 85       	ldd	r25, Y+10	; 0x0a
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <ESP8266_VidInit+0x4d4>
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms( 1000 );

}
    3324:	ca 5b       	subi	r28, 0xBA	; 186
    3326:	df 4f       	sbci	r29, 0xFF	; 255
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	f8 94       	cli
    332c:	de bf       	out	0x3e, r29	; 62
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	cd bf       	out	0x3d, r28	; 61
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	1f 91       	pop	r17
    3338:	0f 91       	pop	r16
    333a:	08 95       	ret

0000333c <ESP8266_VidConnectToWiFi>:

void ESP8266_VidConnectToWiFi(u8* SSID, u8* Password)
{
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	ce 59       	subi	r28, 0x9E	; 158
    334a:	d0 40       	sbci	r29, 0x00	; 0
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	fe 01       	movw	r30, r28
    3358:	e5 56       	subi	r30, 0x65	; 101
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	80 83       	st	Z, r24
    3360:	fe 01       	movw	r30, r28
    3362:	e3 56       	subi	r30, 0x63	; 99
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	71 83       	std	Z+1, r23	; 0x01
    3368:	60 83       	st	Z, r22
  USART_SendStr( (u8 *) "AT+CWJAP_CUR=\"" );
    336a:	84 ec       	ldi	r24, 0xC4	; 196
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) SSID );
    3372:	fe 01       	movw	r30, r28
    3374:	e5 56       	subi	r30, 0x65	; 101
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) "\",\"" );
    3380:	83 ed       	ldi	r24, 0xD3	; 211
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) Password);
    3388:	fe 01       	movw	r30, r28
    338a:	e3 56       	subi	r30, 0x63	; 99
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) "\"\r\n");
    3396:	87 ed       	ldi	r24, 0xD7	; 215
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    339e:	fe 01       	movw	r30, r28
    33a0:	e9 56       	subi	r30, 0x69	; 105
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	aa e7       	ldi	r26, 0x7A	; 122
    33aa:	b4 e4       	ldi	r27, 0x44	; 68
    33ac:	80 83       	st	Z, r24
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	a2 83       	std	Z+2, r26	; 0x02
    33b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	8e 01       	movw	r16, r28
    33b6:	0d 56       	subi	r16, 0x6D	; 109
    33b8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ba:	fe 01       	movw	r30, r28
    33bc:	e9 56       	subi	r30, 0x69	; 105
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	60 81       	ld	r22, Z
    33c2:	71 81       	ldd	r23, Z+1	; 0x01
    33c4:	82 81       	ldd	r24, Z+2	; 0x02
    33c6:	93 81       	ldd	r25, Z+3	; 0x03
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4a ef       	ldi	r20, 0xFA	; 250
    33ce:	54 e4       	ldi	r21, 0x44	; 68
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	f8 01       	movw	r30, r16
    33da:	80 83       	st	Z, r24
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	a2 83       	std	Z+2, r26	; 0x02
    33e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33e2:	fe 01       	movw	r30, r28
    33e4:	ed 56       	subi	r30, 0x6D	; 109
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e8       	ldi	r20, 0x80	; 128
    33f6:	5f e3       	ldi	r21, 0x3F	; 63
    33f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33fc:	88 23       	and	r24, r24
    33fe:	44 f4       	brge	.+16     	; 0x3410 <ESP8266_VidConnectToWiFi+0xd4>
		__ticks = 1;
    3400:	fe 01       	movw	r30, r28
    3402:	ef 56       	subi	r30, 0x6F	; 111
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	64 c0       	rjmp	.+200    	; 0x34d8 <ESP8266_VidConnectToWiFi+0x19c>
	else if (__tmp > 65535)
    3410:	fe 01       	movw	r30, r28
    3412:	ed 56       	subi	r30, 0x6D	; 109
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	93 81       	ldd	r25, Z+3	; 0x03
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	0c f0       	brlt	.+2      	; 0x3430 <ESP8266_VidConnectToWiFi+0xf4>
    342e:	43 c0       	rjmp	.+134    	; 0x34b6 <ESP8266_VidConnectToWiFi+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3430:	fe 01       	movw	r30, r28
    3432:	e9 56       	subi	r30, 0x69	; 105
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	60 81       	ld	r22, Z
    3438:	71 81       	ldd	r23, Z+1	; 0x01
    343a:	82 81       	ldd	r24, Z+2	; 0x02
    343c:	93 81       	ldd	r25, Z+3	; 0x03
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e2       	ldi	r20, 0x20	; 32
    3444:	51 e4       	ldi	r21, 0x41	; 65
    3446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	8e 01       	movw	r16, r28
    3450:	0f 56       	subi	r16, 0x6F	; 111
    3452:	1f 4f       	sbci	r17, 0xFF	; 255
    3454:	bc 01       	movw	r22, r24
    3456:	cd 01       	movw	r24, r26
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	f8 01       	movw	r30, r16
    3462:	91 83       	std	Z+1, r25	; 0x01
    3464:	80 83       	st	Z, r24
    3466:	1f c0       	rjmp	.+62     	; 0x34a6 <ESP8266_VidConnectToWiFi+0x16a>
    3468:	fe 01       	movw	r30, r28
    346a:	e1 57       	subi	r30, 0x71	; 113
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	88 ec       	ldi	r24, 0xC8	; 200
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	fe 01       	movw	r30, r28
    3478:	e1 57       	subi	r30, 0x71	; 113
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	91 81       	ldd	r25, Z+1	; 0x01
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <ESP8266_VidConnectToWiFi+0x144>
    3484:	fe 01       	movw	r30, r28
    3486:	e1 57       	subi	r30, 0x71	; 113
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348e:	de 01       	movw	r26, r28
    3490:	af 56       	subi	r26, 0x6F	; 111
    3492:	bf 4f       	sbci	r27, 0xFF	; 255
    3494:	fe 01       	movw	r30, r28
    3496:	ef 56       	subi	r30, 0x6F	; 111
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	11 96       	adiw	r26, 0x01	; 1
    34a2:	9c 93       	st	X, r25
    34a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a6:	fe 01       	movw	r30, r28
    34a8:	ef 56       	subi	r30, 0x6F	; 111
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	d1 f6       	brne	.-76     	; 0x3468 <ESP8266_VidConnectToWiFi+0x12c>
    34b4:	27 c0       	rjmp	.+78     	; 0x3504 <ESP8266_VidConnectToWiFi+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b6:	8e 01       	movw	r16, r28
    34b8:	0f 56       	subi	r16, 0x6F	; 111
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
    34bc:	fe 01       	movw	r30, r28
    34be:	ed 56       	subi	r30, 0x6D	; 109
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	f8 01       	movw	r30, r16
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	de 01       	movw	r26, r28
    34da:	a3 57       	subi	r26, 0x73	; 115
    34dc:	bf 4f       	sbci	r27, 0xFF	; 255
    34de:	fe 01       	movw	r30, r28
    34e0:	ef 56       	subi	r30, 0x6F	; 111
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	80 81       	ld	r24, Z
    34e6:	91 81       	ldd	r25, Z+1	; 0x01
    34e8:	8d 93       	st	X+, r24
    34ea:	9c 93       	st	X, r25
    34ec:	fe 01       	movw	r30, r28
    34ee:	e3 57       	subi	r30, 0x73	; 115
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <ESP8266_VidConnectToWiFi+0x1ba>
    34fa:	fe 01       	movw	r30, r28
    34fc:	e3 57       	subi	r30, 0x73	; 115
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	80 83       	st	Z, r24
    3504:	fe 01       	movw	r30, r28
    3506:	e7 57       	subi	r30, 0x77	; 119
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	aa e7       	ldi	r26, 0x7A	; 122
    3510:	b4 e4       	ldi	r27, 0x44	; 68
    3512:	80 83       	st	Z, r24
    3514:	91 83       	std	Z+1, r25	; 0x01
    3516:	a2 83       	std	Z+2, r26	; 0x02
    3518:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351a:	8e 01       	movw	r16, r28
    351c:	0b 57       	subi	r16, 0x7B	; 123
    351e:	1f 4f       	sbci	r17, 0xFF	; 255
    3520:	fe 01       	movw	r30, r28
    3522:	e7 57       	subi	r30, 0x77	; 119
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	4a ef       	ldi	r20, 0xFA	; 250
    3534:	54 e4       	ldi	r21, 0x44	; 68
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	f8 01       	movw	r30, r16
    3540:	80 83       	st	Z, r24
    3542:	91 83       	std	Z+1, r25	; 0x01
    3544:	a2 83       	std	Z+2, r26	; 0x02
    3546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3548:	fe 01       	movw	r30, r28
    354a:	eb 57       	subi	r30, 0x7B	; 123
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e8       	ldi	r20, 0x80	; 128
    355c:	5f e3       	ldi	r21, 0x3F	; 63
    355e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3562:	88 23       	and	r24, r24
    3564:	44 f4       	brge	.+16     	; 0x3576 <ESP8266_VidConnectToWiFi+0x23a>
		__ticks = 1;
    3566:	fe 01       	movw	r30, r28
    3568:	ed 57       	subi	r30, 0x7D	; 125
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	91 83       	std	Z+1, r25	; 0x01
    3572:	80 83       	st	Z, r24
    3574:	64 c0       	rjmp	.+200    	; 0x363e <ESP8266_VidConnectToWiFi+0x302>
	else if (__tmp > 65535)
    3576:	fe 01       	movw	r30, r28
    3578:	eb 57       	subi	r30, 0x7B	; 123
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	0c f0       	brlt	.+2      	; 0x3596 <ESP8266_VidConnectToWiFi+0x25a>
    3594:	43 c0       	rjmp	.+134    	; 0x361c <ESP8266_VidConnectToWiFi+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3596:	fe 01       	movw	r30, r28
    3598:	e7 57       	subi	r30, 0x77	; 119
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e2       	ldi	r20, 0x20	; 32
    35aa:	51 e4       	ldi	r21, 0x41	; 65
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	8e 01       	movw	r16, r28
    35b6:	0d 57       	subi	r16, 0x7D	; 125
    35b8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	f8 01       	movw	r30, r16
    35c8:	91 83       	std	Z+1, r25	; 0x01
    35ca:	80 83       	st	Z, r24
    35cc:	1f c0       	rjmp	.+62     	; 0x360c <ESP8266_VidConnectToWiFi+0x2d0>
    35ce:	fe 01       	movw	r30, r28
    35d0:	ef 57       	subi	r30, 0x7F	; 127
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	88 ec       	ldi	r24, 0xC8	; 200
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	80 83       	st	Z, r24
    35dc:	fe 01       	movw	r30, r28
    35de:	ef 57       	subi	r30, 0x7F	; 127
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 81       	ld	r24, Z
    35e4:	91 81       	ldd	r25, Z+1	; 0x01
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <ESP8266_VidConnectToWiFi+0x2aa>
    35ea:	fe 01       	movw	r30, r28
    35ec:	ef 57       	subi	r30, 0x7F	; 127
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f4:	de 01       	movw	r26, r28
    35f6:	ad 57       	subi	r26, 0x7D	; 125
    35f8:	bf 4f       	sbci	r27, 0xFF	; 255
    35fa:	fe 01       	movw	r30, r28
    35fc:	ed 57       	subi	r30, 0x7D	; 125
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	11 96       	adiw	r26, 0x01	; 1
    3608:	9c 93       	st	X, r25
    360a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360c:	fe 01       	movw	r30, r28
    360e:	ed 57       	subi	r30, 0x7D	; 125
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 81       	ld	r24, Z
    3614:	91 81       	ldd	r25, Z+1	; 0x01
    3616:	00 97       	sbiw	r24, 0x00	; 0
    3618:	d1 f6       	brne	.-76     	; 0x35ce <ESP8266_VidConnectToWiFi+0x292>
    361a:	27 c0       	rjmp	.+78     	; 0x366a <ESP8266_VidConnectToWiFi+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361c:	8e 01       	movw	r16, r28
    361e:	0d 57       	subi	r16, 0x7D	; 125
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	fe 01       	movw	r30, r28
    3624:	eb 57       	subi	r30, 0x7B	; 123
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	60 81       	ld	r22, Z
    362a:	71 81       	ldd	r23, Z+1	; 0x01
    362c:	82 81       	ldd	r24, Z+2	; 0x02
    362e:	93 81       	ldd	r25, Z+3	; 0x03
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	f8 01       	movw	r30, r16
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
    363e:	de 01       	movw	r26, r28
    3640:	a1 58       	subi	r26, 0x81	; 129
    3642:	bf 4f       	sbci	r27, 0xFF	; 255
    3644:	fe 01       	movw	r30, r28
    3646:	ed 57       	subi	r30, 0x7D	; 125
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	80 81       	ld	r24, Z
    364c:	91 81       	ldd	r25, Z+1	; 0x01
    364e:	8d 93       	st	X+, r24
    3650:	9c 93       	st	X, r25
    3652:	fe 01       	movw	r30, r28
    3654:	e1 58       	subi	r30, 0x81	; 129
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <ESP8266_VidConnectToWiFi+0x320>
    3660:	fe 01       	movw	r30, r28
    3662:	e1 58       	subi	r30, 0x81	; 129
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
    366a:	fe 01       	movw	r30, r28
    366c:	e5 58       	subi	r30, 0x85	; 133
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	aa e7       	ldi	r26, 0x7A	; 122
    3676:	b4 e4       	ldi	r27, 0x44	; 68
    3678:	80 83       	st	Z, r24
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	a2 83       	std	Z+2, r26	; 0x02
    367e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3680:	8e 01       	movw	r16, r28
    3682:	09 58       	subi	r16, 0x89	; 137
    3684:	1f 4f       	sbci	r17, 0xFF	; 255
    3686:	fe 01       	movw	r30, r28
    3688:	e5 58       	subi	r30, 0x85	; 133
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	60 81       	ld	r22, Z
    368e:	71 81       	ldd	r23, Z+1	; 0x01
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	93 81       	ldd	r25, Z+3	; 0x03
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	4a ef       	ldi	r20, 0xFA	; 250
    369a:	54 e4       	ldi	r21, 0x44	; 68
    369c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	f8 01       	movw	r30, r16
    36a6:	80 83       	st	Z, r24
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	a2 83       	std	Z+2, r26	; 0x02
    36ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36ae:	fe 01       	movw	r30, r28
    36b0:	e9 58       	subi	r30, 0x89	; 137
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	60 81       	ld	r22, Z
    36b6:	71 81       	ldd	r23, Z+1	; 0x01
    36b8:	82 81       	ldd	r24, Z+2	; 0x02
    36ba:	93 81       	ldd	r25, Z+3	; 0x03
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e8       	ldi	r20, 0x80	; 128
    36c2:	5f e3       	ldi	r21, 0x3F	; 63
    36c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c8:	88 23       	and	r24, r24
    36ca:	44 f4       	brge	.+16     	; 0x36dc <ESP8266_VidConnectToWiFi+0x3a0>
		__ticks = 1;
    36cc:	fe 01       	movw	r30, r28
    36ce:	eb 58       	subi	r30, 0x8B	; 139
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	64 c0       	rjmp	.+200    	; 0x37a4 <ESP8266_VidConnectToWiFi+0x468>
	else if (__tmp > 65535)
    36dc:	fe 01       	movw	r30, r28
    36de:	e9 58       	subi	r30, 0x89	; 137
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	3f ef       	ldi	r19, 0xFF	; 255
    36ee:	4f e7       	ldi	r20, 0x7F	; 127
    36f0:	57 e4       	ldi	r21, 0x47	; 71
    36f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	0c f0       	brlt	.+2      	; 0x36fc <ESP8266_VidConnectToWiFi+0x3c0>
    36fa:	43 c0       	rjmp	.+134    	; 0x3782 <ESP8266_VidConnectToWiFi+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fc:	fe 01       	movw	r30, r28
    36fe:	e5 58       	subi	r30, 0x85	; 133
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e2       	ldi	r20, 0x20	; 32
    3710:	51 e4       	ldi	r21, 0x41	; 65
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	8e 01       	movw	r16, r28
    371c:	0b 58       	subi	r16, 0x8B	; 139
    371e:	1f 4f       	sbci	r17, 0xFF	; 255
    3720:	bc 01       	movw	r22, r24
    3722:	cd 01       	movw	r24, r26
    3724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	f8 01       	movw	r30, r16
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	1f c0       	rjmp	.+62     	; 0x3772 <ESP8266_VidConnectToWiFi+0x436>
    3734:	fe 01       	movw	r30, r28
    3736:	ed 58       	subi	r30, 0x8D	; 141
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	88 ec       	ldi	r24, 0xC8	; 200
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
    3742:	fe 01       	movw	r30, r28
    3744:	ed 58       	subi	r30, 0x8D	; 141
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	80 81       	ld	r24, Z
    374a:	91 81       	ldd	r25, Z+1	; 0x01
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	f1 f7       	brne	.-4      	; 0x374c <ESP8266_VidConnectToWiFi+0x410>
    3750:	fe 01       	movw	r30, r28
    3752:	ed 58       	subi	r30, 0x8D	; 141
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	91 83       	std	Z+1, r25	; 0x01
    3758:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375a:	de 01       	movw	r26, r28
    375c:	ab 58       	subi	r26, 0x8B	; 139
    375e:	bf 4f       	sbci	r27, 0xFF	; 255
    3760:	fe 01       	movw	r30, r28
    3762:	eb 58       	subi	r30, 0x8B	; 139
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	11 96       	adiw	r26, 0x01	; 1
    376e:	9c 93       	st	X, r25
    3770:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	fe 01       	movw	r30, r28
    3774:	eb 58       	subi	r30, 0x8B	; 139
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 81       	ld	r24, Z
    377a:	91 81       	ldd	r25, Z+1	; 0x01
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	d1 f6       	brne	.-76     	; 0x3734 <ESP8266_VidConnectToWiFi+0x3f8>
    3780:	27 c0       	rjmp	.+78     	; 0x37d0 <ESP8266_VidConnectToWiFi+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3782:	8e 01       	movw	r16, r28
    3784:	0b 58       	subi	r16, 0x8B	; 139
    3786:	1f 4f       	sbci	r17, 0xFF	; 255
    3788:	fe 01       	movw	r30, r28
    378a:	e9 58       	subi	r30, 0x89	; 137
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	60 81       	ld	r22, Z
    3790:	71 81       	ldd	r23, Z+1	; 0x01
    3792:	82 81       	ldd	r24, Z+2	; 0x02
    3794:	93 81       	ldd	r25, Z+3	; 0x03
    3796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	f8 01       	movw	r30, r16
    37a0:	91 83       	std	Z+1, r25	; 0x01
    37a2:	80 83       	st	Z, r24
    37a4:	de 01       	movw	r26, r28
    37a6:	af 58       	subi	r26, 0x8F	; 143
    37a8:	bf 4f       	sbci	r27, 0xFF	; 255
    37aa:	fe 01       	movw	r30, r28
    37ac:	eb 58       	subi	r30, 0x8B	; 139
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 81       	ld	r24, Z
    37b2:	91 81       	ldd	r25, Z+1	; 0x01
    37b4:	8d 93       	st	X+, r24
    37b6:	9c 93       	st	X, r25
    37b8:	fe 01       	movw	r30, r28
    37ba:	ef 58       	subi	r30, 0x8F	; 143
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <ESP8266_VidConnectToWiFi+0x486>
    37c6:	fe 01       	movw	r30, r28
    37c8:	ef 58       	subi	r30, 0x8F	; 143
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	80 83       	st	Z, r24
    37d0:	fe 01       	movw	r30, r28
    37d2:	e3 59       	subi	r30, 0x93	; 147
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	aa e7       	ldi	r26, 0x7A	; 122
    37dc:	b4 e4       	ldi	r27, 0x44	; 68
    37de:	80 83       	st	Z, r24
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	a2 83       	std	Z+2, r26	; 0x02
    37e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e6:	8e 01       	movw	r16, r28
    37e8:	07 59       	subi	r16, 0x97	; 151
    37ea:	1f 4f       	sbci	r17, 0xFF	; 255
    37ec:	fe 01       	movw	r30, r28
    37ee:	e3 59       	subi	r30, 0x93	; 147
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	4a ef       	ldi	r20, 0xFA	; 250
    3800:	54 e4       	ldi	r21, 0x44	; 68
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	f8 01       	movw	r30, r16
    380c:	80 83       	st	Z, r24
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	a2 83       	std	Z+2, r26	; 0x02
    3812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3814:	fe 01       	movw	r30, r28
    3816:	e7 59       	subi	r30, 0x97	; 151
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	60 81       	ld	r22, Z
    381c:	71 81       	ldd	r23, Z+1	; 0x01
    381e:	82 81       	ldd	r24, Z+2	; 0x02
    3820:	93 81       	ldd	r25, Z+3	; 0x03
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e8       	ldi	r20, 0x80	; 128
    3828:	5f e3       	ldi	r21, 0x3F	; 63
    382a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    382e:	88 23       	and	r24, r24
    3830:	44 f4       	brge	.+16     	; 0x3842 <ESP8266_VidConnectToWiFi+0x506>
		__ticks = 1;
    3832:	fe 01       	movw	r30, r28
    3834:	e9 59       	subi	r30, 0x99	; 153
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
    3840:	64 c0       	rjmp	.+200    	; 0x390a <ESP8266_VidConnectToWiFi+0x5ce>
	else if (__tmp > 65535)
    3842:	fe 01       	movw	r30, r28
    3844:	e7 59       	subi	r30, 0x97	; 151
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	3f ef       	ldi	r19, 0xFF	; 255
    3854:	4f e7       	ldi	r20, 0x7F	; 127
    3856:	57 e4       	ldi	r21, 0x47	; 71
    3858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    385c:	18 16       	cp	r1, r24
    385e:	0c f0       	brlt	.+2      	; 0x3862 <ESP8266_VidConnectToWiFi+0x526>
    3860:	43 c0       	rjmp	.+134    	; 0x38e8 <ESP8266_VidConnectToWiFi+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3862:	fe 01       	movw	r30, r28
    3864:	e3 59       	subi	r30, 0x93	; 147
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	60 81       	ld	r22, Z
    386a:	71 81       	ldd	r23, Z+1	; 0x01
    386c:	82 81       	ldd	r24, Z+2	; 0x02
    386e:	93 81       	ldd	r25, Z+3	; 0x03
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	8e 01       	movw	r16, r28
    3882:	09 59       	subi	r16, 0x99	; 153
    3884:	1f 4f       	sbci	r17, 0xFF	; 255
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	f8 01       	movw	r30, r16
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	1f c0       	rjmp	.+62     	; 0x38d8 <ESP8266_VidConnectToWiFi+0x59c>
    389a:	fe 01       	movw	r30, r28
    389c:	eb 59       	subi	r30, 0x9B	; 155
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	88 ec       	ldi	r24, 0xC8	; 200
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	91 83       	std	Z+1, r25	; 0x01
    38a6:	80 83       	st	Z, r24
    38a8:	fe 01       	movw	r30, r28
    38aa:	eb 59       	subi	r30, 0x9B	; 155
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	80 81       	ld	r24, Z
    38b0:	91 81       	ldd	r25, Z+1	; 0x01
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <ESP8266_VidConnectToWiFi+0x576>
    38b6:	fe 01       	movw	r30, r28
    38b8:	eb 59       	subi	r30, 0x9B	; 155
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c0:	de 01       	movw	r26, r28
    38c2:	a9 59       	subi	r26, 0x99	; 153
    38c4:	bf 4f       	sbci	r27, 0xFF	; 255
    38c6:	fe 01       	movw	r30, r28
    38c8:	e9 59       	subi	r30, 0x99	; 153
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	11 96       	adiw	r26, 0x01	; 1
    38d4:	9c 93       	st	X, r25
    38d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d8:	fe 01       	movw	r30, r28
    38da:	e9 59       	subi	r30, 0x99	; 153
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	80 81       	ld	r24, Z
    38e0:	91 81       	ldd	r25, Z+1	; 0x01
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	d1 f6       	brne	.-76     	; 0x389a <ESP8266_VidConnectToWiFi+0x55e>
    38e6:	27 c0       	rjmp	.+78     	; 0x3936 <ESP8266_VidConnectToWiFi+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e8:	8e 01       	movw	r16, r28
    38ea:	09 59       	subi	r16, 0x99	; 153
    38ec:	1f 4f       	sbci	r17, 0xFF	; 255
    38ee:	fe 01       	movw	r30, r28
    38f0:	e7 59       	subi	r30, 0x97	; 151
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	82 81       	ldd	r24, Z+2	; 0x02
    38fa:	93 81       	ldd	r25, Z+3	; 0x03
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	f8 01       	movw	r30, r16
    3906:	91 83       	std	Z+1, r25	; 0x01
    3908:	80 83       	st	Z, r24
    390a:	de 01       	movw	r26, r28
    390c:	ad 59       	subi	r26, 0x9D	; 157
    390e:	bf 4f       	sbci	r27, 0xFF	; 255
    3910:	fe 01       	movw	r30, r28
    3912:	e9 59       	subi	r30, 0x99	; 153
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	8d 93       	st	X+, r24
    391c:	9c 93       	st	X, r25
    391e:	fe 01       	movw	r30, r28
    3920:	ed 59       	subi	r30, 0x9D	; 157
    3922:	ff 4f       	sbci	r31, 0xFF	; 255
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	f1 f7       	brne	.-4      	; 0x3928 <ESP8266_VidConnectToWiFi+0x5ec>
    392c:	fe 01       	movw	r30, r28
    392e:	ed 59       	subi	r30, 0x9D	; 157
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	91 83       	std	Z+1, r25	; 0x01
    3934:	80 83       	st	Z, r24
    3936:	fe 01       	movw	r30, r28
    3938:	e1 5a       	subi	r30, 0xA1	; 161
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	aa e7       	ldi	r26, 0x7A	; 122
    3942:	b4 e4       	ldi	r27, 0x44	; 68
    3944:	80 83       	st	Z, r24
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	a2 83       	std	Z+2, r26	; 0x02
    394a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394c:	8e 01       	movw	r16, r28
    394e:	05 5a       	subi	r16, 0xA5	; 165
    3950:	1f 4f       	sbci	r17, 0xFF	; 255
    3952:	fe 01       	movw	r30, r28
    3954:	e1 5a       	subi	r30, 0xA1	; 161
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	4a ef       	ldi	r20, 0xFA	; 250
    3966:	54 e4       	ldi	r21, 0x44	; 68
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	f8 01       	movw	r30, r16
    3972:	80 83       	st	Z, r24
    3974:	91 83       	std	Z+1, r25	; 0x01
    3976:	a2 83       	std	Z+2, r26	; 0x02
    3978:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    397a:	fe 01       	movw	r30, r28
    397c:	e5 5a       	subi	r30, 0xA5	; 165
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e8       	ldi	r20, 0x80	; 128
    398e:	5f e3       	ldi	r21, 0x3F	; 63
    3990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3994:	88 23       	and	r24, r24
    3996:	44 f4       	brge	.+16     	; 0x39a8 <ESP8266_VidConnectToWiFi+0x66c>
		__ticks = 1;
    3998:	fe 01       	movw	r30, r28
    399a:	e7 5a       	subi	r30, 0xA7	; 167
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	91 83       	std	Z+1, r25	; 0x01
    39a4:	80 83       	st	Z, r24
    39a6:	64 c0       	rjmp	.+200    	; 0x3a70 <ESP8266_VidConnectToWiFi+0x734>
	else if (__tmp > 65535)
    39a8:	fe 01       	movw	r30, r28
    39aa:	e5 5a       	subi	r30, 0xA5	; 165
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	3f ef       	ldi	r19, 0xFF	; 255
    39ba:	4f e7       	ldi	r20, 0x7F	; 127
    39bc:	57 e4       	ldi	r21, 0x47	; 71
    39be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39c2:	18 16       	cp	r1, r24
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <ESP8266_VidConnectToWiFi+0x68c>
    39c6:	43 c0       	rjmp	.+134    	; 0x3a4e <ESP8266_VidConnectToWiFi+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c8:	fe 01       	movw	r30, r28
    39ca:	e1 5a       	subi	r30, 0xA1	; 161
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	60 81       	ld	r22, Z
    39d0:	71 81       	ldd	r23, Z+1	; 0x01
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e2       	ldi	r20, 0x20	; 32
    39dc:	51 e4       	ldi	r21, 0x41	; 65
    39de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	8e 01       	movw	r16, r28
    39e8:	07 5a       	subi	r16, 0xA7	; 167
    39ea:	1f 4f       	sbci	r17, 0xFF	; 255
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	f8 01       	movw	r30, r16
    39fa:	91 83       	std	Z+1, r25	; 0x01
    39fc:	80 83       	st	Z, r24
    39fe:	1f c0       	rjmp	.+62     	; 0x3a3e <ESP8266_VidConnectToWiFi+0x702>
    3a00:	fe 01       	movw	r30, r28
    3a02:	e9 5a       	subi	r30, 0xA9	; 169
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	88 ec       	ldi	r24, 0xC8	; 200
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e9 5a       	subi	r30, 0xA9	; 169
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <ESP8266_VidConnectToWiFi+0x6dc>
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e9 5a       	subi	r30, 0xA9	; 169
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	de 01       	movw	r26, r28
    3a28:	a7 5a       	subi	r26, 0xA7	; 167
    3a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e7 5a       	subi	r30, 0xA7	; 167
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	11 96       	adiw	r26, 0x01	; 1
    3a3a:	9c 93       	st	X, r25
    3a3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e7 5a       	subi	r30, 0xA7	; 167
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	91 81       	ldd	r25, Z+1	; 0x01
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	d1 f6       	brne	.-76     	; 0x3a00 <ESP8266_VidConnectToWiFi+0x6c4>
    3a4c:	27 c0       	rjmp	.+78     	; 0x3a9c <ESP8266_VidConnectToWiFi+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4e:	8e 01       	movw	r16, r28
    3a50:	07 5a       	subi	r16, 0xA7	; 167
    3a52:	1f 4f       	sbci	r17, 0xFF	; 255
    3a54:	fe 01       	movw	r30, r28
    3a56:	e5 5a       	subi	r30, 0xA5	; 165
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	60 81       	ld	r22, Z
    3a5c:	71 81       	ldd	r23, Z+1	; 0x01
    3a5e:	82 81       	ldd	r24, Z+2	; 0x02
    3a60:	93 81       	ldd	r25, Z+3	; 0x03
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	80 83       	st	Z, r24
    3a70:	de 01       	movw	r26, r28
    3a72:	ab 5a       	subi	r26, 0xAB	; 171
    3a74:	bf 4f       	sbci	r27, 0xFF	; 255
    3a76:	fe 01       	movw	r30, r28
    3a78:	e7 5a       	subi	r30, 0xA7	; 167
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	80 81       	ld	r24, Z
    3a7e:	91 81       	ldd	r25, Z+1	; 0x01
    3a80:	8d 93       	st	X+, r24
    3a82:	9c 93       	st	X, r25
    3a84:	fe 01       	movw	r30, r28
    3a86:	eb 5a       	subi	r30, 0xAB	; 171
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <ESP8266_VidConnectToWiFi+0x752>
    3a92:	fe 01       	movw	r30, r28
    3a94:	eb 5a       	subi	r30, 0xAB	; 171
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	91 83       	std	Z+1, r25	; 0x01
    3a9a:	80 83       	st	Z, r24
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	ef 5a       	subi	r30, 0xAF	; 175
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	aa e7       	ldi	r26, 0x7A	; 122
    3aa8:	b4 e4       	ldi	r27, 0x44	; 68
    3aaa:	80 83       	st	Z, r24
    3aac:	91 83       	std	Z+1, r25	; 0x01
    3aae:	a2 83       	std	Z+2, r26	; 0x02
    3ab0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab2:	8e 01       	movw	r16, r28
    3ab4:	03 5b       	subi	r16, 0xB3	; 179
    3ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ef 5a       	subi	r30, 0xAF	; 175
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4a ef       	ldi	r20, 0xFA	; 250
    3acc:	54 e4       	ldi	r21, 0x44	; 68
    3ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	f8 01       	movw	r30, r16
    3ad8:	80 83       	st	Z, r24
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	a2 83       	std	Z+2, r26	; 0x02
    3ade:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e3 5b       	subi	r30, 0xB3	; 179
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	60 81       	ld	r22, Z
    3ae8:	71 81       	ldd	r23, Z+1	; 0x01
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e8       	ldi	r20, 0x80	; 128
    3af4:	5f e3       	ldi	r21, 0x3F	; 63
    3af6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3afa:	88 23       	and	r24, r24
    3afc:	44 f4       	brge	.+16     	; 0x3b0e <ESP8266_VidConnectToWiFi+0x7d2>
		__ticks = 1;
    3afe:	fe 01       	movw	r30, r28
    3b00:	e5 5b       	subi	r30, 0xB5	; 181
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	91 83       	std	Z+1, r25	; 0x01
    3b0a:	80 83       	st	Z, r24
    3b0c:	64 c0       	rjmp	.+200    	; 0x3bd6 <ESP8266_VidConnectToWiFi+0x89a>
	else if (__tmp > 65535)
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e3 5b       	subi	r30, 0xB3	; 179
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	60 81       	ld	r22, Z
    3b16:	71 81       	ldd	r23, Z+1	; 0x01
    3b18:	82 81       	ldd	r24, Z+2	; 0x02
    3b1a:	93 81       	ldd	r25, Z+3	; 0x03
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	3f ef       	ldi	r19, 0xFF	; 255
    3b20:	4f e7       	ldi	r20, 0x7F	; 127
    3b22:	57 e4       	ldi	r21, 0x47	; 71
    3b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b28:	18 16       	cp	r1, r24
    3b2a:	0c f0       	brlt	.+2      	; 0x3b2e <ESP8266_VidConnectToWiFi+0x7f2>
    3b2c:	43 c0       	rjmp	.+134    	; 0x3bb4 <ESP8266_VidConnectToWiFi+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2e:	fe 01       	movw	r30, r28
    3b30:	ef 5a       	subi	r30, 0xAF	; 175
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	60 81       	ld	r22, Z
    3b36:	71 81       	ldd	r23, Z+1	; 0x01
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e2       	ldi	r20, 0x20	; 32
    3b42:	51 e4       	ldi	r21, 0x41	; 65
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	8e 01       	movw	r16, r28
    3b4e:	05 5b       	subi	r16, 0xB5	; 181
    3b50:	1f 4f       	sbci	r17, 0xFF	; 255
    3b52:	bc 01       	movw	r22, r24
    3b54:	cd 01       	movw	r24, r26
    3b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	f8 01       	movw	r30, r16
    3b60:	91 83       	std	Z+1, r25	; 0x01
    3b62:	80 83       	st	Z, r24
    3b64:	1f c0       	rjmp	.+62     	; 0x3ba4 <ESP8266_VidConnectToWiFi+0x868>
    3b66:	fe 01       	movw	r30, r28
    3b68:	e7 5b       	subi	r30, 0xB7	; 183
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	88 ec       	ldi	r24, 0xC8	; 200
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	91 83       	std	Z+1, r25	; 0x01
    3b72:	80 83       	st	Z, r24
    3b74:	fe 01       	movw	r30, r28
    3b76:	e7 5b       	subi	r30, 0xB7	; 183
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <ESP8266_VidConnectToWiFi+0x842>
    3b82:	fe 01       	movw	r30, r28
    3b84:	e7 5b       	subi	r30, 0xB7	; 183
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b8c:	de 01       	movw	r26, r28
    3b8e:	a5 5b       	subi	r26, 0xB5	; 181
    3b90:	bf 4f       	sbci	r27, 0xFF	; 255
    3b92:	fe 01       	movw	r30, r28
    3b94:	e5 5b       	subi	r30, 0xB5	; 181
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	80 81       	ld	r24, Z
    3b9a:	91 81       	ldd	r25, Z+1	; 0x01
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	11 96       	adiw	r26, 0x01	; 1
    3ba0:	9c 93       	st	X, r25
    3ba2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e5 5b       	subi	r30, 0xB5	; 181
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 81       	ld	r24, Z
    3bac:	91 81       	ldd	r25, Z+1	; 0x01
    3bae:	00 97       	sbiw	r24, 0x00	; 0
    3bb0:	d1 f6       	brne	.-76     	; 0x3b66 <ESP8266_VidConnectToWiFi+0x82a>
    3bb2:	27 c0       	rjmp	.+78     	; 0x3c02 <ESP8266_VidConnectToWiFi+0x8c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb4:	8e 01       	movw	r16, r28
    3bb6:	05 5b       	subi	r16, 0xB5	; 181
    3bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bba:	fe 01       	movw	r30, r28
    3bbc:	e3 5b       	subi	r30, 0xB3	; 179
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	82 81       	ldd	r24, Z+2	; 0x02
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	f8 01       	movw	r30, r16
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
    3bd6:	de 01       	movw	r26, r28
    3bd8:	a9 5b       	subi	r26, 0xB9	; 185
    3bda:	bf 4f       	sbci	r27, 0xFF	; 255
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e5 5b       	subi	r30, 0xB5	; 181
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	8d 93       	st	X+, r24
    3be8:	9c 93       	st	X, r25
    3bea:	fe 01       	movw	r30, r28
    3bec:	e9 5b       	subi	r30, 0xB9	; 185
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <ESP8266_VidConnectToWiFi+0x8b8>
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e9 5b       	subi	r30, 0xB9	; 185
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	fe 01       	movw	r30, r28
    3c04:	ed 5b       	subi	r30, 0xBD	; 189
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	aa e7       	ldi	r26, 0x7A	; 122
    3c0e:	b4 e4       	ldi	r27, 0x44	; 68
    3c10:	80 83       	st	Z, r24
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	a2 83       	std	Z+2, r26	; 0x02
    3c16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c18:	8e 01       	movw	r16, r28
    3c1a:	01 5c       	subi	r16, 0xC1	; 193
    3c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ed 5b       	subi	r30, 0xBD	; 189
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	60 81       	ld	r22, Z
    3c26:	71 81       	ldd	r23, Z+1	; 0x01
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	4a ef       	ldi	r20, 0xFA	; 250
    3c32:	54 e4       	ldi	r21, 0x44	; 68
    3c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	80 83       	st	Z, r24
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	a2 83       	std	Z+2, r26	; 0x02
    3c44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c46:	fe 01       	movw	r30, r28
    3c48:	ff 96       	adiw	r30, 0x3f	; 63
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e8       	ldi	r20, 0x80	; 128
    3c58:	5f e3       	ldi	r21, 0x3F	; 63
    3c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c5e:	88 23       	and	r24, r24
    3c60:	2c f4       	brge	.+10     	; 0x3c6c <ESP8266_VidConnectToWiFi+0x930>
		__ticks = 1;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	9e af       	std	Y+62, r25	; 0x3e
    3c68:	8d af       	std	Y+61, r24	; 0x3d
    3c6a:	46 c0       	rjmp	.+140    	; 0x3cf8 <ESP8266_VidConnectToWiFi+0x9bc>
	else if (__tmp > 65535)
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	ff 96       	adiw	r30, 0x3f	; 63
    3c70:	60 81       	ld	r22, Z
    3c72:	71 81       	ldd	r23, Z+1	; 0x01
    3c74:	82 81       	ldd	r24, Z+2	; 0x02
    3c76:	93 81       	ldd	r25, Z+3	; 0x03
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	3f ef       	ldi	r19, 0xFF	; 255
    3c7c:	4f e7       	ldi	r20, 0x7F	; 127
    3c7e:	57 e4       	ldi	r21, 0x47	; 71
    3c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c84:	18 16       	cp	r1, r24
    3c86:	64 f5       	brge	.+88     	; 0x3ce0 <ESP8266_VidConnectToWiFi+0x9a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ed 5b       	subi	r30, 0xBD	; 189
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	60 81       	ld	r22, Z
    3c90:	71 81       	ldd	r23, Z+1	; 0x01
    3c92:	82 81       	ldd	r24, Z+2	; 0x02
    3c94:	93 81       	ldd	r25, Z+3	; 0x03
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e2       	ldi	r20, 0x20	; 32
    3c9c:	51 e4       	ldi	r21, 0x41	; 65
    3c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	bc 01       	movw	r22, r24
    3ca8:	cd 01       	movw	r24, r26
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9e af       	std	Y+62, r25	; 0x3e
    3cb4:	8d af       	std	Y+61, r24	; 0x3d
    3cb6:	0f c0       	rjmp	.+30     	; 0x3cd6 <ESP8266_VidConnectToWiFi+0x99a>
    3cb8:	88 ec       	ldi	r24, 0xC8	; 200
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9c af       	std	Y+60, r25	; 0x3c
    3cbe:	8b af       	std	Y+59, r24	; 0x3b
    3cc0:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cc2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	f1 f7       	brne	.-4      	; 0x3cc4 <ESP8266_VidConnectToWiFi+0x988>
    3cc8:	9c af       	std	Y+60, r25	; 0x3c
    3cca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ccc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cce:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	9e af       	std	Y+62, r25	; 0x3e
    3cd4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	69 f7       	brne	.-38     	; 0x3cb8 <ESP8266_VidConnectToWiFi+0x97c>
    3cde:	16 c0       	rjmp	.+44     	; 0x3d0c <ESP8266_VidConnectToWiFi+0x9d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	ff 96       	adiw	r30, 0x3f	; 63
    3ce4:	60 81       	ld	r22, Z
    3ce6:	71 81       	ldd	r23, Z+1	; 0x01
    3ce8:	82 81       	ldd	r24, Z+2	; 0x02
    3cea:	93 81       	ldd	r25, Z+3	; 0x03
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9e af       	std	Y+62, r25	; 0x3e
    3cf6:	8d af       	std	Y+61, r24	; 0x3d
    3cf8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cfa:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cfc:	9a af       	std	Y+58, r25	; 0x3a
    3cfe:	89 af       	std	Y+57, r24	; 0x39
    3d00:	89 ad       	ldd	r24, Y+57	; 0x39
    3d02:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <ESP8266_VidConnectToWiFi+0x9c8>
    3d08:	9a af       	std	Y+58, r25	; 0x3a
    3d0a:	89 af       	std	Y+57, r24	; 0x39
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	aa e7       	ldi	r26, 0x7A	; 122
    3d12:	b4 e4       	ldi	r27, 0x44	; 68
    3d14:	8d ab       	std	Y+53, r24	; 0x35
    3d16:	9e ab       	std	Y+54, r25	; 0x36
    3d18:	af ab       	std	Y+55, r26	; 0x37
    3d1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d1e:	7e a9       	ldd	r23, Y+54	; 0x36
    3d20:	8f a9       	ldd	r24, Y+55	; 0x37
    3d22:	98 ad       	ldd	r25, Y+56	; 0x38
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	4a ef       	ldi	r20, 0xFA	; 250
    3d2a:	54 e4       	ldi	r21, 0x44	; 68
    3d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	89 ab       	std	Y+49, r24	; 0x31
    3d36:	9a ab       	std	Y+50, r25	; 0x32
    3d38:	ab ab       	std	Y+51, r26	; 0x33
    3d3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d3c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d3e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d40:	8b a9       	ldd	r24, Y+51	; 0x33
    3d42:	9c a9       	ldd	r25, Y+52	; 0x34
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e8       	ldi	r20, 0x80	; 128
    3d4a:	5f e3       	ldi	r21, 0x3F	; 63
    3d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d50:	88 23       	and	r24, r24
    3d52:	2c f4       	brge	.+10     	; 0x3d5e <ESP8266_VidConnectToWiFi+0xa22>
		__ticks = 1;
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	98 ab       	std	Y+48, r25	; 0x30
    3d5a:	8f a7       	std	Y+47, r24	; 0x2f
    3d5c:	3f c0       	rjmp	.+126    	; 0x3ddc <ESP8266_VidConnectToWiFi+0xaa0>
	else if (__tmp > 65535)
    3d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d60:	7a a9       	ldd	r23, Y+50	; 0x32
    3d62:	8b a9       	ldd	r24, Y+51	; 0x33
    3d64:	9c a9       	ldd	r25, Y+52	; 0x34
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	3f ef       	ldi	r19, 0xFF	; 255
    3d6a:	4f e7       	ldi	r20, 0x7F	; 127
    3d6c:	57 e4       	ldi	r21, 0x47	; 71
    3d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d72:	18 16       	cp	r1, r24
    3d74:	4c f5       	brge	.+82     	; 0x3dc8 <ESP8266_VidConnectToWiFi+0xa8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d76:	6d a9       	ldd	r22, Y+53	; 0x35
    3d78:	7e a9       	ldd	r23, Y+54	; 0x36
    3d7a:	8f a9       	ldd	r24, Y+55	; 0x37
    3d7c:	98 ad       	ldd	r25, Y+56	; 0x38
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	40 e2       	ldi	r20, 0x20	; 32
    3d84:	51 e4       	ldi	r21, 0x41	; 65
    3d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	98 ab       	std	Y+48, r25	; 0x30
    3d9c:	8f a7       	std	Y+47, r24	; 0x2f
    3d9e:	0f c0       	rjmp	.+30     	; 0x3dbe <ESP8266_VidConnectToWiFi+0xa82>
    3da0:	88 ec       	ldi	r24, 0xC8	; 200
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	9e a7       	std	Y+46, r25	; 0x2e
    3da6:	8d a7       	std	Y+45, r24	; 0x2d
    3da8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3daa:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <ESP8266_VidConnectToWiFi+0xa70>
    3db0:	9e a7       	std	Y+46, r25	; 0x2e
    3db2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3db6:	98 a9       	ldd	r25, Y+48	; 0x30
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	98 ab       	std	Y+48, r25	; 0x30
    3dbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dc0:	98 a9       	ldd	r25, Y+48	; 0x30
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	69 f7       	brne	.-38     	; 0x3da0 <ESP8266_VidConnectToWiFi+0xa64>
    3dc6:	14 c0       	rjmp	.+40     	; 0x3df0 <ESP8266_VidConnectToWiFi+0xab4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    3dca:	7a a9       	ldd	r23, Y+50	; 0x32
    3dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    3dce:	9c a9       	ldd	r25, Y+52	; 0x34
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	98 ab       	std	Y+48, r25	; 0x30
    3dda:	8f a7       	std	Y+47, r24	; 0x2f
    3ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dde:	98 a9       	ldd	r25, Y+48	; 0x30
    3de0:	9c a7       	std	Y+44, r25	; 0x2c
    3de2:	8b a7       	std	Y+43, r24	; 0x2b
    3de4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3de6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <ESP8266_VidConnectToWiFi+0xaac>
    3dec:	9c a7       	std	Y+44, r25	; 0x2c
    3dee:	8b a7       	std	Y+43, r24	; 0x2b
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	aa e7       	ldi	r26, 0x7A	; 122
    3df6:	b4 e4       	ldi	r27, 0x44	; 68
    3df8:	8f a3       	std	Y+39, r24	; 0x27
    3dfa:	98 a7       	std	Y+40, r25	; 0x28
    3dfc:	a9 a7       	std	Y+41, r26	; 0x29
    3dfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e00:	6f a1       	ldd	r22, Y+39	; 0x27
    3e02:	78 a5       	ldd	r23, Y+40	; 0x28
    3e04:	89 a5       	ldd	r24, Y+41	; 0x29
    3e06:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a ef       	ldi	r20, 0xFA	; 250
    3e0e:	54 e4       	ldi	r21, 0x44	; 68
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	8b a3       	std	Y+35, r24	; 0x23
    3e1a:	9c a3       	std	Y+36, r25	; 0x24
    3e1c:	ad a3       	std	Y+37, r26	; 0x25
    3e1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e20:	6b a1       	ldd	r22, Y+35	; 0x23
    3e22:	7c a1       	ldd	r23, Y+36	; 0x24
    3e24:	8d a1       	ldd	r24, Y+37	; 0x25
    3e26:	9e a1       	ldd	r25, Y+38	; 0x26
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e8       	ldi	r20, 0x80	; 128
    3e2e:	5f e3       	ldi	r21, 0x3F	; 63
    3e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e34:	88 23       	and	r24, r24
    3e36:	2c f4       	brge	.+10     	; 0x3e42 <ESP8266_VidConnectToWiFi+0xb06>
		__ticks = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	9a a3       	std	Y+34, r25	; 0x22
    3e3e:	89 a3       	std	Y+33, r24	; 0x21
    3e40:	3f c0       	rjmp	.+126    	; 0x3ec0 <ESP8266_VidConnectToWiFi+0xb84>
	else if (__tmp > 65535)
    3e42:	6b a1       	ldd	r22, Y+35	; 0x23
    3e44:	7c a1       	ldd	r23, Y+36	; 0x24
    3e46:	8d a1       	ldd	r24, Y+37	; 0x25
    3e48:	9e a1       	ldd	r25, Y+38	; 0x26
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	3f ef       	ldi	r19, 0xFF	; 255
    3e4e:	4f e7       	ldi	r20, 0x7F	; 127
    3e50:	57 e4       	ldi	r21, 0x47	; 71
    3e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e56:	18 16       	cp	r1, r24
    3e58:	4c f5       	brge	.+82     	; 0x3eac <ESP8266_VidConnectToWiFi+0xb70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    3e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    3e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e2       	ldi	r20, 0x20	; 32
    3e68:	51 e4       	ldi	r21, 0x41	; 65
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	bc 01       	movw	r22, r24
    3e74:	cd 01       	movw	r24, r26
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9a a3       	std	Y+34, r25	; 0x22
    3e80:	89 a3       	std	Y+33, r24	; 0x21
    3e82:	0f c0       	rjmp	.+30     	; 0x3ea2 <ESP8266_VidConnectToWiFi+0xb66>
    3e84:	88 ec       	ldi	r24, 0xC8	; 200
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	98 a3       	std	Y+32, r25	; 0x20
    3e8a:	8f 8f       	std	Y+31, r24	; 0x1f
    3e8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <ESP8266_VidConnectToWiFi+0xb54>
    3e94:	98 a3       	std	Y+32, r25	; 0x20
    3e96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	89 a1       	ldd	r24, Y+33	; 0x21
    3e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	9a a3       	std	Y+34, r25	; 0x22
    3ea0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	69 f7       	brne	.-38     	; 0x3e84 <ESP8266_VidConnectToWiFi+0xb48>
    3eaa:	14 c0       	rjmp	.+40     	; 0x3ed4 <ESP8266_VidConnectToWiFi+0xb98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	6b a1       	ldd	r22, Y+35	; 0x23
    3eae:	7c a1       	ldd	r23, Y+36	; 0x24
    3eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    3eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	9a a3       	std	Y+34, r25	; 0x22
    3ebe:	89 a3       	std	Y+33, r24	; 0x21
    3ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <ESP8266_VidConnectToWiFi+0xb90>
    3ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	aa e7       	ldi	r26, 0x7A	; 122
    3eda:	b4 e4       	ldi	r27, 0x44	; 68
    3edc:	89 8f       	std	Y+25, r24	; 0x19
    3ede:	9a 8f       	std	Y+26, r25	; 0x1a
    3ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	4a ef       	ldi	r20, 0xFA	; 250
    3ef2:	54 e4       	ldi	r21, 0x44	; 68
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8d 8b       	std	Y+21, r24	; 0x15
    3efe:	9e 8b       	std	Y+22, r25	; 0x16
    3f00:	af 8b       	std	Y+23, r26	; 0x17
    3f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f04:	6d 89       	ldd	r22, Y+21	; 0x15
    3f06:	7e 89       	ldd	r23, Y+22	; 0x16
    3f08:	8f 89       	ldd	r24, Y+23	; 0x17
    3f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <ESP8266_VidConnectToWiFi+0xbea>
		__ticks = 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9c 8b       	std	Y+20, r25	; 0x14
    3f22:	8b 8b       	std	Y+19, r24	; 0x13
    3f24:	3f c0       	rjmp	.+126    	; 0x3fa4 <ESP8266_VidConnectToWiFi+0xc68>
	else if (__tmp > 65535)
    3f26:	6d 89       	ldd	r22, Y+21	; 0x15
    3f28:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	3f ef       	ldi	r19, 0xFF	; 255
    3f32:	4f e7       	ldi	r20, 0x7F	; 127
    3f34:	57 e4       	ldi	r21, 0x47	; 71
    3f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f3a:	18 16       	cp	r1, r24
    3f3c:	4c f5       	brge	.+82     	; 0x3f90 <ESP8266_VidConnectToWiFi+0xc54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e2       	ldi	r20, 0x20	; 32
    3f4c:	51 e4       	ldi	r21, 0x41	; 65
    3f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	9c 8b       	std	Y+20, r25	; 0x14
    3f64:	8b 8b       	std	Y+19, r24	; 0x13
    3f66:	0f c0       	rjmp	.+30     	; 0x3f86 <ESP8266_VidConnectToWiFi+0xc4a>
    3f68:	88 ec       	ldi	r24, 0xC8	; 200
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	9a 8b       	std	Y+18, r25	; 0x12
    3f6e:	89 8b       	std	Y+17, r24	; 0x11
    3f70:	89 89       	ldd	r24, Y+17	; 0x11
    3f72:	9a 89       	ldd	r25, Y+18	; 0x12
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <ESP8266_VidConnectToWiFi+0xc38>
    3f78:	9a 8b       	std	Y+18, r25	; 0x12
    3f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	9c 8b       	std	Y+20, r25	; 0x14
    3f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f86:	8b 89       	ldd	r24, Y+19	; 0x13
    3f88:	9c 89       	ldd	r25, Y+20	; 0x14
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	69 f7       	brne	.-38     	; 0x3f68 <ESP8266_VidConnectToWiFi+0xc2c>
    3f8e:	14 c0       	rjmp	.+40     	; 0x3fb8 <ESP8266_VidConnectToWiFi+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f90:	6d 89       	ldd	r22, Y+21	; 0x15
    3f92:	7e 89       	ldd	r23, Y+22	; 0x16
    3f94:	8f 89       	ldd	r24, Y+23	; 0x17
    3f96:	98 8d       	ldd	r25, Y+24	; 0x18
    3f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	9c 8b       	std	Y+20, r25	; 0x14
    3fa2:	8b 8b       	std	Y+19, r24	; 0x13
    3fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa8:	98 8b       	std	Y+16, r25	; 0x10
    3faa:	8f 87       	std	Y+15, r24	; 0x0f
    3fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fae:	98 89       	ldd	r25, Y+16	; 0x10
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <ESP8266_VidConnectToWiFi+0xc74>
    3fb4:	98 8b       	std	Y+16, r25	; 0x10
    3fb6:	8f 87       	std	Y+15, r24	; 0x0f
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	aa e7       	ldi	r26, 0x7A	; 122
    3fbe:	b4 e4       	ldi	r27, 0x44	; 68
    3fc0:	8b 87       	std	Y+11, r24	; 0x0b
    3fc2:	9c 87       	std	Y+12, r25	; 0x0c
    3fc4:	ad 87       	std	Y+13, r26	; 0x0d
    3fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	4a ef       	ldi	r20, 0xFA	; 250
    3fd6:	54 e4       	ldi	r21, 0x44	; 68
    3fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	8f 83       	std	Y+7, r24	; 0x07
    3fe2:	98 87       	std	Y+8, r25	; 0x08
    3fe4:	a9 87       	std	Y+9, r26	; 0x09
    3fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fea:	78 85       	ldd	r23, Y+8	; 0x08
    3fec:	89 85       	ldd	r24, Y+9	; 0x09
    3fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	40 e8       	ldi	r20, 0x80	; 128
    3ff6:	5f e3       	ldi	r21, 0x3F	; 63
    3ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ffc:	88 23       	and	r24, r24
    3ffe:	2c f4       	brge	.+10     	; 0x400a <ESP8266_VidConnectToWiFi+0xcce>
		__ticks = 1;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	9e 83       	std	Y+6, r25	; 0x06
    4006:	8d 83       	std	Y+5, r24	; 0x05
    4008:	3f c0       	rjmp	.+126    	; 0x4088 <ESP8266_VidConnectToWiFi+0xd4c>
	else if (__tmp > 65535)
    400a:	6f 81       	ldd	r22, Y+7	; 0x07
    400c:	78 85       	ldd	r23, Y+8	; 0x08
    400e:	89 85       	ldd	r24, Y+9	; 0x09
    4010:	9a 85       	ldd	r25, Y+10	; 0x0a
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	3f ef       	ldi	r19, 0xFF	; 255
    4016:	4f e7       	ldi	r20, 0x7F	; 127
    4018:	57 e4       	ldi	r21, 0x47	; 71
    401a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    401e:	18 16       	cp	r1, r24
    4020:	4c f5       	brge	.+82     	; 0x4074 <ESP8266_VidConnectToWiFi+0xd38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4022:	6b 85       	ldd	r22, Y+11	; 0x0b
    4024:	7c 85       	ldd	r23, Y+12	; 0x0c
    4026:	8d 85       	ldd	r24, Y+13	; 0x0d
    4028:	9e 85       	ldd	r25, Y+14	; 0x0e
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	40 e2       	ldi	r20, 0x20	; 32
    4030:	51 e4       	ldi	r21, 0x41	; 65
    4032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	9e 83       	std	Y+6, r25	; 0x06
    4048:	8d 83       	std	Y+5, r24	; 0x05
    404a:	0f c0       	rjmp	.+30     	; 0x406a <ESP8266_VidConnectToWiFi+0xd2e>
    404c:	88 ec       	ldi	r24, 0xC8	; 200
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	9c 83       	std	Y+4, r25	; 0x04
    4052:	8b 83       	std	Y+3, r24	; 0x03
    4054:	8b 81       	ldd	r24, Y+3	; 0x03
    4056:	9c 81       	ldd	r25, Y+4	; 0x04
    4058:	01 97       	sbiw	r24, 0x01	; 1
    405a:	f1 f7       	brne	.-4      	; 0x4058 <ESP8266_VidConnectToWiFi+0xd1c>
    405c:	9c 83       	std	Y+4, r25	; 0x04
    405e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	9e 83       	std	Y+6, r25	; 0x06
    4068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406a:	8d 81       	ldd	r24, Y+5	; 0x05
    406c:	9e 81       	ldd	r25, Y+6	; 0x06
    406e:	00 97       	sbiw	r24, 0x00	; 0
    4070:	69 f7       	brne	.-38     	; 0x404c <ESP8266_VidConnectToWiFi+0xd10>
    4072:	14 c0       	rjmp	.+40     	; 0x409c <ESP8266_VidConnectToWiFi+0xd60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4074:	6f 81       	ldd	r22, Y+7	; 0x07
    4076:	78 85       	ldd	r23, Y+8	; 0x08
    4078:	89 85       	ldd	r24, Y+9	; 0x09
    407a:	9a 85       	ldd	r25, Y+10	; 0x0a
    407c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	9e 83       	std	Y+6, r25	; 0x06
    4086:	8d 83       	std	Y+5, r24	; 0x05
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	9e 81       	ldd	r25, Y+6	; 0x06
    408c:	9a 83       	std	Y+2, r25	; 0x02
    408e:	89 83       	std	Y+1, r24	; 0x01
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	9a 81       	ldd	r25, Y+2	; 0x02
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <ESP8266_VidConnectToWiFi+0xd58>
    4098:	9a 83       	std	Y+2, r25	; 0x02
    409a:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms( 1000 );
  _delay_ms( 1000 );
  _delay_ms( 1000 );
  _delay_ms( 1000 );

}
    409c:	c2 56       	subi	r28, 0x62	; 98
    409e:	df 4f       	sbci	r29, 0xFF	; 255
    40a0:	0f b6       	in	r0, 0x3f	; 63
    40a2:	f8 94       	cli
    40a4:	de bf       	out	0x3e, r29	; 62
    40a6:	0f be       	out	0x3f, r0	; 63
    40a8:	cd bf       	out	0x3d, r28	; 61
    40aa:	cf 91       	pop	r28
    40ac:	df 91       	pop	r29
    40ae:	1f 91       	pop	r17
    40b0:	0f 91       	pop	r16
    40b2:	08 95       	ret

000040b4 <ESP8266_VidConnectToSrvTcp>:

void ESP8266_VidConnectToSrvTcp(u8* Copy_u8Domain, u8* Copy_u8Port)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
    40bc:	62 97       	sbiw	r28, 0x12	; 18
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	98 8b       	std	Y+16, r25	; 0x10
    40ca:	8f 87       	std	Y+15, r24	; 0x0f
    40cc:	7a 8b       	std	Y+18, r23	; 0x12
    40ce:	69 8b       	std	Y+17, r22	; 0x11
  USART_SendStr( (u8 *) "AT+CIPSTART=\"TCP\",\"" );
    40d0:	8b ed       	ldi	r24, 0xDB	; 219
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) Copy_u8Domain );
    40d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40da:	98 89       	ldd	r25, Y+16	; 0x10
    40dc:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) "\"," );
    40e0:	8f ee       	ldi	r24, 0xEF	; 239
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) Copy_u8Port );
    40e8:	89 89       	ldd	r24, Y+17	; 0x11
    40ea:	9a 89       	ldd	r25, Y+18	; 0x12
    40ec:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendStr( (u8 *) "\r\n" );
    40f0:	82 ef       	ldi	r24, 0xF2	; 242
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	aa e7       	ldi	r26, 0x7A	; 122
    40fe:	b4 e4       	ldi	r27, 0x44	; 68
    4100:	8b 87       	std	Y+11, r24	; 0x0b
    4102:	9c 87       	std	Y+12, r25	; 0x0c
    4104:	ad 87       	std	Y+13, r26	; 0x0d
    4106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4108:	6b 85       	ldd	r22, Y+11	; 0x0b
    410a:	7c 85       	ldd	r23, Y+12	; 0x0c
    410c:	8d 85       	ldd	r24, Y+13	; 0x0d
    410e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4a ef       	ldi	r20, 0xFA	; 250
    4116:	54 e4       	ldi	r21, 0x44	; 68
    4118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	8f 83       	std	Y+7, r24	; 0x07
    4122:	98 87       	std	Y+8, r25	; 0x08
    4124:	a9 87       	std	Y+9, r26	; 0x09
    4126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4128:	6f 81       	ldd	r22, Y+7	; 0x07
    412a:	78 85       	ldd	r23, Y+8	; 0x08
    412c:	89 85       	ldd	r24, Y+9	; 0x09
    412e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e8       	ldi	r20, 0x80	; 128
    4136:	5f e3       	ldi	r21, 0x3F	; 63
    4138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    413c:	88 23       	and	r24, r24
    413e:	2c f4       	brge	.+10     	; 0x414a <ESP8266_VidConnectToSrvTcp+0x96>
		__ticks = 1;
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	8d 83       	std	Y+5, r24	; 0x05
    4148:	3f c0       	rjmp	.+126    	; 0x41c8 <ESP8266_VidConnectToSrvTcp+0x114>
	else if (__tmp > 65535)
    414a:	6f 81       	ldd	r22, Y+7	; 0x07
    414c:	78 85       	ldd	r23, Y+8	; 0x08
    414e:	89 85       	ldd	r24, Y+9	; 0x09
    4150:	9a 85       	ldd	r25, Y+10	; 0x0a
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	3f ef       	ldi	r19, 0xFF	; 255
    4156:	4f e7       	ldi	r20, 0x7F	; 127
    4158:	57 e4       	ldi	r21, 0x47	; 71
    415a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    415e:	18 16       	cp	r1, r24
    4160:	4c f5       	brge	.+82     	; 0x41b4 <ESP8266_VidConnectToSrvTcp+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4162:	6b 85       	ldd	r22, Y+11	; 0x0b
    4164:	7c 85       	ldd	r23, Y+12	; 0x0c
    4166:	8d 85       	ldd	r24, Y+13	; 0x0d
    4168:	9e 85       	ldd	r25, Y+14	; 0x0e
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e2       	ldi	r20, 0x20	; 32
    4170:	51 e4       	ldi	r21, 0x41	; 65
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <ESP8266_VidConnectToSrvTcp+0xf6>
    418c:	88 ec       	ldi	r24, 0xC8	; 200
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	9c 81       	ldd	r25, Y+4	; 0x04
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	f1 f7       	brne	.-4      	; 0x4198 <ESP8266_VidConnectToSrvTcp+0xe4>
    419c:	9c 83       	std	Y+4, r25	; 0x04
    419e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	9e 81       	ldd	r25, Y+6	; 0x06
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	69 f7       	brne	.-38     	; 0x418c <ESP8266_VidConnectToSrvTcp+0xd8>
    41b2:	14 c0       	rjmp	.+40     	; 0x41dc <ESP8266_VidConnectToSrvTcp+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b4:	6f 81       	ldd	r22, Y+7	; 0x07
    41b6:	78 85       	ldd	r23, Y+8	; 0x08
    41b8:	89 85       	ldd	r24, Y+9	; 0x09
    41ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    41bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	9e 83       	std	Y+6, r25	; 0x06
    41c6:	8d 83       	std	Y+5, r24	; 0x05
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f1 f7       	brne	.-4      	; 0x41d4 <ESP8266_VidConnectToSrvTcp+0x120>
    41d8:	9a 83       	std	Y+2, r25	; 0x02
    41da:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms( 1000 );

}
    41dc:	62 96       	adiw	r28, 0x12	; 18
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	0f be       	out	0x3f, r0	; 63
    41e6:	cd bf       	out	0x3d, r28	; 61
    41e8:	cf 91       	pop	r28
    41ea:	df 91       	pop	r29
    41ec:	08 95       	ret

000041ee <ESP8266_u8GetHB>:

u8 ESP8266_u8GetHB(u8* arr)
{
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	df 93       	push	r29
    41f4:	cf 93       	push	r28
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
    41fa:	a0 97       	sbiw	r28, 0x20	; 32
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	f8 94       	cli
    4200:	de bf       	out	0x3e, r29	; 62
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	cd bf       	out	0x3d, r28	; 61
    4206:	98 a3       	std	Y+32, r25	; 0x20
    4208:	8f 8f       	std	Y+31, r24	; 0x1f
  u8 result=0;
    420a:	1e 8e       	std	Y+30, r1	; 0x1e
  u8 i=0;
    420c:	1d 8e       	std	Y+29, r1	; 0x1d
  ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    420e:	85 ef       	ldi	r24, 0xF5	; 245
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	25 e0       	ldi	r18, 0x05	; 5
    4214:	31 e0       	ldi	r19, 0x01	; 1
    4216:	b9 01       	movw	r22, r18
    4218:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <ESP8266_VidConnectToSrvTcp>
  USART_SendStr( (u8 *) "AT+CIPSEND=55\r\n" );
    421c:	88 e0       	ldi	r24, 0x08	; 8
    421e:	91 e0       	ldi	r25, 0x01	; 1
    4220:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	a8 ec       	ldi	r26, 0xC8	; 200
    422a:	b2 e4       	ldi	r27, 0x42	; 66
    422c:	89 8f       	std	Y+25, r24	; 0x19
    422e:	9a 8f       	std	Y+26, r25	; 0x1a
    4230:	ab 8f       	std	Y+27, r26	; 0x1b
    4232:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4234:	69 8d       	ldd	r22, Y+25	; 0x19
    4236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    423a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	4a ef       	ldi	r20, 0xFA	; 250
    4242:	54 e4       	ldi	r21, 0x44	; 68
    4244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	8d 8b       	std	Y+21, r24	; 0x15
    424e:	9e 8b       	std	Y+22, r25	; 0x16
    4250:	af 8b       	std	Y+23, r26	; 0x17
    4252:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4254:	6d 89       	ldd	r22, Y+21	; 0x15
    4256:	7e 89       	ldd	r23, Y+22	; 0x16
    4258:	8f 89       	ldd	r24, Y+23	; 0x17
    425a:	98 8d       	ldd	r25, Y+24	; 0x18
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	40 e8       	ldi	r20, 0x80	; 128
    4262:	5f e3       	ldi	r21, 0x3F	; 63
    4264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4268:	88 23       	and	r24, r24
    426a:	2c f4       	brge	.+10     	; 0x4276 <ESP8266_u8GetHB+0x88>
		__ticks = 1;
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	9c 8b       	std	Y+20, r25	; 0x14
    4272:	8b 8b       	std	Y+19, r24	; 0x13
    4274:	3f c0       	rjmp	.+126    	; 0x42f4 <ESP8266_u8GetHB+0x106>
	else if (__tmp > 65535)
    4276:	6d 89       	ldd	r22, Y+21	; 0x15
    4278:	7e 89       	ldd	r23, Y+22	; 0x16
    427a:	8f 89       	ldd	r24, Y+23	; 0x17
    427c:	98 8d       	ldd	r25, Y+24	; 0x18
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	3f ef       	ldi	r19, 0xFF	; 255
    4282:	4f e7       	ldi	r20, 0x7F	; 127
    4284:	57 e4       	ldi	r21, 0x47	; 71
    4286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    428a:	18 16       	cp	r1, r24
    428c:	4c f5       	brge	.+82     	; 0x42e0 <ESP8266_u8GetHB+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    428e:	69 8d       	ldd	r22, Y+25	; 0x19
    4290:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	40 e2       	ldi	r20, 0x20	; 32
    429c:	51 e4       	ldi	r21, 0x41	; 65
    429e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	bc 01       	movw	r22, r24
    42a8:	cd 01       	movw	r24, r26
    42aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	9c 8b       	std	Y+20, r25	; 0x14
    42b4:	8b 8b       	std	Y+19, r24	; 0x13
    42b6:	0f c0       	rjmp	.+30     	; 0x42d6 <ESP8266_u8GetHB+0xe8>
    42b8:	88 ec       	ldi	r24, 0xC8	; 200
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	9a 8b       	std	Y+18, r25	; 0x12
    42be:	89 8b       	std	Y+17, r24	; 0x11
    42c0:	89 89       	ldd	r24, Y+17	; 0x11
    42c2:	9a 89       	ldd	r25, Y+18	; 0x12
    42c4:	01 97       	sbiw	r24, 0x01	; 1
    42c6:	f1 f7       	brne	.-4      	; 0x42c4 <ESP8266_u8GetHB+0xd6>
    42c8:	9a 8b       	std	Y+18, r25	; 0x12
    42ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42cc:	8b 89       	ldd	r24, Y+19	; 0x13
    42ce:	9c 89       	ldd	r25, Y+20	; 0x14
    42d0:	01 97       	sbiw	r24, 0x01	; 1
    42d2:	9c 8b       	std	Y+20, r25	; 0x14
    42d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d6:	8b 89       	ldd	r24, Y+19	; 0x13
    42d8:	9c 89       	ldd	r25, Y+20	; 0x14
    42da:	00 97       	sbiw	r24, 0x00	; 0
    42dc:	69 f7       	brne	.-38     	; 0x42b8 <ESP8266_u8GetHB+0xca>
    42de:	14 c0       	rjmp	.+40     	; 0x4308 <ESP8266_u8GetHB+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e0:	6d 89       	ldd	r22, Y+21	; 0x15
    42e2:	7e 89       	ldd	r23, Y+22	; 0x16
    42e4:	8f 89       	ldd	r24, Y+23	; 0x17
    42e6:	98 8d       	ldd	r25, Y+24	; 0x18
    42e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ec:	dc 01       	movw	r26, r24
    42ee:	cb 01       	movw	r24, r22
    42f0:	9c 8b       	std	Y+20, r25	; 0x14
    42f2:	8b 8b       	std	Y+19, r24	; 0x13
    42f4:	8b 89       	ldd	r24, Y+19	; 0x13
    42f6:	9c 89       	ldd	r25, Y+20	; 0x14
    42f8:	98 8b       	std	Y+16, r25	; 0x10
    42fa:	8f 87       	std	Y+15, r24	; 0x0f
    42fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42fe:	98 89       	ldd	r25, Y+16	; 0x10
    4300:	01 97       	sbiw	r24, 0x01	; 1
    4302:	f1 f7       	brne	.-4      	; 0x4300 <ESP8266_u8GetHB+0x112>
    4304:	98 8b       	std	Y+16, r25	; 0x10
    4306:	8f 87       	std	Y+15, r24	; 0x0f
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	a8 ec       	ldi	r26, 0xC8	; 200
    430e:	b2 e4       	ldi	r27, 0x42	; 66
    4310:	8b 87       	std	Y+11, r24	; 0x0b
    4312:	9c 87       	std	Y+12, r25	; 0x0c
    4314:	ad 87       	std	Y+13, r26	; 0x0d
    4316:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4318:	6b 85       	ldd	r22, Y+11	; 0x0b
    431a:	7c 85       	ldd	r23, Y+12	; 0x0c
    431c:	8d 85       	ldd	r24, Y+13	; 0x0d
    431e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	4a ef       	ldi	r20, 0xFA	; 250
    4326:	54 e4       	ldi	r21, 0x44	; 68
    4328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	8f 83       	std	Y+7, r24	; 0x07
    4332:	98 87       	std	Y+8, r25	; 0x08
    4334:	a9 87       	std	Y+9, r26	; 0x09
    4336:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4338:	6f 81       	ldd	r22, Y+7	; 0x07
    433a:	78 85       	ldd	r23, Y+8	; 0x08
    433c:	89 85       	ldd	r24, Y+9	; 0x09
    433e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e8       	ldi	r20, 0x80	; 128
    4346:	5f e3       	ldi	r21, 0x3F	; 63
    4348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    434c:	88 23       	and	r24, r24
    434e:	2c f4       	brge	.+10     	; 0x435a <ESP8266_u8GetHB+0x16c>
		__ticks = 1;
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	9e 83       	std	Y+6, r25	; 0x06
    4356:	8d 83       	std	Y+5, r24	; 0x05
    4358:	3f c0       	rjmp	.+126    	; 0x43d8 <ESP8266_u8GetHB+0x1ea>
	else if (__tmp > 65535)
    435a:	6f 81       	ldd	r22, Y+7	; 0x07
    435c:	78 85       	ldd	r23, Y+8	; 0x08
    435e:	89 85       	ldd	r24, Y+9	; 0x09
    4360:	9a 85       	ldd	r25, Y+10	; 0x0a
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	3f ef       	ldi	r19, 0xFF	; 255
    4366:	4f e7       	ldi	r20, 0x7F	; 127
    4368:	57 e4       	ldi	r21, 0x47	; 71
    436a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    436e:	18 16       	cp	r1, r24
    4370:	4c f5       	brge	.+82     	; 0x43c4 <ESP8266_u8GetHB+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4372:	6b 85       	ldd	r22, Y+11	; 0x0b
    4374:	7c 85       	ldd	r23, Y+12	; 0x0c
    4376:	8d 85       	ldd	r24, Y+13	; 0x0d
    4378:	9e 85       	ldd	r25, Y+14	; 0x0e
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e2       	ldi	r20, 0x20	; 32
    4380:	51 e4       	ldi	r21, 0x41	; 65
    4382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	bc 01       	movw	r22, r24
    438c:	cd 01       	movw	r24, r26
    438e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	9e 83       	std	Y+6, r25	; 0x06
    4398:	8d 83       	std	Y+5, r24	; 0x05
    439a:	0f c0       	rjmp	.+30     	; 0x43ba <ESP8266_u8GetHB+0x1cc>
    439c:	88 ec       	ldi	r24, 0xC8	; 200
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	9c 83       	std	Y+4, r25	; 0x04
    43a2:	8b 83       	std	Y+3, r24	; 0x03
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	9c 81       	ldd	r25, Y+4	; 0x04
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	f1 f7       	brne	.-4      	; 0x43a8 <ESP8266_u8GetHB+0x1ba>
    43ac:	9c 83       	std	Y+4, r25	; 0x04
    43ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b0:	8d 81       	ldd	r24, Y+5	; 0x05
    43b2:	9e 81       	ldd	r25, Y+6	; 0x06
    43b4:	01 97       	sbiw	r24, 0x01	; 1
    43b6:	9e 83       	std	Y+6, r25	; 0x06
    43b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ba:	8d 81       	ldd	r24, Y+5	; 0x05
    43bc:	9e 81       	ldd	r25, Y+6	; 0x06
    43be:	00 97       	sbiw	r24, 0x00	; 0
    43c0:	69 f7       	brne	.-38     	; 0x439c <ESP8266_u8GetHB+0x1ae>
    43c2:	14 c0       	rjmp	.+40     	; 0x43ec <ESP8266_u8GetHB+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c4:	6f 81       	ldd	r22, Y+7	; 0x07
    43c6:	78 85       	ldd	r23, Y+8	; 0x08
    43c8:	89 85       	ldd	r24, Y+9	; 0x09
    43ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    43cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	9e 83       	std	Y+6, r25	; 0x06
    43d6:	8d 83       	std	Y+5, r24	; 0x05
    43d8:	8d 81       	ldd	r24, Y+5	; 0x05
    43da:	9e 81       	ldd	r25, Y+6	; 0x06
    43dc:	9a 83       	std	Y+2, r25	; 0x02
    43de:	89 83       	std	Y+1, r24	; 0x01
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	9a 81       	ldd	r25, Y+2	; 0x02
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	f1 f7       	brne	.-4      	; 0x43e4 <ESP8266_u8GetHB+0x1f6>
    43e8:	9a 83       	std	Y+2, r25	; 0x02
    43ea:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms( 100 );
  _delay_ms( 100 );

  USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverHB.php?line=0\r\n");
    43ec:	88 e1       	ldi	r24, 0x18	; 24
    43ee:	91 e0       	ldi	r25, 0x01	; 1
    43f0:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>

  for(i=0;i<45;i++)
    43f4:	1d 8e       	std	Y+29, r1	; 0x1d
    43f6:	0f c0       	rjmp	.+30     	; 0x4416 <ESP8266_u8GetHB+0x228>
    {
      arr[i]=USART_ReceiveDataPolling();
    43f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43fa:	28 2f       	mov	r18, r24
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4400:	98 a1       	ldd	r25, Y+32	; 0x20
    4402:	8c 01       	movw	r16, r24
    4404:	02 0f       	add	r16, r18
    4406:	13 1f       	adc	r17, r19
    4408:	0e 94 49 27 	call	0x4e92	; 0x4e92 <USART_ReceiveDataPolling>
    440c:	f8 01       	movw	r30, r16
    440e:	80 83       	st	Z, r24
  _delay_ms( 100 );
  _delay_ms( 100 );

  USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverHB.php?line=0\r\n");

  for(i=0;i<45;i++)
    4410:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4412:	8f 5f       	subi	r24, 0xFF	; 255
    4414:	8d 8f       	std	Y+29, r24	; 0x1d
    4416:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4418:	8d 32       	cpi	r24, 0x2D	; 45
    441a:	70 f3       	brcs	.-36     	; 0x43f8 <ESP8266_u8GetHB+0x20a>
    {
      arr[i]=USART_ReceiveDataPolling();
    }
  result = (arr[38]-48)*10+(arr[39]-48);
    441c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    441e:	98 a1       	ldd	r25, Y+32	; 0x20
    4420:	fc 01       	movw	r30, r24
    4422:	b6 96       	adiw	r30, 0x26	; 38
    4424:	80 81       	ld	r24, Z
    4426:	88 2f       	mov	r24, r24
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	9c 01       	movw	r18, r24
    442c:	22 0f       	add	r18, r18
    442e:	33 1f       	adc	r19, r19
    4430:	c9 01       	movw	r24, r18
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	82 0f       	add	r24, r18
    443c:	93 1f       	adc	r25, r19
    443e:	28 2f       	mov	r18, r24
    4440:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4442:	98 a1       	ldd	r25, Y+32	; 0x20
    4444:	fc 01       	movw	r30, r24
    4446:	b7 96       	adiw	r30, 0x27	; 39
    4448:	80 81       	ld	r24, Z
    444a:	82 0f       	add	r24, r18
    444c:	80 51       	subi	r24, 0x10	; 16
    444e:	8e 8f       	std	Y+30, r24	; 0x1e
  if(arr[40]>47 && arr[40]<58)
    4450:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4452:	98 a1       	ldd	r25, Y+32	; 0x20
    4454:	fc 01       	movw	r30, r24
    4456:	b8 96       	adiw	r30, 0x28	; 40
    4458:	80 81       	ld	r24, Z
    445a:	80 33       	cpi	r24, 0x30	; 48
    445c:	a0 f1       	brcs	.+104    	; 0x44c6 <ESP8266_u8GetHB+0x2d8>
    445e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4460:	98 a1       	ldd	r25, Y+32	; 0x20
    4462:	fc 01       	movw	r30, r24
    4464:	b8 96       	adiw	r30, 0x28	; 40
    4466:	80 81       	ld	r24, Z
    4468:	8a 33       	cpi	r24, 0x3A	; 58
    446a:	68 f5       	brcc	.+90     	; 0x44c6 <ESP8266_u8GetHB+0x2d8>
    {
      result = (arr[38]-48)*100+(arr[39]-48)*10+(arr[40]-48);
    446c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    446e:	98 a1       	ldd	r25, Y+32	; 0x20
    4470:	fc 01       	movw	r30, r24
    4472:	b6 96       	adiw	r30, 0x26	; 38
    4474:	80 81       	ld	r24, Z
    4476:	28 2f       	mov	r18, r24
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	84 e6       	ldi	r24, 0x64	; 100
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	ac 01       	movw	r20, r24
    4480:	24 9f       	mul	r18, r20
    4482:	c0 01       	movw	r24, r0
    4484:	25 9f       	mul	r18, r21
    4486:	90 0d       	add	r25, r0
    4488:	34 9f       	mul	r19, r20
    448a:	90 0d       	add	r25, r0
    448c:	11 24       	eor	r1, r1
    448e:	48 2f       	mov	r20, r24
    4490:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4492:	98 a1       	ldd	r25, Y+32	; 0x20
    4494:	fc 01       	movw	r30, r24
    4496:	b7 96       	adiw	r30, 0x27	; 39
    4498:	80 81       	ld	r24, Z
    449a:	88 2f       	mov	r24, r24
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	9c 01       	movw	r18, r24
    44a0:	22 0f       	add	r18, r18
    44a2:	33 1f       	adc	r19, r19
    44a4:	c9 01       	movw	r24, r18
    44a6:	88 0f       	add	r24, r24
    44a8:	99 1f       	adc	r25, r25
    44aa:	88 0f       	add	r24, r24
    44ac:	99 1f       	adc	r25, r25
    44ae:	82 0f       	add	r24, r18
    44b0:	93 1f       	adc	r25, r19
    44b2:	24 2f       	mov	r18, r20
    44b4:	28 0f       	add	r18, r24
    44b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44b8:	98 a1       	ldd	r25, Y+32	; 0x20
    44ba:	fc 01       	movw	r30, r24
    44bc:	b8 96       	adiw	r30, 0x28	; 40
    44be:	80 81       	ld	r24, Z
    44c0:	82 0f       	add	r24, r18
    44c2:	80 5d       	subi	r24, 0xD0	; 208
    44c4:	8e 8f       	std	Y+30, r24	; 0x1e
    }
  return result;
    44c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    44c8:	a0 96       	adiw	r28, 0x20	; 32
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	de bf       	out	0x3e, r29	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	cd bf       	out	0x3d, r28	; 61
    44d4:	cf 91       	pop	r28
    44d6:	df 91       	pop	r29
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	08 95       	ret

000044de <ESP8266_u8GetPR>:
u8 ESP8266_u8GetPR(u8* arr)
{
    44de:	0f 93       	push	r16
    44e0:	1f 93       	push	r17
    44e2:	df 93       	push	r29
    44e4:	cf 93       	push	r28
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	a0 97       	sbiw	r28, 0x20	; 32
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	f8 94       	cli
    44f0:	de bf       	out	0x3e, r29	; 62
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	cd bf       	out	0x3d, r28	; 61
    44f6:	98 a3       	std	Y+32, r25	; 0x20
    44f8:	8f 8f       	std	Y+31, r24	; 0x1f
  u8 result=0;
    44fa:	1e 8e       	std	Y+30, r1	; 0x1e
  u8 i=0;
    44fc:	1d 8e       	std	Y+29, r1	; 0x1d
  ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    44fe:	85 ef       	ldi	r24, 0xF5	; 245
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	25 e0       	ldi	r18, 0x05	; 5
    4504:	31 e0       	ldi	r19, 0x01	; 1
    4506:	b9 01       	movw	r22, r18
    4508:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <ESP8266_VidConnectToSrvTcp>
  USART_SendStr( (u8 *) "AT+CIPSEND=55\r\n" );
    450c:	88 e0       	ldi	r24, 0x08	; 8
    450e:	91 e0       	ldi	r25, 0x01	; 1
    4510:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	a8 ec       	ldi	r26, 0xC8	; 200
    451a:	b2 e4       	ldi	r27, 0x42	; 66
    451c:	89 8f       	std	Y+25, r24	; 0x19
    451e:	9a 8f       	std	Y+26, r25	; 0x1a
    4520:	ab 8f       	std	Y+27, r26	; 0x1b
    4522:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4524:	69 8d       	ldd	r22, Y+25	; 0x19
    4526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    452a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	4a ef       	ldi	r20, 0xFA	; 250
    4532:	54 e4       	ldi	r21, 0x44	; 68
    4534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	8d 8b       	std	Y+21, r24	; 0x15
    453e:	9e 8b       	std	Y+22, r25	; 0x16
    4540:	af 8b       	std	Y+23, r26	; 0x17
    4542:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4544:	6d 89       	ldd	r22, Y+21	; 0x15
    4546:	7e 89       	ldd	r23, Y+22	; 0x16
    4548:	8f 89       	ldd	r24, Y+23	; 0x17
    454a:	98 8d       	ldd	r25, Y+24	; 0x18
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e8       	ldi	r20, 0x80	; 128
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4558:	88 23       	and	r24, r24
    455a:	2c f4       	brge	.+10     	; 0x4566 <ESP8266_u8GetPR+0x88>
		__ticks = 1;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	9c 8b       	std	Y+20, r25	; 0x14
    4562:	8b 8b       	std	Y+19, r24	; 0x13
    4564:	3f c0       	rjmp	.+126    	; 0x45e4 <ESP8266_u8GetPR+0x106>
	else if (__tmp > 65535)
    4566:	6d 89       	ldd	r22, Y+21	; 0x15
    4568:	7e 89       	ldd	r23, Y+22	; 0x16
    456a:	8f 89       	ldd	r24, Y+23	; 0x17
    456c:	98 8d       	ldd	r25, Y+24	; 0x18
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	3f ef       	ldi	r19, 0xFF	; 255
    4572:	4f e7       	ldi	r20, 0x7F	; 127
    4574:	57 e4       	ldi	r21, 0x47	; 71
    4576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    457a:	18 16       	cp	r1, r24
    457c:	4c f5       	brge	.+82     	; 0x45d0 <ESP8266_u8GetPR+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457e:	69 8d       	ldd	r22, Y+25	; 0x19
    4580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	40 e2       	ldi	r20, 0x20	; 32
    458c:	51 e4       	ldi	r21, 0x41	; 65
    458e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	9c 8b       	std	Y+20, r25	; 0x14
    45a4:	8b 8b       	std	Y+19, r24	; 0x13
    45a6:	0f c0       	rjmp	.+30     	; 0x45c6 <ESP8266_u8GetPR+0xe8>
    45a8:	88 ec       	ldi	r24, 0xC8	; 200
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	9a 8b       	std	Y+18, r25	; 0x12
    45ae:	89 8b       	std	Y+17, r24	; 0x11
    45b0:	89 89       	ldd	r24, Y+17	; 0x11
    45b2:	9a 89       	ldd	r25, Y+18	; 0x12
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <ESP8266_u8GetPR+0xd6>
    45b8:	9a 8b       	std	Y+18, r25	; 0x12
    45ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45bc:	8b 89       	ldd	r24, Y+19	; 0x13
    45be:	9c 89       	ldd	r25, Y+20	; 0x14
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	9c 8b       	std	Y+20, r25	; 0x14
    45c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c6:	8b 89       	ldd	r24, Y+19	; 0x13
    45c8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ca:	00 97       	sbiw	r24, 0x00	; 0
    45cc:	69 f7       	brne	.-38     	; 0x45a8 <ESP8266_u8GetPR+0xca>
    45ce:	14 c0       	rjmp	.+40     	; 0x45f8 <ESP8266_u8GetPR+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d0:	6d 89       	ldd	r22, Y+21	; 0x15
    45d2:	7e 89       	ldd	r23, Y+22	; 0x16
    45d4:	8f 89       	ldd	r24, Y+23	; 0x17
    45d6:	98 8d       	ldd	r25, Y+24	; 0x18
    45d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	9c 8b       	std	Y+20, r25	; 0x14
    45e2:	8b 8b       	std	Y+19, r24	; 0x13
    45e4:	8b 89       	ldd	r24, Y+19	; 0x13
    45e6:	9c 89       	ldd	r25, Y+20	; 0x14
    45e8:	98 8b       	std	Y+16, r25	; 0x10
    45ea:	8f 87       	std	Y+15, r24	; 0x0f
    45ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ee:	98 89       	ldd	r25, Y+16	; 0x10
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <ESP8266_u8GetPR+0x112>
    45f4:	98 8b       	std	Y+16, r25	; 0x10
    45f6:	8f 87       	std	Y+15, r24	; 0x0f
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	a8 ec       	ldi	r26, 0xC8	; 200
    45fe:	b2 e4       	ldi	r27, 0x42	; 66
    4600:	8b 87       	std	Y+11, r24	; 0x0b
    4602:	9c 87       	std	Y+12, r25	; 0x0c
    4604:	ad 87       	std	Y+13, r26	; 0x0d
    4606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4608:	6b 85       	ldd	r22, Y+11	; 0x0b
    460a:	7c 85       	ldd	r23, Y+12	; 0x0c
    460c:	8d 85       	ldd	r24, Y+13	; 0x0d
    460e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	4a ef       	ldi	r20, 0xFA	; 250
    4616:	54 e4       	ldi	r21, 0x44	; 68
    4618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	8f 83       	std	Y+7, r24	; 0x07
    4622:	98 87       	std	Y+8, r25	; 0x08
    4624:	a9 87       	std	Y+9, r26	; 0x09
    4626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4628:	6f 81       	ldd	r22, Y+7	; 0x07
    462a:	78 85       	ldd	r23, Y+8	; 0x08
    462c:	89 85       	ldd	r24, Y+9	; 0x09
    462e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	40 e8       	ldi	r20, 0x80	; 128
    4636:	5f e3       	ldi	r21, 0x3F	; 63
    4638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    463c:	88 23       	and	r24, r24
    463e:	2c f4       	brge	.+10     	; 0x464a <ESP8266_u8GetPR+0x16c>
		__ticks = 1;
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	9e 83       	std	Y+6, r25	; 0x06
    4646:	8d 83       	std	Y+5, r24	; 0x05
    4648:	3f c0       	rjmp	.+126    	; 0x46c8 <ESP8266_u8GetPR+0x1ea>
	else if (__tmp > 65535)
    464a:	6f 81       	ldd	r22, Y+7	; 0x07
    464c:	78 85       	ldd	r23, Y+8	; 0x08
    464e:	89 85       	ldd	r24, Y+9	; 0x09
    4650:	9a 85       	ldd	r25, Y+10	; 0x0a
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	3f ef       	ldi	r19, 0xFF	; 255
    4656:	4f e7       	ldi	r20, 0x7F	; 127
    4658:	57 e4       	ldi	r21, 0x47	; 71
    465a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    465e:	18 16       	cp	r1, r24
    4660:	4c f5       	brge	.+82     	; 0x46b4 <ESP8266_u8GetPR+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4662:	6b 85       	ldd	r22, Y+11	; 0x0b
    4664:	7c 85       	ldd	r23, Y+12	; 0x0c
    4666:	8d 85       	ldd	r24, Y+13	; 0x0d
    4668:	9e 85       	ldd	r25, Y+14	; 0x0e
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e2       	ldi	r20, 0x20	; 32
    4670:	51 e4       	ldi	r21, 0x41	; 65
    4672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	bc 01       	movw	r22, r24
    467c:	cd 01       	movw	r24, r26
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
    468a:	0f c0       	rjmp	.+30     	; 0x46aa <ESP8266_u8GetPR+0x1cc>
    468c:	88 ec       	ldi	r24, 0xC8	; 200
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	9c 83       	std	Y+4, r25	; 0x04
    4692:	8b 83       	std	Y+3, r24	; 0x03
    4694:	8b 81       	ldd	r24, Y+3	; 0x03
    4696:	9c 81       	ldd	r25, Y+4	; 0x04
    4698:	01 97       	sbiw	r24, 0x01	; 1
    469a:	f1 f7       	brne	.-4      	; 0x4698 <ESP8266_u8GetPR+0x1ba>
    469c:	9c 83       	std	Y+4, r25	; 0x04
    469e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a0:	8d 81       	ldd	r24, Y+5	; 0x05
    46a2:	9e 81       	ldd	r25, Y+6	; 0x06
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	9e 83       	std	Y+6, r25	; 0x06
    46a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46aa:	8d 81       	ldd	r24, Y+5	; 0x05
    46ac:	9e 81       	ldd	r25, Y+6	; 0x06
    46ae:	00 97       	sbiw	r24, 0x00	; 0
    46b0:	69 f7       	brne	.-38     	; 0x468c <ESP8266_u8GetPR+0x1ae>
    46b2:	14 c0       	rjmp	.+40     	; 0x46dc <ESP8266_u8GetPR+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b4:	6f 81       	ldd	r22, Y+7	; 0x07
    46b6:	78 85       	ldd	r23, Y+8	; 0x08
    46b8:	89 85       	ldd	r24, Y+9	; 0x09
    46ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    46bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	9e 83       	std	Y+6, r25	; 0x06
    46c6:	8d 83       	std	Y+5, r24	; 0x05
    46c8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ca:	9e 81       	ldd	r25, Y+6	; 0x06
    46cc:	9a 83       	std	Y+2, r25	; 0x02
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	9a 81       	ldd	r25, Y+2	; 0x02
    46d4:	01 97       	sbiw	r24, 0x01	; 1
    46d6:	f1 f7       	brne	.-4      	; 0x46d4 <ESP8266_u8GetPR+0x1f6>
    46d8:	9a 83       	std	Y+2, r25	; 0x02
    46da:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms( 100 );
  _delay_ms( 100 );

  USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverPR.php?line=0\r\n");
    46dc:	80 e5       	ldi	r24, 0x50	; 80
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>

  for(i=0;i<45;i++)
    46e4:	1d 8e       	std	Y+29, r1	; 0x1d
    46e6:	0f c0       	rjmp	.+30     	; 0x4706 <ESP8266_u8GetPR+0x228>
    {
      arr[i]=USART_ReceiveDataPolling();
    46e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46f0:	98 a1       	ldd	r25, Y+32	; 0x20
    46f2:	8c 01       	movw	r16, r24
    46f4:	02 0f       	add	r16, r18
    46f6:	13 1f       	adc	r17, r19
    46f8:	0e 94 49 27 	call	0x4e92	; 0x4e92 <USART_ReceiveDataPolling>
    46fc:	f8 01       	movw	r30, r16
    46fe:	80 83       	st	Z, r24
  _delay_ms( 100 );
  _delay_ms( 100 );

  USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/RecieverPR.php?line=0\r\n");

  for(i=0;i<45;i++)
    4700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4702:	8f 5f       	subi	r24, 0xFF	; 255
    4704:	8d 8f       	std	Y+29, r24	; 0x1d
    4706:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4708:	8d 32       	cpi	r24, 0x2D	; 45
    470a:	70 f3       	brcs	.-36     	; 0x46e8 <ESP8266_u8GetPR+0x20a>
    {
      arr[i]=USART_ReceiveDataPolling();
    }
  result = (arr[38]-48)*10+(arr[39]-48);
    470c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    470e:	98 a1       	ldd	r25, Y+32	; 0x20
    4710:	fc 01       	movw	r30, r24
    4712:	b6 96       	adiw	r30, 0x26	; 38
    4714:	80 81       	ld	r24, Z
    4716:	88 2f       	mov	r24, r24
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	9c 01       	movw	r18, r24
    471c:	22 0f       	add	r18, r18
    471e:	33 1f       	adc	r19, r19
    4720:	c9 01       	movw	r24, r18
    4722:	88 0f       	add	r24, r24
    4724:	99 1f       	adc	r25, r25
    4726:	88 0f       	add	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	82 0f       	add	r24, r18
    472c:	93 1f       	adc	r25, r19
    472e:	28 2f       	mov	r18, r24
    4730:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4732:	98 a1       	ldd	r25, Y+32	; 0x20
    4734:	fc 01       	movw	r30, r24
    4736:	b7 96       	adiw	r30, 0x27	; 39
    4738:	80 81       	ld	r24, Z
    473a:	82 0f       	add	r24, r18
    473c:	80 51       	subi	r24, 0x10	; 16
    473e:	8e 8f       	std	Y+30, r24	; 0x1e
  if(arr[40]>47 && arr[40]<58)
    4740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4742:	98 a1       	ldd	r25, Y+32	; 0x20
    4744:	fc 01       	movw	r30, r24
    4746:	b8 96       	adiw	r30, 0x28	; 40
    4748:	80 81       	ld	r24, Z
    474a:	80 33       	cpi	r24, 0x30	; 48
    474c:	a0 f1       	brcs	.+104    	; 0x47b6 <ESP8266_u8GetPR+0x2d8>
    474e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4750:	98 a1       	ldd	r25, Y+32	; 0x20
    4752:	fc 01       	movw	r30, r24
    4754:	b8 96       	adiw	r30, 0x28	; 40
    4756:	80 81       	ld	r24, Z
    4758:	8a 33       	cpi	r24, 0x3A	; 58
    475a:	68 f5       	brcc	.+90     	; 0x47b6 <ESP8266_u8GetPR+0x2d8>
    {
      result = (arr[38]-48)*100+(arr[39]-48)*10+(arr[40]-48);
    475c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    475e:	98 a1       	ldd	r25, Y+32	; 0x20
    4760:	fc 01       	movw	r30, r24
    4762:	b6 96       	adiw	r30, 0x26	; 38
    4764:	80 81       	ld	r24, Z
    4766:	28 2f       	mov	r18, r24
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	84 e6       	ldi	r24, 0x64	; 100
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	ac 01       	movw	r20, r24
    4770:	24 9f       	mul	r18, r20
    4772:	c0 01       	movw	r24, r0
    4774:	25 9f       	mul	r18, r21
    4776:	90 0d       	add	r25, r0
    4778:	34 9f       	mul	r19, r20
    477a:	90 0d       	add	r25, r0
    477c:	11 24       	eor	r1, r1
    477e:	48 2f       	mov	r20, r24
    4780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4782:	98 a1       	ldd	r25, Y+32	; 0x20
    4784:	fc 01       	movw	r30, r24
    4786:	b7 96       	adiw	r30, 0x27	; 39
    4788:	80 81       	ld	r24, Z
    478a:	88 2f       	mov	r24, r24
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	9c 01       	movw	r18, r24
    4790:	22 0f       	add	r18, r18
    4792:	33 1f       	adc	r19, r19
    4794:	c9 01       	movw	r24, r18
    4796:	88 0f       	add	r24, r24
    4798:	99 1f       	adc	r25, r25
    479a:	88 0f       	add	r24, r24
    479c:	99 1f       	adc	r25, r25
    479e:	82 0f       	add	r24, r18
    47a0:	93 1f       	adc	r25, r19
    47a2:	24 2f       	mov	r18, r20
    47a4:	28 0f       	add	r18, r24
    47a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    47a8:	98 a1       	ldd	r25, Y+32	; 0x20
    47aa:	fc 01       	movw	r30, r24
    47ac:	b8 96       	adiw	r30, 0x28	; 40
    47ae:	80 81       	ld	r24, Z
    47b0:	82 0f       	add	r24, r18
    47b2:	80 5d       	subi	r24, 0xD0	; 208
    47b4:	8e 8f       	std	Y+30, r24	; 0x1e
    }
  return result;
    47b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    47b8:	a0 96       	adiw	r28, 0x20	; 32
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	f8 94       	cli
    47be:	de bf       	out	0x3e, r29	; 62
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	cd bf       	out	0x3d, r28	; 61
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	1f 91       	pop	r17
    47ca:	0f 91       	pop	r16
    47cc:	08 95       	ret

000047ce <ESP8266_VidSendHB>:

void ESP8266_VidSendHB(u8 Copy_u8HB)
{
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	ab 97       	sbiw	r28, 0x2b	; 43
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	cd bf       	out	0x3d, r28	; 61
    47e2:	8b a7       	std	Y+43, r24	; 0x2b
  ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    47e4:	85 ef       	ldi	r24, 0xF5	; 245
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	25 e0       	ldi	r18, 0x05	; 5
    47ea:	31 e0       	ldi	r19, 0x01	; 1
    47ec:	b9 01       	movw	r22, r18
    47ee:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <ESP8266_VidConnectToSrvTcp>
  if(((Copy_u8HB/10)/10)==0)
    47f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    47f4:	84 36       	cpi	r24, 0x64	; 100
    47f6:	28 f4       	brcc	.+10     	; 0x4802 <ESP8266_VidSendHB+0x34>
    {
      USART_SendStr( (u8 *) "AT+CIPSEND=59\r\n" );
    47f8:	88 e8       	ldi	r24, 0x88	; 136
    47fa:	91 e0       	ldi	r25, 0x01	; 1
    47fc:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4800:	04 c0       	rjmp	.+8      	; 0x480a <ESP8266_VidSendHB+0x3c>
    }
  else
    {
      USART_SendStr( (u8 *) "AT+CIPSEND=60\r\n" );
    4802:	88 e9       	ldi	r24, 0x98	; 152
    4804:	91 e0       	ldi	r25, 0x01	; 1
    4806:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	a8 ec       	ldi	r26, 0xC8	; 200
    4810:	b2 e4       	ldi	r27, 0x42	; 66
    4812:	8f a3       	std	Y+39, r24	; 0x27
    4814:	98 a7       	std	Y+40, r25	; 0x28
    4816:	a9 a7       	std	Y+41, r26	; 0x29
    4818:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    481a:	6f a1       	ldd	r22, Y+39	; 0x27
    481c:	78 a5       	ldd	r23, Y+40	; 0x28
    481e:	89 a5       	ldd	r24, Y+41	; 0x29
    4820:	9a a5       	ldd	r25, Y+42	; 0x2a
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	4a ef       	ldi	r20, 0xFA	; 250
    4828:	54 e4       	ldi	r21, 0x44	; 68
    482a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    482e:	dc 01       	movw	r26, r24
    4830:	cb 01       	movw	r24, r22
    4832:	8b a3       	std	Y+35, r24	; 0x23
    4834:	9c a3       	std	Y+36, r25	; 0x24
    4836:	ad a3       	std	Y+37, r26	; 0x25
    4838:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    483a:	6b a1       	ldd	r22, Y+35	; 0x23
    483c:	7c a1       	ldd	r23, Y+36	; 0x24
    483e:	8d a1       	ldd	r24, Y+37	; 0x25
    4840:	9e a1       	ldd	r25, Y+38	; 0x26
    4842:	20 e0       	ldi	r18, 0x00	; 0
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	40 e8       	ldi	r20, 0x80	; 128
    4848:	5f e3       	ldi	r21, 0x3F	; 63
    484a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    484e:	88 23       	and	r24, r24
    4850:	2c f4       	brge	.+10     	; 0x485c <ESP8266_VidSendHB+0x8e>
		__ticks = 1;
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	9a a3       	std	Y+34, r25	; 0x22
    4858:	89 a3       	std	Y+33, r24	; 0x21
    485a:	3f c0       	rjmp	.+126    	; 0x48da <ESP8266_VidSendHB+0x10c>
	else if (__tmp > 65535)
    485c:	6b a1       	ldd	r22, Y+35	; 0x23
    485e:	7c a1       	ldd	r23, Y+36	; 0x24
    4860:	8d a1       	ldd	r24, Y+37	; 0x25
    4862:	9e a1       	ldd	r25, Y+38	; 0x26
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	3f ef       	ldi	r19, 0xFF	; 255
    4868:	4f e7       	ldi	r20, 0x7F	; 127
    486a:	57 e4       	ldi	r21, 0x47	; 71
    486c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4870:	18 16       	cp	r1, r24
    4872:	4c f5       	brge	.+82     	; 0x48c6 <ESP8266_VidSendHB+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4874:	6f a1       	ldd	r22, Y+39	; 0x27
    4876:	78 a5       	ldd	r23, Y+40	; 0x28
    4878:	89 a5       	ldd	r24, Y+41	; 0x29
    487a:	9a a5       	ldd	r25, Y+42	; 0x2a
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e2       	ldi	r20, 0x20	; 32
    4882:	51 e4       	ldi	r21, 0x41	; 65
    4884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	bc 01       	movw	r22, r24
    488e:	cd 01       	movw	r24, r26
    4890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	9a a3       	std	Y+34, r25	; 0x22
    489a:	89 a3       	std	Y+33, r24	; 0x21
    489c:	0f c0       	rjmp	.+30     	; 0x48bc <ESP8266_VidSendHB+0xee>
    489e:	88 ec       	ldi	r24, 0xC8	; 200
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	98 a3       	std	Y+32, r25	; 0x20
    48a4:	8f 8f       	std	Y+31, r24	; 0x1f
    48a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48a8:	98 a1       	ldd	r25, Y+32	; 0x20
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	f1 f7       	brne	.-4      	; 0x48aa <ESP8266_VidSendHB+0xdc>
    48ae:	98 a3       	std	Y+32, r25	; 0x20
    48b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b2:	89 a1       	ldd	r24, Y+33	; 0x21
    48b4:	9a a1       	ldd	r25, Y+34	; 0x22
    48b6:	01 97       	sbiw	r24, 0x01	; 1
    48b8:	9a a3       	std	Y+34, r25	; 0x22
    48ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48bc:	89 a1       	ldd	r24, Y+33	; 0x21
    48be:	9a a1       	ldd	r25, Y+34	; 0x22
    48c0:	00 97       	sbiw	r24, 0x00	; 0
    48c2:	69 f7       	brne	.-38     	; 0x489e <ESP8266_VidSendHB+0xd0>
    48c4:	14 c0       	rjmp	.+40     	; 0x48ee <ESP8266_VidSendHB+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c6:	6b a1       	ldd	r22, Y+35	; 0x23
    48c8:	7c a1       	ldd	r23, Y+36	; 0x24
    48ca:	8d a1       	ldd	r24, Y+37	; 0x25
    48cc:	9e a1       	ldd	r25, Y+38	; 0x26
    48ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	9a a3       	std	Y+34, r25	; 0x22
    48d8:	89 a3       	std	Y+33, r24	; 0x21
    48da:	89 a1       	ldd	r24, Y+33	; 0x21
    48dc:	9a a1       	ldd	r25, Y+34	; 0x22
    48de:	9e 8f       	std	Y+30, r25	; 0x1e
    48e0:	8d 8f       	std	Y+29, r24	; 0x1d
    48e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	f1 f7       	brne	.-4      	; 0x48e6 <ESP8266_VidSendHB+0x118>
    48ea:	9e 8f       	std	Y+30, r25	; 0x1e
    48ec:	8d 8f       	std	Y+29, r24	; 0x1d
    }
  _delay_ms( 100 );

  USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/TransmitterHB.php?data=");
    48ee:	88 ea       	ldi	r24, 0xA8	; 168
    48f0:	91 e0       	ldi	r25, 0x01	; 1
    48f2:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendInteger(Copy_u8HB);
    48f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    48f8:	88 2f       	mov	r24, r24
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <USART_SendInteger>
  USART_SendStr((u8 *)"\r\n");
    4900:	82 ef       	ldi	r24, 0xF2	; 242
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	aa e7       	ldi	r26, 0x7A	; 122
    490e:	b4 e4       	ldi	r27, 0x44	; 68
    4910:	89 8f       	std	Y+25, r24	; 0x19
    4912:	9a 8f       	std	Y+26, r25	; 0x1a
    4914:	ab 8f       	std	Y+27, r26	; 0x1b
    4916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4918:	69 8d       	ldd	r22, Y+25	; 0x19
    491a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    491c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    491e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	4a ef       	ldi	r20, 0xFA	; 250
    4926:	54 e4       	ldi	r21, 0x44	; 68
    4928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492c:	dc 01       	movw	r26, r24
    492e:	cb 01       	movw	r24, r22
    4930:	8d 8b       	std	Y+21, r24	; 0x15
    4932:	9e 8b       	std	Y+22, r25	; 0x16
    4934:	af 8b       	std	Y+23, r26	; 0x17
    4936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4938:	6d 89       	ldd	r22, Y+21	; 0x15
    493a:	7e 89       	ldd	r23, Y+22	; 0x16
    493c:	8f 89       	ldd	r24, Y+23	; 0x17
    493e:	98 8d       	ldd	r25, Y+24	; 0x18
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e8       	ldi	r20, 0x80	; 128
    4946:	5f e3       	ldi	r21, 0x3F	; 63
    4948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    494c:	88 23       	and	r24, r24
    494e:	2c f4       	brge	.+10     	; 0x495a <ESP8266_VidSendHB+0x18c>
		__ticks = 1;
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	9c 8b       	std	Y+20, r25	; 0x14
    4956:	8b 8b       	std	Y+19, r24	; 0x13
    4958:	3f c0       	rjmp	.+126    	; 0x49d8 <ESP8266_VidSendHB+0x20a>
	else if (__tmp > 65535)
    495a:	6d 89       	ldd	r22, Y+21	; 0x15
    495c:	7e 89       	ldd	r23, Y+22	; 0x16
    495e:	8f 89       	ldd	r24, Y+23	; 0x17
    4960:	98 8d       	ldd	r25, Y+24	; 0x18
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	3f ef       	ldi	r19, 0xFF	; 255
    4966:	4f e7       	ldi	r20, 0x7F	; 127
    4968:	57 e4       	ldi	r21, 0x47	; 71
    496a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    496e:	18 16       	cp	r1, r24
    4970:	4c f5       	brge	.+82     	; 0x49c4 <ESP8266_VidSendHB+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4972:	69 8d       	ldd	r22, Y+25	; 0x19
    4974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	40 e2       	ldi	r20, 0x20	; 32
    4980:	51 e4       	ldi	r21, 0x41	; 65
    4982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	bc 01       	movw	r22, r24
    498c:	cd 01       	movw	r24, r26
    498e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	9c 8b       	std	Y+20, r25	; 0x14
    4998:	8b 8b       	std	Y+19, r24	; 0x13
    499a:	0f c0       	rjmp	.+30     	; 0x49ba <ESP8266_VidSendHB+0x1ec>
    499c:	88 ec       	ldi	r24, 0xC8	; 200
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	9a 8b       	std	Y+18, r25	; 0x12
    49a2:	89 8b       	std	Y+17, r24	; 0x11
    49a4:	89 89       	ldd	r24, Y+17	; 0x11
    49a6:	9a 89       	ldd	r25, Y+18	; 0x12
    49a8:	01 97       	sbiw	r24, 0x01	; 1
    49aa:	f1 f7       	brne	.-4      	; 0x49a8 <ESP8266_VidSendHB+0x1da>
    49ac:	9a 8b       	std	Y+18, r25	; 0x12
    49ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b0:	8b 89       	ldd	r24, Y+19	; 0x13
    49b2:	9c 89       	ldd	r25, Y+20	; 0x14
    49b4:	01 97       	sbiw	r24, 0x01	; 1
    49b6:	9c 8b       	std	Y+20, r25	; 0x14
    49b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ba:	8b 89       	ldd	r24, Y+19	; 0x13
    49bc:	9c 89       	ldd	r25, Y+20	; 0x14
    49be:	00 97       	sbiw	r24, 0x00	; 0
    49c0:	69 f7       	brne	.-38     	; 0x499c <ESP8266_VidSendHB+0x1ce>
    49c2:	14 c0       	rjmp	.+40     	; 0x49ec <ESP8266_VidSendHB+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c4:	6d 89       	ldd	r22, Y+21	; 0x15
    49c6:	7e 89       	ldd	r23, Y+22	; 0x16
    49c8:	8f 89       	ldd	r24, Y+23	; 0x17
    49ca:	98 8d       	ldd	r25, Y+24	; 0x18
    49cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	9c 8b       	std	Y+20, r25	; 0x14
    49d6:	8b 8b       	std	Y+19, r24	; 0x13
    49d8:	8b 89       	ldd	r24, Y+19	; 0x13
    49da:	9c 89       	ldd	r25, Y+20	; 0x14
    49dc:	98 8b       	std	Y+16, r25	; 0x10
    49de:	8f 87       	std	Y+15, r24	; 0x0f
    49e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49e2:	98 89       	ldd	r25, Y+16	; 0x10
    49e4:	01 97       	sbiw	r24, 0x01	; 1
    49e6:	f1 f7       	brne	.-4      	; 0x49e4 <ESP8266_VidSendHB+0x216>
    49e8:	98 8b       	std	Y+16, r25	; 0x10
    49ea:	8f 87       	std	Y+15, r24	; 0x0f
    49ec:	80 e0       	ldi	r24, 0x00	; 0
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	aa e7       	ldi	r26, 0x7A	; 122
    49f2:	b4 e4       	ldi	r27, 0x44	; 68
    49f4:	8b 87       	std	Y+11, r24	; 0x0b
    49f6:	9c 87       	std	Y+12, r25	; 0x0c
    49f8:	ad 87       	std	Y+13, r26	; 0x0d
    49fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    49fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	4a ef       	ldi	r20, 0xFA	; 250
    4a0a:	54 e4       	ldi	r21, 0x44	; 68
    4a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a10:	dc 01       	movw	r26, r24
    4a12:	cb 01       	movw	r24, r22
    4a14:	8f 83       	std	Y+7, r24	; 0x07
    4a16:	98 87       	std	Y+8, r25	; 0x08
    4a18:	a9 87       	std	Y+9, r26	; 0x09
    4a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a1e:	78 85       	ldd	r23, Y+8	; 0x08
    4a20:	89 85       	ldd	r24, Y+9	; 0x09
    4a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	40 e8       	ldi	r20, 0x80	; 128
    4a2a:	5f e3       	ldi	r21, 0x3F	; 63
    4a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a30:	88 23       	and	r24, r24
    4a32:	2c f4       	brge	.+10     	; 0x4a3e <ESP8266_VidSendHB+0x270>
		__ticks = 1;
    4a34:	81 e0       	ldi	r24, 0x01	; 1
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	9e 83       	std	Y+6, r25	; 0x06
    4a3a:	8d 83       	std	Y+5, r24	; 0x05
    4a3c:	3f c0       	rjmp	.+126    	; 0x4abc <ESP8266_VidSendHB+0x2ee>
	else if (__tmp > 65535)
    4a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a40:	78 85       	ldd	r23, Y+8	; 0x08
    4a42:	89 85       	ldd	r24, Y+9	; 0x09
    4a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	3f ef       	ldi	r19, 0xFF	; 255
    4a4a:	4f e7       	ldi	r20, 0x7F	; 127
    4a4c:	57 e4       	ldi	r21, 0x47	; 71
    4a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a52:	18 16       	cp	r1, r24
    4a54:	4c f5       	brge	.+82     	; 0x4aa8 <ESP8266_VidSendHB+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	40 e2       	ldi	r20, 0x20	; 32
    4a64:	51 e4       	ldi	r21, 0x41	; 65
    4a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	cb 01       	movw	r24, r22
    4a6e:	bc 01       	movw	r22, r24
    4a70:	cd 01       	movw	r24, r26
    4a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a76:	dc 01       	movw	r26, r24
    4a78:	cb 01       	movw	r24, r22
    4a7a:	9e 83       	std	Y+6, r25	; 0x06
    4a7c:	8d 83       	std	Y+5, r24	; 0x05
    4a7e:	0f c0       	rjmp	.+30     	; 0x4a9e <ESP8266_VidSendHB+0x2d0>
    4a80:	88 ec       	ldi	r24, 0xC8	; 200
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9c 83       	std	Y+4, r25	; 0x04
    4a86:	8b 83       	std	Y+3, r24	; 0x03
    4a88:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a8c:	01 97       	sbiw	r24, 0x01	; 1
    4a8e:	f1 f7       	brne	.-4      	; 0x4a8c <ESP8266_VidSendHB+0x2be>
    4a90:	9c 83       	std	Y+4, r25	; 0x04
    4a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a94:	8d 81       	ldd	r24, Y+5	; 0x05
    4a96:	9e 81       	ldd	r25, Y+6	; 0x06
    4a98:	01 97       	sbiw	r24, 0x01	; 1
    4a9a:	9e 83       	std	Y+6, r25	; 0x06
    4a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa2:	00 97       	sbiw	r24, 0x00	; 0
    4aa4:	69 f7       	brne	.-38     	; 0x4a80 <ESP8266_VidSendHB+0x2b2>
    4aa6:	14 c0       	rjmp	.+40     	; 0x4ad0 <ESP8266_VidSendHB+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aaa:	78 85       	ldd	r23, Y+8	; 0x08
    4aac:	89 85       	ldd	r24, Y+9	; 0x09
    4aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	9e 83       	std	Y+6, r25	; 0x06
    4aba:	8d 83       	std	Y+5, r24	; 0x05
    4abc:	8d 81       	ldd	r24, Y+5	; 0x05
    4abe:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac0:	9a 83       	std	Y+2, r25	; 0x02
    4ac2:	89 83       	std	Y+1, r24	; 0x01
    4ac4:	89 81       	ldd	r24, Y+1	; 0x01
    4ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac8:	01 97       	sbiw	r24, 0x01	; 1
    4aca:	f1 f7       	brne	.-4      	; 0x4ac8 <ESP8266_VidSendHB+0x2fa>
    4acc:	9a 83       	std	Y+2, r25	; 0x02
    4ace:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms( 1000 );
  _delay_ms( 1000 );


}
    4ad0:	ab 96       	adiw	r28, 0x2b	; 43
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	cf 91       	pop	r28
    4ade:	df 91       	pop	r29
    4ae0:	08 95       	ret

00004ae2 <ESP8266_VidSendPR>:
void ESP8266_VidSendPR(u8 Copy_u8PR)
{
    4ae2:	df 93       	push	r29
    4ae4:	cf 93       	push	r28
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	ab 97       	sbiw	r28, 0x2b	; 43
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	8b a7       	std	Y+43, r24	; 0x2b
  ESP8266_VidConnectToSrvTcp ("162.253.155.226", "80" );
    4af8:	85 ef       	ldi	r24, 0xF5	; 245
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	25 e0       	ldi	r18, 0x05	; 5
    4afe:	31 e0       	ldi	r19, 0x01	; 1
    4b00:	b9 01       	movw	r22, r18
    4b02:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <ESP8266_VidConnectToSrvTcp>
  if(((Copy_u8PR/10)/10)==0)
    4b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b08:	84 36       	cpi	r24, 0x64	; 100
    4b0a:	28 f4       	brcc	.+10     	; 0x4b16 <ESP8266_VidSendPR+0x34>
    {
      USART_SendStr( (u8 *) "AT+CIPSEND=59\r\n" );
    4b0c:	88 e8       	ldi	r24, 0x88	; 136
    4b0e:	91 e0       	ldi	r25, 0x01	; 1
    4b10:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4b14:	04 c0       	rjmp	.+8      	; 0x4b1e <ESP8266_VidSendPR+0x3c>
    }
  else
    {
      USART_SendStr( (u8 *) "AT+CIPSEND=60\r\n" );
    4b16:	88 e9       	ldi	r24, 0x98	; 152
    4b18:	91 e0       	ldi	r25, 0x01	; 1
    4b1a:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4b1e:	80 e0       	ldi	r24, 0x00	; 0
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	a8 ec       	ldi	r26, 0xC8	; 200
    4b24:	b2 e4       	ldi	r27, 0x42	; 66
    4b26:	8f a3       	std	Y+39, r24	; 0x27
    4b28:	98 a7       	std	Y+40, r25	; 0x28
    4b2a:	a9 a7       	std	Y+41, r26	; 0x29
    4b2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b2e:	6f a1       	ldd	r22, Y+39	; 0x27
    4b30:	78 a5       	ldd	r23, Y+40	; 0x28
    4b32:	89 a5       	ldd	r24, Y+41	; 0x29
    4b34:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b36:	20 e0       	ldi	r18, 0x00	; 0
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	4a ef       	ldi	r20, 0xFA	; 250
    4b3c:	54 e4       	ldi	r21, 0x44	; 68
    4b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b42:	dc 01       	movw	r26, r24
    4b44:	cb 01       	movw	r24, r22
    4b46:	8b a3       	std	Y+35, r24	; 0x23
    4b48:	9c a3       	std	Y+36, r25	; 0x24
    4b4a:	ad a3       	std	Y+37, r26	; 0x25
    4b4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    4b50:	7c a1       	ldd	r23, Y+36	; 0x24
    4b52:	8d a1       	ldd	r24, Y+37	; 0x25
    4b54:	9e a1       	ldd	r25, Y+38	; 0x26
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	40 e8       	ldi	r20, 0x80	; 128
    4b5c:	5f e3       	ldi	r21, 0x3F	; 63
    4b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b62:	88 23       	and	r24, r24
    4b64:	2c f4       	brge	.+10     	; 0x4b70 <ESP8266_VidSendPR+0x8e>
		__ticks = 1;
    4b66:	81 e0       	ldi	r24, 0x01	; 1
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	9a a3       	std	Y+34, r25	; 0x22
    4b6c:	89 a3       	std	Y+33, r24	; 0x21
    4b6e:	3f c0       	rjmp	.+126    	; 0x4bee <ESP8266_VidSendPR+0x10c>
	else if (__tmp > 65535)
    4b70:	6b a1       	ldd	r22, Y+35	; 0x23
    4b72:	7c a1       	ldd	r23, Y+36	; 0x24
    4b74:	8d a1       	ldd	r24, Y+37	; 0x25
    4b76:	9e a1       	ldd	r25, Y+38	; 0x26
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	3f ef       	ldi	r19, 0xFF	; 255
    4b7c:	4f e7       	ldi	r20, 0x7F	; 127
    4b7e:	57 e4       	ldi	r21, 0x47	; 71
    4b80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b84:	18 16       	cp	r1, r24
    4b86:	4c f5       	brge	.+82     	; 0x4bda <ESP8266_VidSendPR+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b88:	6f a1       	ldd	r22, Y+39	; 0x27
    4b8a:	78 a5       	ldd	r23, Y+40	; 0x28
    4b8c:	89 a5       	ldd	r24, Y+41	; 0x29
    4b8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	40 e2       	ldi	r20, 0x20	; 32
    4b96:	51 e4       	ldi	r21, 0x41	; 65
    4b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	cb 01       	movw	r24, r22
    4ba0:	bc 01       	movw	r22, r24
    4ba2:	cd 01       	movw	r24, r26
    4ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	9a a3       	std	Y+34, r25	; 0x22
    4bae:	89 a3       	std	Y+33, r24	; 0x21
    4bb0:	0f c0       	rjmp	.+30     	; 0x4bd0 <ESP8266_VidSendPR+0xee>
    4bb2:	88 ec       	ldi	r24, 0xC8	; 200
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	98 a3       	std	Y+32, r25	; 0x20
    4bb8:	8f 8f       	std	Y+31, r24	; 0x1f
    4bba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bbc:	98 a1       	ldd	r25, Y+32	; 0x20
    4bbe:	01 97       	sbiw	r24, 0x01	; 1
    4bc0:	f1 f7       	brne	.-4      	; 0x4bbe <ESP8266_VidSendPR+0xdc>
    4bc2:	98 a3       	std	Y+32, r25	; 0x20
    4bc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    4bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	9a a3       	std	Y+34, r25	; 0x22
    4bce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    4bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    4bd4:	00 97       	sbiw	r24, 0x00	; 0
    4bd6:	69 f7       	brne	.-38     	; 0x4bb2 <ESP8266_VidSendPR+0xd0>
    4bd8:	14 c0       	rjmp	.+40     	; 0x4c02 <ESP8266_VidSendPR+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bda:	6b a1       	ldd	r22, Y+35	; 0x23
    4bdc:	7c a1       	ldd	r23, Y+36	; 0x24
    4bde:	8d a1       	ldd	r24, Y+37	; 0x25
    4be0:	9e a1       	ldd	r25, Y+38	; 0x26
    4be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	9a a3       	std	Y+34, r25	; 0x22
    4bec:	89 a3       	std	Y+33, r24	; 0x21
    4bee:	89 a1       	ldd	r24, Y+33	; 0x21
    4bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    4bf2:	9e 8f       	std	Y+30, r25	; 0x1e
    4bf4:	8d 8f       	std	Y+29, r24	; 0x1d
    4bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	f1 f7       	brne	.-4      	; 0x4bfa <ESP8266_VidSendPR+0x118>
    4bfe:	9e 8f       	std	Y+30, r25	; 0x1e
    4c00:	8d 8f       	std	Y+29, r24	; 0x1d
    }
  _delay_ms( 100 );

  USART_SendStr( (u8 *) "GET http://eece2023.freevar.com/TransmitterPR.php?data=");
    4c02:	80 ee       	ldi	r24, 0xE0	; 224
    4c04:	91 e0       	ldi	r25, 0x01	; 1
    4c06:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
  USART_SendInteger(Copy_u8PR);
    4c0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c0c:	88 2f       	mov	r24, r24
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <USART_SendInteger>
  USART_SendStr((u8 *)"\r\n");
    4c14:	82 ef       	ldi	r24, 0xF2	; 242
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <USART_SendStr>
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	aa e7       	ldi	r26, 0x7A	; 122
    4c22:	b4 e4       	ldi	r27, 0x44	; 68
    4c24:	89 8f       	std	Y+25, r24	; 0x19
    4c26:	9a 8f       	std	Y+26, r25	; 0x1a
    4c28:	ab 8f       	std	Y+27, r26	; 0x1b
    4c2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    4c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	4a ef       	ldi	r20, 0xFA	; 250
    4c3a:	54 e4       	ldi	r21, 0x44	; 68
    4c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	8d 8b       	std	Y+21, r24	; 0x15
    4c46:	9e 8b       	std	Y+22, r25	; 0x16
    4c48:	af 8b       	std	Y+23, r26	; 0x17
    4c4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c50:	8f 89       	ldd	r24, Y+23	; 0x17
    4c52:	98 8d       	ldd	r25, Y+24	; 0x18
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	30 e0       	ldi	r19, 0x00	; 0
    4c58:	40 e8       	ldi	r20, 0x80	; 128
    4c5a:	5f e3       	ldi	r21, 0x3F	; 63
    4c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c60:	88 23       	and	r24, r24
    4c62:	2c f4       	brge	.+10     	; 0x4c6e <ESP8266_VidSendPR+0x18c>
		__ticks = 1;
    4c64:	81 e0       	ldi	r24, 0x01	; 1
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	9c 8b       	std	Y+20, r25	; 0x14
    4c6a:	8b 8b       	std	Y+19, r24	; 0x13
    4c6c:	3f c0       	rjmp	.+126    	; 0x4cec <ESP8266_VidSendPR+0x20a>
	else if (__tmp > 65535)
    4c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c70:	7e 89       	ldd	r23, Y+22	; 0x16
    4c72:	8f 89       	ldd	r24, Y+23	; 0x17
    4c74:	98 8d       	ldd	r25, Y+24	; 0x18
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	3f ef       	ldi	r19, 0xFF	; 255
    4c7a:	4f e7       	ldi	r20, 0x7F	; 127
    4c7c:	57 e4       	ldi	r21, 0x47	; 71
    4c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c82:	18 16       	cp	r1, r24
    4c84:	4c f5       	brge	.+82     	; 0x4cd8 <ESP8266_VidSendPR+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c86:	69 8d       	ldd	r22, Y+25	; 0x19
    4c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e2       	ldi	r20, 0x20	; 32
    4c94:	51 e4       	ldi	r21, 0x41	; 65
    4c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	cd 01       	movw	r24, r26
    4ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	9c 8b       	std	Y+20, r25	; 0x14
    4cac:	8b 8b       	std	Y+19, r24	; 0x13
    4cae:	0f c0       	rjmp	.+30     	; 0x4cce <ESP8266_VidSendPR+0x1ec>
    4cb0:	88 ec       	ldi	r24, 0xC8	; 200
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	9a 8b       	std	Y+18, r25	; 0x12
    4cb6:	89 8b       	std	Y+17, r24	; 0x11
    4cb8:	89 89       	ldd	r24, Y+17	; 0x11
    4cba:	9a 89       	ldd	r25, Y+18	; 0x12
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	f1 f7       	brne	.-4      	; 0x4cbc <ESP8266_VidSendPR+0x1da>
    4cc0:	9a 8b       	std	Y+18, r25	; 0x12
    4cc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    4cc8:	01 97       	sbiw	r24, 0x01	; 1
    4cca:	9c 8b       	std	Y+20, r25	; 0x14
    4ccc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cce:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    4cd2:	00 97       	sbiw	r24, 0x00	; 0
    4cd4:	69 f7       	brne	.-38     	; 0x4cb0 <ESP8266_VidSendPR+0x1ce>
    4cd6:	14 c0       	rjmp	.+40     	; 0x4d00 <ESP8266_VidSendPR+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    4cda:	7e 89       	ldd	r23, Y+22	; 0x16
    4cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    4cde:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	cb 01       	movw	r24, r22
    4ce8:	9c 8b       	std	Y+20, r25	; 0x14
    4cea:	8b 8b       	std	Y+19, r24	; 0x13
    4cec:	8b 89       	ldd	r24, Y+19	; 0x13
    4cee:	9c 89       	ldd	r25, Y+20	; 0x14
    4cf0:	98 8b       	std	Y+16, r25	; 0x10
    4cf2:	8f 87       	std	Y+15, r24	; 0x0f
    4cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cf6:	98 89       	ldd	r25, Y+16	; 0x10
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <ESP8266_VidSendPR+0x216>
    4cfc:	98 8b       	std	Y+16, r25	; 0x10
    4cfe:	8f 87       	std	Y+15, r24	; 0x0f
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	aa e7       	ldi	r26, 0x7A	; 122
    4d06:	b4 e4       	ldi	r27, 0x44	; 68
    4d08:	8b 87       	std	Y+11, r24	; 0x0b
    4d0a:	9c 87       	std	Y+12, r25	; 0x0c
    4d0c:	ad 87       	std	Y+13, r26	; 0x0d
    4d0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	4a ef       	ldi	r20, 0xFA	; 250
    4d1e:	54 e4       	ldi	r21, 0x44	; 68
    4d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d24:	dc 01       	movw	r26, r24
    4d26:	cb 01       	movw	r24, r22
    4d28:	8f 83       	std	Y+7, r24	; 0x07
    4d2a:	98 87       	std	Y+8, r25	; 0x08
    4d2c:	a9 87       	std	Y+9, r26	; 0x09
    4d2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d30:	6f 81       	ldd	r22, Y+7	; 0x07
    4d32:	78 85       	ldd	r23, Y+8	; 0x08
    4d34:	89 85       	ldd	r24, Y+9	; 0x09
    4d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	40 e8       	ldi	r20, 0x80	; 128
    4d3e:	5f e3       	ldi	r21, 0x3F	; 63
    4d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d44:	88 23       	and	r24, r24
    4d46:	2c f4       	brge	.+10     	; 0x4d52 <ESP8266_VidSendPR+0x270>
		__ticks = 1;
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	9e 83       	std	Y+6, r25	; 0x06
    4d4e:	8d 83       	std	Y+5, r24	; 0x05
    4d50:	3f c0       	rjmp	.+126    	; 0x4dd0 <ESP8266_VidSendPR+0x2ee>
	else if (__tmp > 65535)
    4d52:	6f 81       	ldd	r22, Y+7	; 0x07
    4d54:	78 85       	ldd	r23, Y+8	; 0x08
    4d56:	89 85       	ldd	r24, Y+9	; 0x09
    4d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	3f ef       	ldi	r19, 0xFF	; 255
    4d5e:	4f e7       	ldi	r20, 0x7F	; 127
    4d60:	57 e4       	ldi	r21, 0x47	; 71
    4d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d66:	18 16       	cp	r1, r24
    4d68:	4c f5       	brge	.+82     	; 0x4dbc <ESP8266_VidSendPR+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	40 e2       	ldi	r20, 0x20	; 32
    4d78:	51 e4       	ldi	r21, 0x41	; 65
    4d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	bc 01       	movw	r22, r24
    4d84:	cd 01       	movw	r24, r26
    4d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	9e 83       	std	Y+6, r25	; 0x06
    4d90:	8d 83       	std	Y+5, r24	; 0x05
    4d92:	0f c0       	rjmp	.+30     	; 0x4db2 <ESP8266_VidSendPR+0x2d0>
    4d94:	88 ec       	ldi	r24, 0xC8	; 200
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	9c 83       	std	Y+4, r25	; 0x04
    4d9a:	8b 83       	std	Y+3, r24	; 0x03
    4d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4da0:	01 97       	sbiw	r24, 0x01	; 1
    4da2:	f1 f7       	brne	.-4      	; 0x4da0 <ESP8266_VidSendPR+0x2be>
    4da4:	9c 83       	std	Y+4, r25	; 0x04
    4da6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da8:	8d 81       	ldd	r24, Y+5	; 0x05
    4daa:	9e 81       	ldd	r25, Y+6	; 0x06
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	9e 83       	std	Y+6, r25	; 0x06
    4db0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db2:	8d 81       	ldd	r24, Y+5	; 0x05
    4db4:	9e 81       	ldd	r25, Y+6	; 0x06
    4db6:	00 97       	sbiw	r24, 0x00	; 0
    4db8:	69 f7       	brne	.-38     	; 0x4d94 <ESP8266_VidSendPR+0x2b2>
    4dba:	14 c0       	rjmp	.+40     	; 0x4de4 <ESP8266_VidSendPR+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    4dbe:	78 85       	ldd	r23, Y+8	; 0x08
    4dc0:	89 85       	ldd	r24, Y+9	; 0x09
    4dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	9e 83       	std	Y+6, r25	; 0x06
    4dce:	8d 83       	std	Y+5, r24	; 0x05
    4dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd4:	9a 83       	std	Y+2, r25	; 0x02
    4dd6:	89 83       	std	Y+1, r24	; 0x01
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	01 97       	sbiw	r24, 0x01	; 1
    4dde:	f1 f7       	brne	.-4      	; 0x4ddc <ESP8266_VidSendPR+0x2fa>
    4de0:	9a 83       	std	Y+2, r25	; 0x02
    4de2:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms( 1000 );
  _delay_ms( 1000 );


}
    4de4:	ab 96       	adiw	r28, 0x2b	; 43
    4de6:	0f b6       	in	r0, 0x3f	; 63
    4de8:	f8 94       	cli
    4dea:	de bf       	out	0x3e, r29	; 62
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	cd bf       	out	0x3d, r28	; 61
    4df0:	cf 91       	pop	r28
    4df2:	df 91       	pop	r29
    4df4:	08 95       	ret

00004df6 <USART_inti>:
#include "USART_interface.h"
#include "USART_config.h"
#include "USART_priv.h"

void USART_inti() //initialization of USART com. protocol
{
    4df6:	df 93       	push	r29
    4df8:	cf 93       	push	r28
    4dfa:	0f 92       	push	r0
    4dfc:	cd b7       	in	r28, 0x3d	; 61
    4dfe:	de b7       	in	r29, 0x3e	; 62
	u8 UCSRC_val=0;
    4e00:	19 82       	std	Y+1, r1	; 0x01
		CLEAR_BIT(UCSRB,UCSZ2);
		SET_BIT(UCSRC_val,UCSZ1);
		CLEAR_BIT(UCSRC_val,UCSZ0);
		CLEAR_BIT(UCSRC_val,URSEL);
	#elif (DATA_BITS == 8)
		CLEAR_BIT(UCSRB,UCSZ2);
    4e02:	aa e2       	ldi	r26, 0x2A	; 42
    4e04:	b0 e0       	ldi	r27, 0x00	; 0
    4e06:	ea e2       	ldi	r30, 0x2A	; 42
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	80 81       	ld	r24, Z
    4e0c:	8b 7f       	andi	r24, 0xFB	; 251
    4e0e:	8c 93       	st	X, r24
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    4e10:	89 81       	ldd	r24, Y+1	; 0x01
    4e12:	86 68       	ori	r24, 0x86	; 134
    4e14:	89 83       	std	Y+1, r24	; 0x01
		UCSRC_val|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	#endif

	//choosing stop bits
	#if (STOP_BITS == 1)
		CLEAR_BIT(UCSRC_val,USBS);
    4e16:	89 81       	ldd	r24, Y+1	; 0x01
    4e18:	87 7f       	andi	r24, 0xF7	; 247
    4e1a:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,USBS);
	#endif

	//choosing parity bit
	#if(PARITY_BITS == DISABLED)
		CLEAR_BIT(UCSRC_val,UPM1);
    4e1c:	89 81       	ldd	r24, Y+1	; 0x01
    4e1e:	8f 7d       	andi	r24, 0xDF	; 223
    4e20:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(UCSRC_val,UPM0);
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
    4e24:	8f 7e       	andi	r24, 0xEF	; 239
    4e26:	89 83       	std	Y+1, r24	; 0x01
	#endif
	//choosing asynchronous or synchronous
	#if SYNC_MODE
		SET_BIT(UCSRC_val,UMSEL);
	#else
		CLEAR_BIT(UCSRC_val,UMSEL);
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	8f 7b       	andi	r24, 0xBF	; 191
    4e2c:	89 83       	std	Y+1, r24	; 0x01

	//choosing interrupts
	#if (RX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,RXCIE);
	#else
		CLEAR_BIT(UCSRB,RXCIE);
    4e2e:	aa e2       	ldi	r26, 0x2A	; 42
    4e30:	b0 e0       	ldi	r27, 0x00	; 0
    4e32:	ea e2       	ldi	r30, 0x2A	; 42
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	80 81       	ld	r24, Z
    4e38:	8f 77       	andi	r24, 0x7F	; 127
    4e3a:	8c 93       	st	X, r24
	#endif

	#if(TX_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,TXCIE);
	#else
		CLEAR_BIT(UCSRB,TXCIE);
    4e3c:	aa e2       	ldi	r26, 0x2A	; 42
    4e3e:	b0 e0       	ldi	r27, 0x00	; 0
    4e40:	ea e2       	ldi	r30, 0x2A	; 42
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	80 81       	ld	r24, Z
    4e46:	8f 7b       	andi	r24, 0xBF	; 191
    4e48:	8c 93       	st	X, r24
	#endif

	#if(UDR_EMPTY_INTERRUPT_ENABLE)
		SET_BIT(UCSRB,UDRIE);
	#else
		CLEAR_BIT(UCSRB,UDRIE);
    4e4a:	aa e2       	ldi	r26, 0x2A	; 42
    4e4c:	b0 e0       	ldi	r27, 0x00	; 0
    4e4e:	ea e2       	ldi	r30, 0x2A	; 42
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	80 81       	ld	r24, Z
    4e54:	8f 7d       	andi	r24, 0xDF	; 223
    4e56:	8c 93       	st	X, r24
	#endif

	//enabling Tx and Rx
	#if(RX_ENABLE)
		SET_BIT(UCSRB,RXEN);
    4e58:	aa e2       	ldi	r26, 0x2A	; 42
    4e5a:	b0 e0       	ldi	r27, 0x00	; 0
    4e5c:	ea e2       	ldi	r30, 0x2A	; 42
    4e5e:	f0 e0       	ldi	r31, 0x00	; 0
    4e60:	80 81       	ld	r24, Z
    4e62:	80 61       	ori	r24, 0x10	; 16
    4e64:	8c 93       	st	X, r24
	#else
		CLEAR_BIT(UCSRB,RXEN);
	#endif

	#if(TX_ENABLE)
		SET_BIT(UCSRB,TXEN);
    4e66:	aa e2       	ldi	r26, 0x2A	; 42
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	ea e2       	ldi	r30, 0x2A	; 42
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	80 81       	ld	r24, Z
    4e70:	88 60       	ori	r24, 0x08	; 8
    4e72:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,TXEN);
	#endif

	//choosing baud rate

	UBRRL=51;
    4e74:	e9 e2       	ldi	r30, 0x29	; 41
    4e76:	f0 e0       	ldi	r31, 0x00	; 0
    4e78:	83 e3       	ldi	r24, 0x33	; 51
    4e7a:	80 83       	st	Z, r24
	UBRRH=0;
    4e7c:	e0 e4       	ldi	r30, 0x40	; 64
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	10 82       	st	Z, r1

	//assigning UCSRC value into UCSRC register
	UCSRC=UCSRC_val;
    4e82:	e0 e4       	ldi	r30, 0x40	; 64
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	80 83       	st	Z, r24
}
    4e8a:	0f 90       	pop	r0
    4e8c:	cf 91       	pop	r28
    4e8e:	df 91       	pop	r29
    4e90:	08 95       	ret

00004e92 <USART_ReceiveDataPolling>:


u8 USART_ReceiveDataPolling() // receive data polling on RXC flag
{
    4e92:	df 93       	push	r29
    4e94:	cf 93       	push	r28
    4e96:	cd b7       	in	r28, 0x3d	; 61
    4e98:	de b7       	in	r29, 0x3e	; 62
	//waiting for data to be sent and UDR Rx buffer to be filled
	while((GET_BIT(UCSRA,RXC))==0);
    4e9a:	eb e2       	ldi	r30, 0x2B	; 43
    4e9c:	f0 e0       	ldi	r31, 0x00	; 0
    4e9e:	80 81       	ld	r24, Z
    4ea0:	88 23       	and	r24, r24
    4ea2:	dc f7       	brge	.-10     	; 0x4e9a <USART_ReceiveDataPolling+0x8>

	//returning data
	return UDR;
    4ea4:	ec e2       	ldi	r30, 0x2C	; 44
    4ea6:	f0 e0       	ldi	r31, 0x00	; 0
    4ea8:	80 81       	ld	r24, Z
}
    4eaa:	cf 91       	pop	r28
    4eac:	df 91       	pop	r29
    4eae:	08 95       	ret

00004eb0 <USART_ReceiveDataINT>:

u8 USART_ReceiveDataINT() // receive data with RXC interrupt, WARNING ENABLE RXC INT
{
    4eb0:	df 93       	push	r29
    4eb2:	cf 93       	push	r28
    4eb4:	cd b7       	in	r28, 0x3d	; 61
    4eb6:	de b7       	in	r29, 0x3e	; 62
	//returning data
	return UDR;
    4eb8:	ec e2       	ldi	r30, 0x2C	; 44
    4eba:	f0 e0       	ldi	r31, 0x00	; 0
    4ebc:	80 81       	ld	r24, Z
}
    4ebe:	cf 91       	pop	r28
    4ec0:	df 91       	pop	r29
    4ec2:	08 95       	ret

00004ec4 <USART_SendDataPolling>:


void USART_SendDataPolling(u8 data) // send data polling on UDRE flag
{
    4ec4:	df 93       	push	r29
    4ec6:	cf 93       	push	r28
    4ec8:	0f 92       	push	r0
    4eca:	cd b7       	in	r28, 0x3d	; 61
    4ecc:	de b7       	in	r29, 0x3e	; 62
    4ece:	89 83       	std	Y+1, r24	; 0x01
	//waiting to UDR Tx buffer to be empty
	while((GET_BIT(UCSRA,UDRE))==0);
    4ed0:	eb e2       	ldi	r30, 0x2B	; 43
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	80 81       	ld	r24, Z
    4ed6:	82 95       	swap	r24
    4ed8:	86 95       	lsr	r24
    4eda:	87 70       	andi	r24, 0x07	; 7
    4edc:	88 2f       	mov	r24, r24
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	81 70       	andi	r24, 0x01	; 1
    4ee2:	90 70       	andi	r25, 0x00	; 0
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	a1 f3       	breq	.-24     	; 0x4ed0 <USART_SendDataPolling+0xc>

	//sending data
	UDR=data;
    4ee8:	ec e2       	ldi	r30, 0x2C	; 44
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
    4eee:	80 83       	st	Z, r24
}
    4ef0:	0f 90       	pop	r0
    4ef2:	cf 91       	pop	r28
    4ef4:	df 91       	pop	r29
    4ef6:	08 95       	ret

00004ef8 <USART_ReceieveStr>:

void USART_ReceieveStr(u8* str_data, u8 number) // receive number of elements
{
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	df 93       	push	r29
    4efe:	cf 93       	push	r28
    4f00:	00 d0       	rcall	.+0      	; 0x4f02 <USART_ReceieveStr+0xa>
    4f02:	00 d0       	rcall	.+0      	; 0x4f04 <USART_ReceieveStr+0xc>
    4f04:	cd b7       	in	r28, 0x3d	; 61
    4f06:	de b7       	in	r29, 0x3e	; 62
    4f08:	9b 83       	std	Y+3, r25	; 0x03
    4f0a:	8a 83       	std	Y+2, r24	; 0x02
    4f0c:	6c 83       	std	Y+4, r22	; 0x04
	u8 counter;
	for(counter=0;counter<number;counter++)
    4f0e:	19 82       	std	Y+1, r1	; 0x01
    4f10:	0f c0       	rjmp	.+30     	; 0x4f30 <USART_ReceieveStr+0x38>
	{
		str_data[counter]=USART_ReceiveDataPolling();
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	28 2f       	mov	r18, r24
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f1c:	8c 01       	movw	r16, r24
    4f1e:	02 0f       	add	r16, r18
    4f20:	13 1f       	adc	r17, r19
    4f22:	0e 94 49 27 	call	0x4e92	; 0x4e92 <USART_ReceiveDataPolling>
    4f26:	f8 01       	movw	r30, r16
    4f28:	80 83       	st	Z, r24
}

void USART_ReceieveStr(u8* str_data, u8 number) // receive number of elements
{
	u8 counter;
	for(counter=0;counter<number;counter++)
    4f2a:	89 81       	ldd	r24, Y+1	; 0x01
    4f2c:	8f 5f       	subi	r24, 0xFF	; 255
    4f2e:	89 83       	std	Y+1, r24	; 0x01
    4f30:	99 81       	ldd	r25, Y+1	; 0x01
    4f32:	8c 81       	ldd	r24, Y+4	; 0x04
    4f34:	98 17       	cp	r25, r24
    4f36:	68 f3       	brcs	.-38     	; 0x4f12 <USART_ReceieveStr+0x1a>
	{
		str_data[counter]=USART_ReceiveDataPolling();
	}
}
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	0f 90       	pop	r0
    4f40:	cf 91       	pop	r28
    4f42:	df 91       	pop	r29
    4f44:	1f 91       	pop	r17
    4f46:	0f 91       	pop	r16
    4f48:	08 95       	ret

00004f4a <USART_SendDataINT>:

void USART_SendDataINT(u8 data) // send data with UDRE interrupt, WARNING ENABLE UDRE INT
{
    4f4a:	df 93       	push	r29
    4f4c:	cf 93       	push	r28
    4f4e:	0f 92       	push	r0
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	89 83       	std	Y+1, r24	; 0x01
	//sending data
	UDR=data;
    4f56:	ec e2       	ldi	r30, 0x2C	; 44
    4f58:	f0 e0       	ldi	r31, 0x00	; 0
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	80 83       	st	Z, r24
}
    4f5e:	0f 90       	pop	r0
    4f60:	cf 91       	pop	r28
    4f62:	df 91       	pop	r29
    4f64:	08 95       	ret

00004f66 <USART_SendStr>:

void USART_SendStr(u8* str_data)
{
    4f66:	df 93       	push	r29
    4f68:	cf 93       	push	r28
    4f6a:	00 d0       	rcall	.+0      	; 0x4f6c <USART_SendStr+0x6>
    4f6c:	0f 92       	push	r0
    4f6e:	cd b7       	in	r28, 0x3d	; 61
    4f70:	de b7       	in	r29, 0x3e	; 62
    4f72:	9b 83       	std	Y+3, r25	; 0x03
    4f74:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    4f76:	19 82       	std	Y+1, r1	; 0x01
    4f78:	0e c0       	rjmp	.+28     	; 0x4f96 <USART_SendStr+0x30>
	while(str_data[counter]!='\0')
	{
		USART_SendDataPolling(str_data[counter]);
    4f7a:	89 81       	ldd	r24, Y+1	; 0x01
    4f7c:	28 2f       	mov	r18, r24
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	8a 81       	ldd	r24, Y+2	; 0x02
    4f82:	9b 81       	ldd	r25, Y+3	; 0x03
    4f84:	fc 01       	movw	r30, r24
    4f86:	e2 0f       	add	r30, r18
    4f88:	f3 1f       	adc	r31, r19
    4f8a:	80 81       	ld	r24, Z
    4f8c:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <USART_SendDataPolling>
		counter++;
    4f90:	89 81       	ldd	r24, Y+1	; 0x01
    4f92:	8f 5f       	subi	r24, 0xFF	; 255
    4f94:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendStr(u8* str_data)
{
	u8 counter=0;
	while(str_data[counter]!='\0')
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	e2 0f       	add	r30, r18
    4fa4:	f3 1f       	adc	r31, r19
    4fa6:	80 81       	ld	r24, Z
    4fa8:	88 23       	and	r24, r24
    4faa:	39 f7       	brne	.-50     	; 0x4f7a <USART_SendStr+0x14>
	{
		USART_SendDataPolling(str_data[counter]);
		counter++;
	}
}
    4fac:	0f 90       	pop	r0
    4fae:	0f 90       	pop	r0
    4fb0:	0f 90       	pop	r0
    4fb2:	cf 91       	pop	r28
    4fb4:	df 91       	pop	r29
    4fb6:	08 95       	ret

00004fb8 <USART_SendInteger>:

void USART_SendInteger(volatile u16 Copy_u16Number) //this function to print direct integer number
{
    4fb8:	df 93       	push	r29
    4fba:	cf 93       	push	r28
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	2d 97       	sbiw	r28, 0x0d	; 13
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	98 87       	std	Y+8, r25	; 0x08
    4fce:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8arrStrNumber[5]={10,10,10,10,10};
    4fd0:	ce 01       	movw	r24, r28
    4fd2:	02 96       	adiw	r24, 0x02	; 2
    4fd4:	9a 87       	std	Y+10, r25	; 0x0a
    4fd6:	89 87       	std	Y+9, r24	; 0x09
    4fd8:	e0 e2       	ldi	r30, 0x20	; 32
    4fda:	f2 e0       	ldi	r31, 0x02	; 2
    4fdc:	fc 87       	std	Y+12, r31	; 0x0c
    4fde:	eb 87       	std	Y+11, r30	; 0x0b
    4fe0:	f5 e0       	ldi	r31, 0x05	; 5
    4fe2:	fd 87       	std	Y+13, r31	; 0x0d
    4fe4:	eb 85       	ldd	r30, Y+11	; 0x0b
    4fe6:	fc 85       	ldd	r31, Y+12	; 0x0c
    4fe8:	00 80       	ld	r0, Z
    4fea:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fec:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	9c 87       	std	Y+12, r25	; 0x0c
    4ff2:	8b 87       	std	Y+11, r24	; 0x0b
    4ff4:	e9 85       	ldd	r30, Y+9	; 0x09
    4ff6:	fa 85       	ldd	r31, Y+10	; 0x0a
    4ff8:	00 82       	st	Z, r0
    4ffa:	89 85       	ldd	r24, Y+9	; 0x09
    4ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	9a 87       	std	Y+10, r25	; 0x0a
    5002:	89 87       	std	Y+9, r24	; 0x09
    5004:	9d 85       	ldd	r25, Y+13	; 0x0d
    5006:	91 50       	subi	r25, 0x01	; 1
    5008:	9d 87       	std	Y+13, r25	; 0x0d
    500a:	ed 85       	ldd	r30, Y+13	; 0x0d
    500c:	ee 23       	and	r30, r30
    500e:	51 f7       	brne	.-44     	; 0x4fe4 <USART_SendInteger+0x2c>
	u8 Local_u8Counter=4;
    5010:	84 e0       	ldi	r24, 0x04	; 4
    5012:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16Number==0)
    5014:	8f 81       	ldd	r24, Y+7	; 0x07
    5016:	98 85       	ldd	r25, Y+8	; 0x08
    5018:	00 97       	sbiw	r24, 0x00	; 0
    501a:	d9 f5       	brne	.+118    	; 0x5092 <USART_SendInteger+0xda>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    501c:	89 81       	ldd	r24, Y+1	; 0x01
    501e:	e8 2f       	mov	r30, r24
    5020:	f0 e0       	ldi	r31, 0x00	; 0
    5022:	8f 81       	ldd	r24, Y+7	; 0x07
    5024:	98 85       	ldd	r25, Y+8	; 0x08
    5026:	2a e0       	ldi	r18, 0x0A	; 10
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	b9 01       	movw	r22, r18
    502c:	0e 94 ad 28 	call	0x515a	; 0x515a <__udivmodhi4>
    5030:	28 2f       	mov	r18, r24
    5032:	ce 01       	movw	r24, r28
    5034:	02 96       	adiw	r24, 0x02	; 2
    5036:	e8 0f       	add	r30, r24
    5038:	f9 1f       	adc	r31, r25
    503a:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    503c:	8f 81       	ldd	r24, Y+7	; 0x07
    503e:	98 85       	ldd	r25, Y+8	; 0x08
    5040:	2a e0       	ldi	r18, 0x0A	; 10
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	b9 01       	movw	r22, r18
    5046:	0e 94 ad 28 	call	0x515a	; 0x515a <__udivmodhi4>
    504a:	cb 01       	movw	r24, r22
    504c:	98 87       	std	Y+8, r25	; 0x08
    504e:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter--;
    5050:	89 81       	ldd	r24, Y+1	; 0x01
    5052:	81 50       	subi	r24, 0x01	; 1
    5054:	89 83       	std	Y+1, r24	; 0x01
    5056:	1d c0       	rjmp	.+58     	; 0x5092 <USART_SendInteger+0xda>
	}
	while(Copy_u16Number>0)
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	e8 2f       	mov	r30, r24
    505c:	f0 e0       	ldi	r31, 0x00	; 0
    505e:	8f 81       	ldd	r24, Y+7	; 0x07
    5060:	98 85       	ldd	r25, Y+8	; 0x08
    5062:	2a e0       	ldi	r18, 0x0A	; 10
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	b9 01       	movw	r22, r18
    5068:	0e 94 ad 28 	call	0x515a	; 0x515a <__udivmodhi4>
    506c:	28 2f       	mov	r18, r24
    506e:	ce 01       	movw	r24, r28
    5070:	02 96       	adiw	r24, 0x02	; 2
    5072:	e8 0f       	add	r30, r24
    5074:	f9 1f       	adc	r31, r25
    5076:	20 83       	st	Z, r18
		Copy_u16Number/=10;
    5078:	8f 81       	ldd	r24, Y+7	; 0x07
    507a:	98 85       	ldd	r25, Y+8	; 0x08
    507c:	2a e0       	ldi	r18, 0x0A	; 10
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	b9 01       	movw	r22, r18
    5082:	0e 94 ad 28 	call	0x515a	; 0x515a <__udivmodhi4>
    5086:	cb 01       	movw	r24, r22
    5088:	98 87       	std	Y+8, r25	; 0x08
    508a:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter--;
    508c:	89 81       	ldd	r24, Y+1	; 0x01
    508e:	81 50       	subi	r24, 0x01	; 1
    5090:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	while(Copy_u16Number>0)
    5092:	8f 81       	ldd	r24, Y+7	; 0x07
    5094:	98 85       	ldd	r25, Y+8	; 0x08
    5096:	00 97       	sbiw	r24, 0x00	; 0
    5098:	f9 f6       	brne	.-66     	; 0x5058 <USART_SendInteger+0xa0>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    509a:	19 82       	std	Y+1, r1	; 0x01
    509c:	1a c0       	rjmp	.+52     	; 0x50d2 <USART_SendInteger+0x11a>
	{
		if(Local_u8arrStrNumber[Local_u8Counter]<=9)
    509e:	89 81       	ldd	r24, Y+1	; 0x01
    50a0:	28 2f       	mov	r18, r24
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	ce 01       	movw	r24, r28
    50a6:	02 96       	adiw	r24, 0x02	; 2
    50a8:	fc 01       	movw	r30, r24
    50aa:	e2 0f       	add	r30, r18
    50ac:	f3 1f       	adc	r31, r19
    50ae:	80 81       	ld	r24, Z
    50b0:	8a 30       	cpi	r24, 0x0A	; 10
    50b2:	60 f4       	brcc	.+24     	; 0x50cc <USART_SendInteger+0x114>
		{
			USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	28 2f       	mov	r18, r24
    50b8:	30 e0       	ldi	r19, 0x00	; 0
    50ba:	ce 01       	movw	r24, r28
    50bc:	02 96       	adiw	r24, 0x02	; 2
    50be:	fc 01       	movw	r30, r24
    50c0:	e2 0f       	add	r30, r18
    50c2:	f3 1f       	adc	r31, r19
    50c4:	80 81       	ld	r24, Z
    50c6:	80 5d       	subi	r24, 0xD0	; 208
    50c8:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <USART_SendDataPolling>
	{
		Local_u8arrStrNumber[Local_u8Counter]=Copy_u16Number%10;
		Copy_u16Number/=10;
		Local_u8Counter--;
	}
	for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    50cc:	89 81       	ldd	r24, Y+1	; 0x01
    50ce:	8f 5f       	subi	r24, 0xFF	; 255
    50d0:	89 83       	std	Y+1, r24	; 0x01
    50d2:	89 81       	ldd	r24, Y+1	; 0x01
    50d4:	85 30       	cpi	r24, 0x05	; 5
    50d6:	18 f3       	brcs	.-58     	; 0x509e <USART_SendInteger+0xe6>
		if(Local_u8arrStrNumber[Local_u8Counter]<=9)
		{
			USART_SendDataPolling((Local_u8arrStrNumber[Local_u8Counter]+48));
		}
	}
}
    50d8:	2d 96       	adiw	r28, 0x0d	; 13
    50da:	0f b6       	in	r0, 0x3f	; 63
    50dc:	f8 94       	cli
    50de:	de bf       	out	0x3e, r29	; 62
    50e0:	0f be       	out	0x3f, r0	; 63
    50e2:	cd bf       	out	0x3d, r28	; 61
    50e4:	cf 91       	pop	r28
    50e6:	df 91       	pop	r29
    50e8:	08 95       	ret

000050ea <USART_EnableRx>:

void USART_EnableRx() // enable rx during runtime
{
    50ea:	df 93       	push	r29
    50ec:	cf 93       	push	r28
    50ee:	cd b7       	in	r28, 0x3d	; 61
    50f0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    50f2:	aa e2       	ldi	r26, 0x2A	; 42
    50f4:	b0 e0       	ldi	r27, 0x00	; 0
    50f6:	ea e2       	ldi	r30, 0x2A	; 42
    50f8:	f0 e0       	ldi	r31, 0x00	; 0
    50fa:	80 81       	ld	r24, Z
    50fc:	80 61       	ori	r24, 0x10	; 16
    50fe:	8c 93       	st	X, r24

}
    5100:	cf 91       	pop	r28
    5102:	df 91       	pop	r29
    5104:	08 95       	ret

00005106 <USART_DisableRx>:

void USART_DisableRx() // disable rx during runtime
{
    5106:	df 93       	push	r29
    5108:	cf 93       	push	r28
    510a:	cd b7       	in	r28, 0x3d	; 61
    510c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXEN);
    510e:	aa e2       	ldi	r26, 0x2A	; 42
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	ea e2       	ldi	r30, 0x2A	; 42
    5114:	f0 e0       	ldi	r31, 0x00	; 0
    5116:	80 81       	ld	r24, Z
    5118:	8f 7e       	andi	r24, 0xEF	; 239
    511a:	8c 93       	st	X, r24

}
    511c:	cf 91       	pop	r28
    511e:	df 91       	pop	r29
    5120:	08 95       	ret

00005122 <USART_EnableTx>:

void USART_EnableTx() // enable tx during runtime
{
    5122:	df 93       	push	r29
    5124:	cf 93       	push	r28
    5126:	cd b7       	in	r28, 0x3d	; 61
    5128:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXEN);
    512a:	aa e2       	ldi	r26, 0x2A	; 42
    512c:	b0 e0       	ldi	r27, 0x00	; 0
    512e:	ea e2       	ldi	r30, 0x2A	; 42
    5130:	f0 e0       	ldi	r31, 0x00	; 0
    5132:	80 81       	ld	r24, Z
    5134:	88 60       	ori	r24, 0x08	; 8
    5136:	8c 93       	st	X, r24

}
    5138:	cf 91       	pop	r28
    513a:	df 91       	pop	r29
    513c:	08 95       	ret

0000513e <USART_DisableTx>:

void USART_DisableTx() // disable tx during runtime
{
    513e:	df 93       	push	r29
    5140:	cf 93       	push	r28
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXEN);
    5146:	aa e2       	ldi	r26, 0x2A	; 42
    5148:	b0 e0       	ldi	r27, 0x00	; 0
    514a:	ea e2       	ldi	r30, 0x2A	; 42
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	80 81       	ld	r24, Z
    5150:	87 7f       	andi	r24, 0xF7	; 247
    5152:	8c 93       	st	X, r24

}
    5154:	cf 91       	pop	r28
    5156:	df 91       	pop	r29
    5158:	08 95       	ret

0000515a <__udivmodhi4>:
    515a:	aa 1b       	sub	r26, r26
    515c:	bb 1b       	sub	r27, r27
    515e:	51 e1       	ldi	r21, 0x11	; 17
    5160:	07 c0       	rjmp	.+14     	; 0x5170 <__udivmodhi4_ep>

00005162 <__udivmodhi4_loop>:
    5162:	aa 1f       	adc	r26, r26
    5164:	bb 1f       	adc	r27, r27
    5166:	a6 17       	cp	r26, r22
    5168:	b7 07       	cpc	r27, r23
    516a:	10 f0       	brcs	.+4      	; 0x5170 <__udivmodhi4_ep>
    516c:	a6 1b       	sub	r26, r22
    516e:	b7 0b       	sbc	r27, r23

00005170 <__udivmodhi4_ep>:
    5170:	88 1f       	adc	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	5a 95       	dec	r21
    5176:	a9 f7       	brne	.-22     	; 0x5162 <__udivmodhi4_loop>
    5178:	80 95       	com	r24
    517a:	90 95       	com	r25
    517c:	bc 01       	movw	r22, r24
    517e:	cd 01       	movw	r24, r26
    5180:	08 95       	ret

00005182 <__prologue_saves__>:
    5182:	2f 92       	push	r2
    5184:	3f 92       	push	r3
    5186:	4f 92       	push	r4
    5188:	5f 92       	push	r5
    518a:	6f 92       	push	r6
    518c:	7f 92       	push	r7
    518e:	8f 92       	push	r8
    5190:	9f 92       	push	r9
    5192:	af 92       	push	r10
    5194:	bf 92       	push	r11
    5196:	cf 92       	push	r12
    5198:	df 92       	push	r13
    519a:	ef 92       	push	r14
    519c:	ff 92       	push	r15
    519e:	0f 93       	push	r16
    51a0:	1f 93       	push	r17
    51a2:	cf 93       	push	r28
    51a4:	df 93       	push	r29
    51a6:	cd b7       	in	r28, 0x3d	; 61
    51a8:	de b7       	in	r29, 0x3e	; 62
    51aa:	ca 1b       	sub	r28, r26
    51ac:	db 0b       	sbc	r29, r27
    51ae:	0f b6       	in	r0, 0x3f	; 63
    51b0:	f8 94       	cli
    51b2:	de bf       	out	0x3e, r29	; 62
    51b4:	0f be       	out	0x3f, r0	; 63
    51b6:	cd bf       	out	0x3d, r28	; 61
    51b8:	09 94       	ijmp

000051ba <__epilogue_restores__>:
    51ba:	2a 88       	ldd	r2, Y+18	; 0x12
    51bc:	39 88       	ldd	r3, Y+17	; 0x11
    51be:	48 88       	ldd	r4, Y+16	; 0x10
    51c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    51c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    51c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    51c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    51c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    51ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    51cc:	b9 84       	ldd	r11, Y+9	; 0x09
    51ce:	c8 84       	ldd	r12, Y+8	; 0x08
    51d0:	df 80       	ldd	r13, Y+7	; 0x07
    51d2:	ee 80       	ldd	r14, Y+6	; 0x06
    51d4:	fd 80       	ldd	r15, Y+5	; 0x05
    51d6:	0c 81       	ldd	r16, Y+4	; 0x04
    51d8:	1b 81       	ldd	r17, Y+3	; 0x03
    51da:	aa 81       	ldd	r26, Y+2	; 0x02
    51dc:	b9 81       	ldd	r27, Y+1	; 0x01
    51de:	ce 0f       	add	r28, r30
    51e0:	d1 1d       	adc	r29, r1
    51e2:	0f b6       	in	r0, 0x3f	; 63
    51e4:	f8 94       	cli
    51e6:	de bf       	out	0x3e, r29	; 62
    51e8:	0f be       	out	0x3f, r0	; 63
    51ea:	cd bf       	out	0x3d, r28	; 61
    51ec:	ed 01       	movw	r28, r26
    51ee:	08 95       	ret

000051f0 <itoa>:
    51f0:	fb 01       	movw	r30, r22
    51f2:	9f 01       	movw	r18, r30
    51f4:	e8 94       	clt
    51f6:	42 30       	cpi	r20, 0x02	; 2
    51f8:	c4 f0       	brlt	.+48     	; 0x522a <itoa+0x3a>
    51fa:	45 32       	cpi	r20, 0x25	; 37
    51fc:	b4 f4       	brge	.+44     	; 0x522a <itoa+0x3a>
    51fe:	4a 30       	cpi	r20, 0x0A	; 10
    5200:	29 f4       	brne	.+10     	; 0x520c <itoa+0x1c>
    5202:	97 fb       	bst	r25, 7
    5204:	1e f4       	brtc	.+6      	; 0x520c <itoa+0x1c>
    5206:	90 95       	com	r25
    5208:	81 95       	neg	r24
    520a:	9f 4f       	sbci	r25, 0xFF	; 255
    520c:	64 2f       	mov	r22, r20
    520e:	77 27       	eor	r23, r23
    5210:	0e 94 ad 28 	call	0x515a	; 0x515a <__udivmodhi4>
    5214:	80 5d       	subi	r24, 0xD0	; 208
    5216:	8a 33       	cpi	r24, 0x3A	; 58
    5218:	0c f0       	brlt	.+2      	; 0x521c <itoa+0x2c>
    521a:	89 5d       	subi	r24, 0xD9	; 217
    521c:	81 93       	st	Z+, r24
    521e:	cb 01       	movw	r24, r22
    5220:	00 97       	sbiw	r24, 0x00	; 0
    5222:	a1 f7       	brne	.-24     	; 0x520c <itoa+0x1c>
    5224:	16 f4       	brtc	.+4      	; 0x522a <itoa+0x3a>
    5226:	5d e2       	ldi	r21, 0x2D	; 45
    5228:	51 93       	st	Z+, r21
    522a:	10 82       	st	Z, r1
    522c:	c9 01       	movw	r24, r18
    522e:	0c 94 19 29 	jmp	0x5232	; 0x5232 <strrev>

00005232 <strrev>:
    5232:	dc 01       	movw	r26, r24
    5234:	fc 01       	movw	r30, r24
    5236:	67 2f       	mov	r22, r23
    5238:	71 91       	ld	r23, Z+
    523a:	77 23       	and	r23, r23
    523c:	e1 f7       	brne	.-8      	; 0x5236 <strrev+0x4>
    523e:	32 97       	sbiw	r30, 0x02	; 2
    5240:	04 c0       	rjmp	.+8      	; 0x524a <strrev+0x18>
    5242:	7c 91       	ld	r23, X
    5244:	6d 93       	st	X+, r22
    5246:	70 83       	st	Z, r23
    5248:	62 91       	ld	r22, -Z
    524a:	ae 17       	cp	r26, r30
    524c:	bf 07       	cpc	r27, r31
    524e:	c8 f3       	brcs	.-14     	; 0x5242 <strrev+0x10>
    5250:	08 95       	ret

00005252 <_exit>:
    5252:	f8 94       	cli

00005254 <__stop_program>:
    5254:	ff cf       	rjmp	.-2      	; 0x5254 <__stop_program>
